# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   MONGO_URL: ${{ secrets.MONGO_URL }}
#   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
#   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#   BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
#   HELM_VERSION: 3.12.0
#   CLUSTER_NAME: cluster-1
#   CLUSTER_ZONE: asia-south2-a
#   GCP_PROJECT_ID: nimble-net-452115-19
#   FRONTEND_REPO: jai3747/imdb-frontend
#   BACKEND_REPO: jai3747/imdb-backend
#   FRONTEND_IMAGE: jai3747/imdb-clone-frontend-prod
#   BACKEND_IMAGE: jai3747/imdb-clone-backend-prod
#   DEBUG_WORKFLOW: 'true'

# jobs:
#   # Secret Scans (TruffleHog) - Run in parallel for frontend and backend
#   frontend-secret-scan:
#     name: üîí Frontend Secret Scan
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Frontend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.FRONTEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         fetch-depth: 0
#         clean: true
#         force: true
#     - name: TruffleHog Scan
#       uses: trufflesecurity/trufflehog@v3.63.3
#       continue-on-error: true
#       with:
#         path: .
#         base: ${{ github.event.before }}
#         head: ${{ github.sha }}
#         extra_args: --json --output trufflehog-frontend-report.json
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-secret-scan-report
#         path: trufflehog-frontend-report.json
#         retention-days: 30

#   backend-secret-scan:
#     name: üîí Backend Secret Scan
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.BACKEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         fetch-depth: 0
#         clean: true
#         force: true
#     - name: TruffleHog Scan
#       uses: trufflesecurity/trufflehog@v3.63.3
#       continue-on-error: true
#       with:
#         path: .
#         base: ${{ github.event.before }}
#         head: ${{ github.sha }}
#         extra_args: --json --output trufflehog-backend-report.json
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-secret-scan-report
#         path: trufflehog-backend-report.json
#         retention-days: 30

#   # SCA Scans (Snyk) - Run after Secret Scans
#   frontend-sca:
#     name: üì¶ Frontend SCA
#     needs: [ frontend-secret-scan, backend-secret-scan ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Frontend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.FRONTEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Snyk Scan
#       uses: snyk/actions/node@master
#       continue-on-error: true
#       env:
#         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#       with:
#         command: test --json > snyk-frontend-report.json
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-sca-report
#         path: snyk-frontend-report.json
#         retention-days: 30

#   backend-sca:
#     name: üì¶ Backend SCA
#     needs: [ frontend-secret-scan, backend-secret-scan ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.BACKEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Snyk Scan
#       uses: snyk/actions/node@master
#       continue-on-error: true
#       env:
#         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#       with:
#         command: test --json > snyk-backend-report.json
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-sca-report
#         path: snyk-backend-report.json
#         retention-days: 30

#   # SAST Scans (Semgrep) - Run after SCA Scans
#   frontend-sast:
#     name: üîç Frontend SAST
#     needs: [ frontend-sca, backend-sca ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Frontend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.FRONTEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Semgrep Scan
#       uses: semgrep/semgrep-action@v1
#       continue-on-error: true
#       with:
#         config: p/javascript
#         output: semgrep-frontend-results.json
#         json: true
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-sast-report
#         path: semgrep-frontend-results.json
#         retention-days: 30

#   backend-sast:
#     name: üîç Backend SAST
#     needs: [ frontend-sca, backend-sca ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.BACKEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Semgrep Scan
#       uses: semgrep/semgrep-action@v1
#       continue-on-error: true
#       with:
#         config: p/javascript
#         output: semgrep-backend-results.json
#         json: true
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-sast-report
#         path: semgrep-backend-results.json
#         retention-days: 30

#   # IaC Scans (Checkov) - Run after SAST Scans
#   frontend-iac:
#     name: üèóÔ∏è Frontend IaC Scan
#     needs: [ frontend-sast, backend-sast ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Frontend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.FRONTEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Checkov Scan
#       uses: bridgecrewio/checkov-action@v12
#       continue-on-error: true
#       with:
#         directory: .
#         framework: dockerfile,kubernetes,secrets
#         output: json
#         output-file-path: checkov-frontend-report.json
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-iac-report
#         path: checkov-frontend-report.json
#         retention-days: 30

#   backend-iac:
#     name: üèóÔ∏è Backend IaC Scan
#     needs: [ frontend-sast, backend-sast ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.BACKEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Checkov Scan
#       uses: bridgecrewio/checkov-action@v12
#       continue-on-error: true
#       with:
#         directory: .
#         framework: dockerfile,kubernetes,secrets
#         output: json
#         output-file-path: checkov-backend-report.json
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-iac-report
#         path: checkov-backend-report.json
#         retention-days: 30

#   # K8s Scans (Kubesec) - Run after IaC Scans
#   frontend-k8s:
#     name: üõ°Ô∏è Frontend K8s Scan
#     needs: [ frontend-iac, backend-iac ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Frontend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.FRONTEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Install kubesec
#       run: |
#         wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
#         tar xzf kubesec_linux_amd64.tar.gz
#         sudo mv kubesec /usr/local/bin/
#     - name: Run kubesec scans
#       continue-on-error: true
#       run: |
#         for file in backup.yaml backup-pipeline.yaml pipeline.yaml; do
#           if [ -f "$file" ]; then
#             kubesec scan -f json "$file" > "kubesec-frontend-$(basename "$file" .yaml)-report.json" || true
#           fi
#         done
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-k8s-reports
#         path: kubesec-frontend-*.json
#         retention-days: 30

#   backend-k8s:
#     name: üõ°Ô∏è Backend K8s Scan
#     needs: [ frontend-iac, backend-iac ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
#     - name: Checkout Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.BACKEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true
#     - name: Install kubesec
#       run: |
#         wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
#         tar xzf kubesec_linux_amd64.tar.gz
#         sudo mv kubesec /usr/local/bin/
#     - name: Install Helm
#       uses: azure/setup-helm@v3
#       with:
#         version: 'v3.12.3'
#     - name: Create merged Helm templates
#       run: |
#         helm template imdb-clone ./imdb-clone > all-manifests.yaml || true
#     - name: Run kubesec scans
#       continue-on-error: true
#       run: |
#         for file in k8.yaml test-working-fine.yaml all-tested-pipeline.yaml; do
#           if [ -f "$file" ]; then
#             kubesec scan -f json "$file" > "kubesec-backend-$(basename "$file" .yaml)-report.json" || true
#           fi
#         done

#         if [ -f "all-manifests.yaml" ]; then
#           kubesec scan -f json all-manifests.yaml > kubesec-backend-helm-report.json || true
#         fi
#     - name: Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-k8s-reports
#         path: kubesec-backend-*.json
#         retention-days: 30

#   # Build and Push - Run after all scans complete
#   # frontend-build:
#   # Build and Push - Run after all scans complete
#   frontend-build:
#     name: üöÄ Frontend Build & Push
#     needs: [ frontend-k8s, backend-k8s ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean environment
#       run: |
#         rm -rf $HOME/fresh-workspace || true
#         mkdir -p $HOME/fresh-workspace/frontend

#     - name: Checkout Latest Frontend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.FRONTEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         path: $HOME/fresh-workspace/frontend
#         fetch-depth: 1
#         ref: main

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: "18"

#     - name: Clean npm cache and node_modules
#       run: |
#         npm cache clean --force
#         rm -rf $HOME/fresh-workspace/frontend/node_modules || true

#     - name: Install Frontend Dependencies
#       working-directory: $HOME/fresh-workspace/frontend
#       run: |
#         npm ci --no-cache --legacy-peer-deps

#     - name: Configure Environment
#       working-directory: $HOME/fresh-workspace/frontend
#       run: |
#         echo "REACT_APP_API_URL=${{ env.BACKEND_API_URL }}" > .env
#         echo "REACT_APP_API_TIMEOUT=30000" >> .env
#         echo "NODE_ENV=production" >> .env

#         # Also ensure env is passed to Docker build
#         if [ -f "src/config.js" ]; then
#           sed -i "s|http://.*|${{ env.BACKEND_API_URL }}'|g" src/config.js
#         fi

#         if [ -f "src/services/api.service.js" ]; then
#           sed -i "s|http://.*|${{ env.BACKEND_API_URL }}|g" src/services/api.service.js
#         fi

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Login to DockerHub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Generate build timestamp
#       id: timestamp
#       run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

#     - name: Build and Push Frontend Image
#       uses: docker/build-push-action@v5
#       with:
#         context: $HOME/fresh-workspace/frontend
#         push: true
#         tags: |
#           ${{ env.FRONTEND_IMAGE }}:latest
#           ${{ env.FRONTEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
#         build-args: |
#           NODE_ENV=production
#           REACT_APP_API_URL=${{ env.BACKEND_API_URL }}
#           REACT_APP_API_TIMEOUT=30000
#         cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
#         cache-to: type=inline
#         no-cache: true
#         pull: true

#   backend-build:
#     name: üöÄ Backend Build & Push
#     needs: [ frontend-k8s, backend-k8s ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean environment
#       run: |
#         rm -rf $HOME/fresh-workspace || true
#         mkdir -p $HOME/fresh-workspace/backend

#     - name: Checkout Latest Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: ${{ env.BACKEND_REPO }}
#         token: ${{ secrets.GH_PAT }}
#         path: $HOME/fresh-workspace/backend
#         fetch-depth: 1
#         ref: main

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: "18"

#     - name: Clean npm cache and node_modules
#       run: |
#         npm cache clean --force
#         rm -rf $HOME/fresh-workspace/backend/node_modules || true

#     - name: Install Backend Dependencies
#       working-directory: $HOME/fresh-workspace/backend
#       run: |
#         npm ci --no-cache

#     - name: Configure Backend Environment
#       working-directory: $HOME/fresh-workspace/backend
#       run: |
#         echo "NODE_ENV=production" > .env
#         echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
#         echo "PORT=5000" >> .env
#         echo "CORS_ORIGIN=*" >> .env

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Login to DockerHub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Generate build timestamp
#       id: timestamp
#       run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

#     - name: Build and Push Backend Image
#       uses: docker/build-push-action@v5
#       with:
#         context: $HOME/fresh-workspace/backend
#         push: true
#         tags: |
#           ${{ env.BACKEND_IMAGE }}:latest
#           ${{ env.BACKEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
#         build-args: |
#           NODE_ENV=production
#           MONGO_URL=${{ secrets.MONGO_URL }}
#           PORT=5000
#           CORS_ORIGIN=*
#         cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
#         cache-to: type=inline
#         no-cache: true
#         pull: true
#   # Container Scans - Run after build and push
#   frontend-container-scan:
#     name: üê≥ Frontend Container Scan
#     needs: [ frontend-build ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git

#     - name: Set up Trivy
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y wget apt-transport-https gnupg lsb-release
#         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#         echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#         sudo apt-get update
#         sudo apt-get install -y trivy

#     - name: Generate timestamp
#       id: timestamp
#       run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

#     - name: Scan Frontend Container Image
#       run: |
#         trivy image --format json --output trivy-frontend-report.json ${{ env.FRONTEND_IMAGE }}:latest

#     - name: Format Scan Results
#       run: |
#         echo "# Frontend Container Scan Results" > trivy-frontend-summary.md
#         echo "## Image: ${{ env.FRONTEND_IMAGE }}:latest" >> trivy-frontend-summary.md
#         echo "### Scan Date: $(date)" >> trivy-frontend-summary.md
#         echo "### Vulnerabilities:" >> trivy-frontend-summary.md

#         # Parse JSON and extract key information
#         if [ -f trivy-frontend-report.json ]; then
#           HIGH_COUNT=$(grep -o '"Severity":"HIGH"' trivy-frontend-report.json | wc -l)
#           CRITICAL_COUNT=$(grep -o '"Severity":"CRITICAL"' trivy-frontend-report.json | wc -l)
          
#           echo "- Critical: $CRITICAL_COUNT" >> trivy-frontend-summary.md
#           echo "- High: $HIGH_COUNT" >> trivy-frontend-summary.md
          
#           # Show top 10 critical vulnerabilities
#           echo "### Top Critical Vulnerabilities:" >> trivy-frontend-summary.md
#           grep -A 10 '"Severity":"CRITICAL"' trivy-frontend-report.json | grep '"PkgName"\|"VulnerabilityID"\|"Title"' | head -30 >> trivy-frontend-summary.md
#         else
#           echo "No scan results found" >> trivy-frontend-summary.md
#         fi

#     - name: Upload Detailed Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-container-scan-report
#         path: trivy-frontend-report.json
#         retention-days: 30

#     - name: Upload Summary
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-container-scan-summary
#         path: trivy-frontend-summary.md
#         retention-days: 30

#   backend-container-scan:
#     name: üê≥ Backend Container Scan
#     needs: [ backend-build ]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git

#     - name: Set up Trivy
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y wget apt-transport-https gnupg lsb-release
#         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#         echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#         sudo apt-get update
#         sudo apt-get install -y trivy

#     - name: Generate timestamp
#       id: timestamp
#       run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

#     - name: Scan Backend Container Image
#       run: |
#         trivy image --format json --output trivy-backend-report.json ${{ env.BACKEND_IMAGE }}:latest

#     - name: Format Scan Results
#       run: |
#         echo "# Backend Container Scan Results" > trivy-backend-summary.md
#         echo "## Image: ${{ env.BACKEND_IMAGE }}:latest" >> trivy-backend-summary.md
#         echo "### Scan Date: $(date)" >> trivy-backend-summary.md
#         echo "### Vulnerabilities:" >> trivy-backend-summary.md

#         # Parse JSON and extract key information
#         if [ -f trivy-backend-report.json ]; then
#           HIGH_COUNT=$(grep -o '"Severity":"HIGH"' trivy-backend-report.json | wc -l)
#           CRITICAL_COUNT=$(grep -o '"Severity":"CRITICAL"' trivy-backend-report.json | wc -l)
          
#           echo "- Critical: $CRITICAL_COUNT" >> trivy-backend-summary.md
#           echo "- High: $HIGH_COUNT" >> trivy-backend-summary.md
          
#           # Show top 10 critical vulnerabilities
#           echo "### Top Critical Vulnerabilities:" >> trivy-backend-summary.md
#           grep -A 10 '"Severity":"CRITICAL"' trivy-backend-report.json | grep '"PkgName"\|"VulnerabilityID"\|"Title"' | head -30 >> trivy-backend-summary.md
#         else
#           echo "No scan results found" >> trivy-backend-summary.md
#         fi

#     - name: Upload Detailed Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-container-scan-report
#         path: trivy-backend-report.json
#         retention-days: 30

#     - name: Upload Summary
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-container-scan-summary
#         path: trivy-backend-summary.md
#         retention-days: 30
#   deploy:
#     needs: [ backend-container-scan, frontend-container-scan ]
#     runs-on: ubuntu-latest

#     steps:
#     - name: Clean workspace
#       run: |
#         rm -rf *
#         rm -rf .git
        
#     - name: Checkout Backend Code
#       uses: actions/checkout@v4
#       with:
#         repository: jai3747/imdb-backend
#         token: ${{ secrets.GH_PAT }}
#         clean: true
#         force: true

#     - name: Setup gcloud CLI
#       uses: google-github-actions/setup-gcloud@v1
#       with:
#         service_account_key: ${{ secrets.GCP_SA_KEY }}
#         project_id: ${{ env.GCP_PROJECT_ID }}
#         export_default_credentials: true

#     - name: Install Helm
#       uses: azure/setup-helm@v3
#       with:
#         version: ${{ env.HELM_VERSION }}

#     - name: Get GKE credentials
#       uses: google-github-actions/get-gke-credentials@v1
#       with:
#         cluster_name: ${{ env.CLUSTER_NAME }}
#         location: ${{ env.CLUSTER_ZONE }}
#         project_id: ${{ env.GCP_PROJECT_ID }}

#     - name: Verify kubectl connection
#       run: kubectl get nodes

#     - name: Add Helm repositories
#       run: |
#         helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#         helm repo update

#     - name: Deploy application with Helm
#       run: |
#         # Using the Chart.yaml in the root directory
#         helm upgrade --install imdb-backend . -f values-prod.yaml -n prod --create-namespace

#     - name: Restart deployments
#       run: |
#         kubectl rollout restart deployment backend-deployment -n prod
#         kubectl rollout restart deployment frontend-deployment -n prod
#         kubectl rollout restart deployment ingress-nginx-controller -n ingress-nginx

#     - name: Verify deployment
#       run: |
#         kubectl get all -n prod
#         kubectl get all -n ingress-nginx
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
  HELM_VERSION: 3.12.0
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south2-a
  GCP_PROJECT_ID: nimble-net-452115-19
  FRONTEND_REPO: jai3747/imdb-frontend
  BACKEND_REPO: jai3747/imdb-backend
  FRONTEND_IMAGE: jai3747/imdb-clone-frontend-prod
  BACKEND_IMAGE: jai3747/imdb-clone-backend-prod
  DEBUG_WORKFLOW: 'true'

jobs:
  # Secret Scans (TruffleHog) - Run in parallel for frontend and backend
  frontend-secret-scan:
    name: üîí Frontend Secret Scan
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
        clean: true
        force: true
    - name: TruffleHog Scan
      uses: trufflesecurity/trufflehog@v3.63.3
      continue-on-error: true
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --json --output trufflehog-frontend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-secret-scan-report
        path: trufflehog-frontend-report.json
        retention-days: 30

  backend-secret-scan:
    name: üîí Backend Secret Scan
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
        clean: true
        force: true
    - name: TruffleHog Scan
      uses: trufflesecurity/trufflehog@v3.63.3
      continue-on-error: true
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --json --output trufflehog-backend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-secret-scan-report
        path: trufflehog-backend-report.json
        retention-days: 30

  # SCA Scans (Snyk) - Run after Secret Scans
  frontend-sca:
    name: üì¶ Frontend SCA
    needs: [ frontend-secret-scan, backend-secret-scan ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Snyk Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test --json > snyk-frontend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-sca-report
        path: snyk-frontend-report.json
        retention-days: 30

  backend-sca:
    name: üì¶ Backend SCA
    needs: [ frontend-secret-scan, backend-secret-scan ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Snyk Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test --json > snyk-backend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-sca-report
        path: snyk-backend-report.json
        retention-days: 30

  # SAST Scans (Semgrep) - Run after SCA Scans
  frontend-sast:
    name: üîç Frontend SAST
    needs: [ frontend-sca, backend-sca ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Semgrep Scan
      uses: semgrep/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/javascript
        output: semgrep-frontend-results.json
        json: true
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-sast-report
        path: semgrep-frontend-results.json
        retention-days: 30

  backend-sast:
    name: üîç Backend SAST
    needs: [ frontend-sca, backend-sca ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Semgrep Scan
      uses: semgrep/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/javascript
        output: semgrep-backend-results.json
        json: true
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-sast-report
        path: semgrep-backend-results.json
        retention-days: 30

  # IaC Scans (Checkov) - Run after SAST Scans
  frontend-iac:
    name: üèóÔ∏è Frontend IaC Scan
    needs: [ frontend-sast, backend-sast ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@v12
      continue-on-error: true
      with:
        directory: .
        framework: dockerfile,kubernetes,secrets
        output: json
        output-file-path: checkov-frontend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-iac-report
        path: checkov-frontend-report.json
        retention-days: 30

  backend-iac:
    name: üèóÔ∏è Backend IaC Scan
    needs: [ frontend-sast, backend-sast ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@v12
      continue-on-error: true
      with:
        directory: .
        framework: dockerfile,kubernetes,secrets
        output: json
        output-file-path: checkov-backend-report.json
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-iac-report
        path: checkov-backend-report.json
        retention-days: 30

  # K8s Scans (Kubesec) - Run after IaC Scans
  frontend-k8s:
    name: üõ°Ô∏è Frontend K8s Scan
    needs: [ frontend-iac, backend-iac ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Install kubesec
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
    - name: Run kubesec scans
      continue-on-error: true
      run: |
        for file in backup.yaml backup-pipeline.yaml pipeline.yaml; do
          if [ -f "$file" ]; then
            kubesec scan -f json "$file" > "kubesec-frontend-$(basename "$file" .yaml)-report.json" || true
          fi
        done
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-k8s-reports
        path: kubesec-frontend-*.json
        retention-days: 30

  backend-k8s:
    name: üõ°Ô∏è Backend K8s Scan
    needs: [ frontend-iac, backend-iac ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true
    - name: Install kubesec
      run: |
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'
    - name: Create merged Helm templates
      run: |
        helm template imdb-clone ./imdb-clone > all-manifests.yaml || true
    - name: Run kubesec scans
      continue-on-error: true
      run: |
        for file in k8.yaml test-working-fine.yaml all-tested-pipeline.yaml; do
          if [ -f "$file" ]; then
            kubesec scan -f json "$file" > "kubesec-backend-$(basename "$file" .yaml)-report.json" || true
          fi
        done

        if [ -f "all-manifests.yaml" ]; then
          kubesec scan -f json all-manifests.yaml > kubesec-backend-helm-report.json || true
        fi
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-k8s-reports
        path: kubesec-backend-*.json
        retention-days: 30

  # Build and Push - Run after all scans complete
  # frontend-build:
  # Build and Push - Run after all scans complete
  frontend-build:
    name: üöÄ Frontend Build & Push
    needs: [ frontend-k8s, backend-k8s ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean environment
      run: |
        rm -rf $HOME/fresh-workspace || true
        mkdir -p $HOME/fresh-workspace/frontend

    - name: Checkout Latest Frontend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.FRONTEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: $HOME/fresh-workspace/frontend
        fetch-depth: 1
        ref: main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Clean npm cache and node_modules
      run: |
        npm cache clean --force
        rm -rf $HOME/fresh-workspace/frontend/node_modules || true

    - name: Install Frontend Dependencies
      working-directory: $HOME/fresh-workspace/frontend
      run: |
        npm ci --no-cache --legacy-peer-deps

    - name: Configure Environment
      working-directory: $HOME/fresh-workspace/frontend
      run: |
        echo "REACT_APP_API_URL=${{ env.BACKEND_API_URL }}" > .env
        echo "REACT_APP_API_TIMEOUT=30000" >> .env
        echo "NODE_ENV=production" >> .env

        # Also ensure env is passed to Docker build
        if [ -f "src/config.js" ]; then
          sed -i "s|http://.*|${{ env.BACKEND_API_URL }}'|g" src/config.js
        fi

        if [ -f "src/services/api.service.js" ]; then
          sed -i "s|http://.*|${{ env.BACKEND_API_URL }}|g" src/services/api.service.js
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: $HOME/fresh-workspace/frontend
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
        build-args: |
          NODE_ENV=production
          REACT_APP_API_URL=${{ env.BACKEND_API_URL }}
          REACT_APP_API_TIMEOUT=30000
        cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
        cache-to: type=inline
        no-cache: true
        pull: true

  backend-build:
    name: üöÄ Backend Build & Push
    needs: [ frontend-k8s, backend-k8s ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean environment
      run: |
        rm -rf $HOME/fresh-workspace || true
        mkdir -p $HOME/fresh-workspace/backend

    - name: Checkout Latest Backend Code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        token: ${{ secrets.GH_PAT }}
        path: $HOME/fresh-workspace/backend
        fetch-depth: 1
        ref: main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Clean npm cache and node_modules
      run: |
        npm cache clean --force
        rm -rf $HOME/fresh-workspace/backend/node_modules || true

    - name: Install Backend Dependencies
      working-directory: $HOME/fresh-workspace/backend
      run: |
        npm ci --no-cache

    - name: Configure Backend Environment
      working-directory: $HOME/fresh-workspace/backend
      run: |
        echo "NODE_ENV=production" > .env
        echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
        echo "PORT=5000" >> .env
        echo "CORS_ORIGIN=*" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate build timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: $HOME/fresh-workspace/backend
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ steps.timestamp.outputs.timestamp }}
        build-args: |
          NODE_ENV=production
          MONGO_URL=${{ secrets.MONGO_URL }}
          PORT=5000
          CORS_ORIGIN=*
        cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
        cache-to: type=inline
        no-cache: true
        pull: true
  # Container Scans - Run after build and push
  frontend-container-scan:
    name: üê≥ Frontend Container Scan
    needs: [ frontend-build ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git

    - name: Set up Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Scan Frontend Container Image
      run: |
        trivy image --format json --output trivy-frontend-report.json ${{ env.FRONTEND_IMAGE }}:latest

    - name: Format Scan Results
      run: |
        echo "# Frontend Container Scan Results" > trivy-frontend-summary.md
        echo "## Image: ${{ env.FRONTEND_IMAGE }}:latest" >> trivy-frontend-summary.md
        echo "### Scan Date: $(date)" >> trivy-frontend-summary.md
        echo "### Vulnerabilities:" >> trivy-frontend-summary.md

        # Parse JSON and extract key information
        if [ -f trivy-frontend-report.json ]; then
          HIGH_COUNT=$(grep -o '"Severity":"HIGH"' trivy-frontend-report.json | wc -l)
          CRITICAL_COUNT=$(grep -o '"Severity":"CRITICAL"' trivy-frontend-report.json | wc -l)
          
          echo "- Critical: $CRITICAL_COUNT" >> trivy-frontend-summary.md
          echo "- High: $HIGH_COUNT" >> trivy-frontend-summary.md
          
          # Show top 10 critical vulnerabilities
          echo "### Top Critical Vulnerabilities:" >> trivy-frontend-summary.md
          grep -A 10 '"Severity":"CRITICAL"' trivy-frontend-report.json | grep '"PkgName"\|"VulnerabilityID"\|"Title"' | head -30 >> trivy-frontend-summary.md
        else
          echo "No scan results found" >> trivy-frontend-summary.md
        fi

    - name: Upload Detailed Results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-container-scan-report
        path: trivy-frontend-report.json
        retention-days: 30

    - name: Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: frontend-container-scan-summary
        path: trivy-frontend-summary.md
        retention-days: 30

  backend-container-scan:
    name: üê≥ Backend Container Scan
    needs: [ backend-build ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git

    - name: Set up Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Scan Backend Container Image
      run: |
        trivy image --format json --output trivy-backend-report.json ${{ env.BACKEND_IMAGE }}:latest

    - name: Format Scan Results
      run: |
        echo "# Backend Container Scan Results" > trivy-backend-summary.md
        echo "## Image: ${{ env.BACKEND_IMAGE }}:latest" >> trivy-backend-summary.md
        echo "### Scan Date: $(date)" >> trivy-backend-summary.md
        echo "### Vulnerabilities:" >> trivy-backend-summary.md

        # Parse JSON and extract key information
        if [ -f trivy-backend-report.json ]; then
          HIGH_COUNT=$(grep -o '"Severity":"HIGH"' trivy-backend-report.json | wc -l)
          CRITICAL_COUNT=$(grep -o '"Severity":"CRITICAL"' trivy-backend-report.json | wc -l)
          
          echo "- Critical: $CRITICAL_COUNT" >> trivy-backend-summary.md
          echo "- High: $HIGH_COUNT" >> trivy-backend-summary.md
          
          # Show top 10 critical vulnerabilities
          echo "### Top Critical Vulnerabilities:" >> trivy-backend-summary.md
          grep -A 10 '"Severity":"CRITICAL"' trivy-backend-report.json | grep '"PkgName"\|"VulnerabilityID"\|"Title"' | head -30 >> trivy-backend-summary.md
        else
          echo "No scan results found" >> trivy-backend-summary.md
        fi

    - name: Upload Detailed Results
      uses: actions/upload-artifact@v4
      with:
        name: backend-container-scan-report
        path: trivy-backend-report.json
        retention-days: 30

    - name: Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: backend-container-scan-summary
        path: trivy-backend-summary.md
        retention-days: 30
  deploy:
    needs: [ backend-container-scan, frontend-container-scan ]
    runs-on: ubuntu-latest

    steps:
    - name: Clean workspace
      run: |
        rm -rf *
        rm -rf .git
        
    - name: Checkout Backend Code
      uses: actions/checkout@v4
      with:
        repository: jai3747/imdb-backend
        token: ${{ secrets.GH_PAT }}
        clean: true
        force: true

    # Authentication needs to happen before getting cluster credentials
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        location: ${{ env.CLUSTER_ZONE }}
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Verify kubectl connection
      run: kubectl get nodes

    - name: Add Helm repositories
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update

    - name: Deploy application with Helm
      run: |
        # Using the Chart.yaml in the root directory
        helm upgrade --install imdb-backend . -f values-prod.yaml -n prod --create-namespace

    - name: Restart deployments
      run: |
        kubectl rollout restart deployment backend-deployment -n prod
        kubectl rollout restart deployment frontend-deployment -n prod
        kubectl rollout restart deployment ingress-nginx-controller -n ingress-nginx

    - name: Verify deployment
      run: |
        kubectl get all -n prod
        kubectl get all -n ingress-nginx
