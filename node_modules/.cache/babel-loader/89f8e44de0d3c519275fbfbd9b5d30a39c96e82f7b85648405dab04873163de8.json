{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useState } from \"react\";\n// // // import Button from \"@mui/material/Button\";\n// // // import TextField from \"@mui/material/TextField\";\n// // // import { useNavigate, useParams } from \"react-router-dom\";\n// // // import CircularProgress from \"@mui/material/CircularProgress\";\n// // // import Box from \"@mui/material/Box\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// // // import apiService from \"./services/api.service\"; // Import apiService\n\n// // // function EditMovies() {\n// // //   const { id } = useParams();\n// // //   const [movie, setMovie] = useState(null);\n\n// // //   useEffect(() => {\n// // //     getMovie();\n// // //   }, []);\n\n// // //   const getMovie = async () => {\n// // //     const moviesData = await apiService.getMovie(id); // Use apiService\n// // //     setMovie(moviesData);\n// // //   };\n\n// // //   return (\n// // //     <>\n// // //       {movie ? (\n// // //         <EditFunction movie={movie} />\n// // //       ) : (\n// // //         <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n// // //           <CircularProgress />\n// // //         </Box>\n// // //       )}\n// // //     </>\n// // //   );\n// // // }\n\n// // // const EditFunction = ({ movie }) => {\n// // //   const navigate = useNavigate();\n// // //   const [actors, setActors] = useState([]);\n// // //   const [producer, setProducer] = useState(\"\");\n// // //   const [producerArr, setProducerArr] = useState([]);\n// // //   const [actorNames, setActorNames] = useState([]);\n\n// // //   useEffect(() => {\n// // //     getData();\n// // //   }, []);\n\n// // //   const getData = async () => {\n// // //     const producers = await apiService.getProducers(); // Use apiService\n// // //     const actors = await apiService.getActors(); // Use apiService\n// // //     setProducerArr(producers);\n// // //     setActorNames(actors);\n// // //   };\n\n// // //   const handleProducerChange = (e) => {\n// // //     const { value } = e.target;\n// // //     setProducer(value);\n// // //   };\n\n// // //   const handleChange = (e) => {\n// // //     const { value } = e.target;\n// // //     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n// // //   };\n\n// // //   const movieValidationSchema = yup.object({\n// // //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// // //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// // //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// // //     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n// // //     yearOfRelease: yup\n// // //       .number()\n// // //       .required(\"*Year of release field is mandatory\")\n// // //       .min(5),\n// // //   });\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: movie.name,\n// // //       desc: movie.desc,\n// // //       director: movie.director,\n// // //       poster: movie.poster,\n// // //       yearOfRelease: movie.yearOfRelease,\n// // //     },\n// // //     validationSchema: movieValidationSchema,\n// // //     onSubmit: async (newMovie) => {\n// // //       await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n// // //       navigate(\"/\");\n// // //     },\n// // //   });\n\n// // //   return (\n// // //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // //       <TextField\n// // //         label=\"Enter the name\"\n// // //         variant=\"outlined\"\n// // //         id=\"name\"\n// // //         name=\"name\"\n// // //         value={formik.values.name}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.name && formik.errors.name}\n// // //         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the movie Description\"\n// // //         variant=\"outlined\"\n// // //         id=\"desc\"\n// // //         name=\"desc\"\n// // //         value={formik.values.desc}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.desc && formik.errors.desc}\n// // //         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the poster link\"\n// // //         variant=\"outlined\"\n// // //         id=\"poster\"\n// // //         name=\"poster\"\n// // //         value={formik.values.poster}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.poster && formik.errors.poster}\n// // //         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the director name\"\n// // //         variant=\"outlined\"\n// // //         id=\"director\"\n// // //         name=\"director\"\n// // //         value={formik.values.director}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.director && formik.errors.director}\n// // //         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the year of release\"\n// // //         variant=\"outlined\"\n// // //         id=\"yearOfRelease\"\n// // //         name=\"yearOfRelease\"\n// // //         value={formik.values.yearOfRelease}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //         helperText={\n// // //           formik.touched.yearOfRelease && formik.errors.yearOfRelease\n// // //             ? formik.errors.yearOfRelease\n// // //             : \"\"\n// // //         }\n// // //       />\n// // //       <FormControl fullWidth>\n// // //         <InputLabel id=\"producer\">Producer Name</InputLabel>\n// // //         <Select\n// // //           labelId=\"producer\"\n// // //           id=\"producer\"\n// // //           value={producer}\n// // //           label=\"producer\"\n// // //           onChange={handleProducerChange}\n// // //         >\n// // //           {producerArr.map((prodName) => (\n// // //             <MenuItem key={prodName._id} value={prodName._id}>\n// // //               {prodName.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n// // //       <FormControl fullWidth>\n// // //         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// // //         <Select\n// // //           labelId=\"actor\"\n// // //           id=\"actor\"\n// // //           multiple\n// // //           value={actors}\n// // //           onChange={handleChange}\n// // //         >\n// // //           {actorNames.map((actor) => (\n// // //             <MenuItem key={actor._id} value={actor._id}>\n// // //               {actor.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n// // //       <Button variant=\"contained\" type=\"submit\">\n// // //         Update Movie\n// // //       </Button>\n// // //     </form>\n// // //   );\n// // // };\n\n// // // export default EditMovies;\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate, useParams } from \"react-router-dom\";\n// // import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// // import { Button } from \"@/components/ui/button\";\n// // import { Input } from \"@/components/ui/input\";\n// // import { Label } from \"@/components/ui/label\";\n// // import {\n// //   Select,\n// //   SelectContent,\n// //   SelectItem,\n// //   SelectTrigger,\n// //   SelectValue,\n// // } from \"@/components/ui/select\";\n// // import {\n// //   Form,\n// //   FormControl,\n// //   FormField,\n// //   FormItem,\n// //   FormLabel,\n// //   FormMessage,\n// // } from \"@/components/ui/form\";\n// // import { Loader2 } from \"lucide-react\";\n// // import { zodResolver } from \"@hookform/resolve\";\n// // import { useForm } from \"react-hook-form\";\n// // import * as z from \"zod\";\n// // import apiService from \"./services/api.service\";\n// // // import apiService from \"./services/api.service\"; // Import apiService\n// // // import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\n// // const movieSchema = z.object({\n// //   name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n// //   desc: z.string().min(1, { message: \"Description is required\" }),\n// //   director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n// //   poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n// //   yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n// //   producer: z.string().min(1, { message: \"Producer is required\" }),\n// //   actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n// // });\n\n// // function EditMovies() {\n// //   const { id } = useParams();\n// //   const [loading, setLoading] = useState(true);\n// //   const [movie, setMovie] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     fetchMovie();\n// //   }, [id]);\n\n// //   const fetchMovie = async () => {\n// //     try {\n// //       const response = await apiService.get(`/movies/${id}`);\n// //       setMovie(response);\n// //       setLoading(false);\n// //     } catch (err) {\n// //       setError(\"Failed to fetch movie details\");\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <div className=\"flex justify-center items-center h-64\">\n// //         <Loader2 className=\"h-8 w-8 animate-spin\" />\n// //       </div>\n// //     );\n// //   }\n\n// //   if (error) {\n// //     return <div className=\"text-red-500 text-center\">{error}</div>;\n// //   }\n\n// //   return movie ? <EditMovieForm movie={movie} /> : null;\n// // }\n\n// // function EditMovieForm({ movie }) {\n// //   const navigate = useNavigate();\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [submitting, setSubmitting] = useState(false);\n\n// //   const form = useForm({\n// //     resolver: zodResolver(movieSchema),\n// //     defaultValues: {\n// //       name: movie.name,\n// //       desc: movie.desc,\n// //       director: movie.director,\n// //       poster: movie.poster,\n// //       yearOfRelease: movie.yearOfRelease,\n// //       producer: movie.producer,\n// //       actors: movie.actors\n// //     }\n// //   });\n\n// //   useEffect(() => {\n// //     fetchData();\n// //   }, []);\n\n// //   const fetchData = async () => {\n// //     try {\n// //       const [producersData, actorsData] = await Promise.all([\n// //         apiService.get('/producers'),\n// //         apiService.get('/actors')\n// //       ]);\n// //       setProducers(producersData);\n// //       setActors(actorsData);\n// //     } catch (error) {\n// //       console.error('Failed to fetch data:', error);\n// //     }\n// //   };\n\n// //   const onSubmit = async (data) => {\n// //     try {\n// //       setSubmitting(true);\n// //       await apiService.post(`/movies/${movie._id}`, data);\n// //       navigate('/');\n// //     } catch (error) {\n// //       console.error('Failed to update movie:', error);\n// //     } finally {\n// //       setSubmitting(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n// //       <CardHeader>\n// //         <CardTitle>Edit Movie</CardTitle>\n// //       </CardHeader>\n// //       <CardContent>\n// //         <Form {...form}>\n// //           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n// //             <FormField\n// //               control={form.control}\n// //               name=\"name\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Movie Name</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"desc\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Description</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"director\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Director</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"poster\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Poster URL</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"yearOfRelease\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Year of Release</FormLabel>\n// //                   <FormControl>\n// //                     <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"producer\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Producer</FormLabel>\n// //                   <Select onValueChange={field.onChange} defaultValue={field.value}>\n// //                     <FormControl>\n// //                       <SelectTrigger>\n// //                         <SelectValue placeholder=\"Select a producer\" />\n// //                       </SelectTrigger>\n// //                     </FormControl>\n// //                     <SelectContent>\n// //                       {producers.map((producer) => (\n// //                         <SelectItem key={producer._id} value={producer._id}>\n// //                           {producer.name}\n// //                         </SelectItem>\n// //                       ))}\n// //                     </SelectContent>\n// //                   </Select>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"actors\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Actors</FormLabel>\n// //                   <Select\n// //                     onValueChange={(value) => field.onChange([...field.value, value])}\n// //                     value={field.value}\n// //                     multiple\n// //                   >\n// //                     <FormControl>\n// //                       <SelectTrigger>\n// //                         <SelectValue placeholder=\"Select actors\" />\n// //                       </SelectTrigger>\n// //                     </FormControl>\n// //                     <SelectContent>\n// //                       {actors.map((actor) => (\n// //                         <SelectItem key={actor._id} value={actor._id}>\n// //                           {actor.name}\n// //                         </SelectItem>\n// //                       ))}\n// //                     </SelectContent>\n// //                   </Select>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <Button type=\"submit\" disabled={submitting}>\n// //               {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n// //               Update Movie\n// //             </Button>\n// //           </form>\n// //         </Form>\n// //       </CardContent>\n// //     </Card>\n// //   );\n// // }\n\n// // export default EditMovies;\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import Card from \"@mui/material/Card\";\n// import CardContent from \"@mui/material/CardContent\";\n// import CardHeader from \"@mui/material/CardHeader\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// import apiService from \"./services/api.service\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const [loading, setLoading] = useState(true);\n//   const [movie, setMovie] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetchMovie();\n//   }, []);\n\n//   const fetchMovie = async () => {\n//     try {\n//       const response = await apiService.get(`/movies/${id}`);\n//       setMovie(response);\n//       setLoading(false);\n//     } catch (err) {\n//       setError(\"Failed to fetch movie details\");\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   if (error) {\n//     return <Box sx={{ color: \"error.main\", textAlign: \"center\" }}>{error}</Box>;\n//   }\n\n//   return movie ? <EditMovieForm movie={movie} /> : null;\n// }\n\n// function EditMovieForm({ movie }) {\n//   const navigate = useNavigate();\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [formData, setFormData] = useState({\n//     name: movie.name,\n//     desc: movie.desc,\n//     director: movie.director,\n//     poster: movie.poster,\n//     yearOfRelease: movie.yearOfRelease,\n//     producer: movie.producer || \"\",\n//     actors: movie.actors || []\n//   });\n//   const [submitting, setSubmitting] = useState(false);\n//   const [errors, setErrors] = useState({});\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [producersData, actorsData] = await Promise.all([\n//         apiService.get('/producers'),\n//         apiService.get('/actors')\n//       ]);\n//       setProducers(producersData);\n//       setActors(actorsData);\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     if (!formData.name || formData.name.length < 3) {\n//       newErrors.name = \"Name must be at least 3 characters\";\n//     }\n//     if (!formData.desc) {\n//       newErrors.desc = \"Description is required\";\n//     }\n//     if (!formData.director || formData.director.length < 5) {\n//       newErrors.director = \"Director name must be at least 5 characters\";\n//     }\n//     if (!formData.poster || formData.poster.length < 5) {\n//       newErrors.poster = \"Poster URL must be at least 5 characters\";\n//     }\n//     if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n//       newErrors.yearOfRelease = \"Invalid year\";\n//     }\n//     if (!formData.producer) {\n//       newErrors.producer = \"Producer is required\";\n//     }\n//     if (!formData.actors || formData.actors.length === 0) {\n//       newErrors.actors = \"At least one actor must be selected\";\n//     }\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleActorsChange = (event) => {\n//     setFormData(prev => ({\n//       ...prev,\n//       actors: event.target.value\n//     }));\n//   };\n\n//   const onSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n\n//     try {\n//       setSubmitting(true);\n//       await apiService.post(`/movies/${movie._id}`, formData);\n//       navigate('/');\n//     } catch (error) {\n//       console.error('Failed to update movie:', error);\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n//       <CardHeader title=\"Edit Movie\" />\n//       <CardContent>\n//         <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n//           <TextField\n//             label=\"Movie Name\"\n//             name=\"name\"\n//             value={formData.name}\n//             onChange={handleChange}\n//             error={!!errors.name}\n//             helperText={errors.name}\n//             fullWidth\n//           />\n\n//           <TextField\n//             label=\"Description\"\n//             name=\"desc\"\n//             value={formData.desc}\n//             onChange={handleChange}\n//             error={!!errors.desc}\n//             helperText={errors.desc}\n//             fullWidth\n//             multiline\n//             rows={3}\n//           />\n\n//           <TextField\n//             label=\"Director\"\n//             name=\"director\"\n//             value={formData.director}\n//             onChange={handleChange}\n//             error={!!errors.director}\n//             helperText={errors.director}\n//             fullWidth\n//           />\n\n//           <TextField\n//             label=\"Poster URL\"\n//             name=\"poster\"\n//             value={formData.poster}\n//             onChange={handleChange}\n//             error={!!errors.poster}\n//             helperText={errors.poster}\n//             fullWidth\n//           />\n\n//           <TextField\n//             label=\"Year of Release\"\n//             name=\"yearOfRelease\"\n//             type=\"number\"\n//             value={formData.yearOfRelease}\n//             onChange={handleChange}\n//             error={!!errors.yearOfRelease}\n//             helperText={errors.yearOfRelease}\n//             fullWidth\n//           />\n\n//           <FormControl fullWidth error={!!errors.producer}>\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               name=\"producer\"\n//               value={formData.producer}\n//               onChange={handleChange}\n//               label=\"Producer\"\n//             >\n//               {producers.map((producer) => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n\n//           <FormControl fullWidth error={!!errors.actors}>\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               name=\"actors\"\n//               value={formData.actors}\n//               onChange={handleActorsChange}\n//               label=\"Actors\"\n//             >\n//               {actors.map((actor) => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n\n//           <Button \n//             type=\"submit\" \n//             variant=\"contained\" \n//             disabled={submitting}\n//             sx={{ mt: 2 }}\n//           >\n//             {submitting ? \"Updating...\" : \"Update Movie\"}\n//           </Button>\n//         </form>\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default EditMovies;\n// EditMovies.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { FormControl, InputLabel, MenuItem, Select, FormHelperText } from \"@mui/material\";\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport apiService from \"./services/api.service\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EditMovies() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    desc: '',\n    director: '',\n    poster: '',\n    yearOfRelease: '',\n    producer: '',\n    actors: []\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n  useEffect(() => {\n    fetchInitialData();\n  }, [id]);\n  const fetchInitialData = async () => {\n    try {\n      const [movieData, producersData, actorsData] = await Promise.all([apiService.getMovie(id), apiService.getProducers(), apiService.getActors()]);\n      setMovie(movieData);\n      setProducers(producersData);\n      setActors(actorsData);\n      setFormData({\n        name: movieData.name || '',\n        desc: movieData.desc || '',\n        director: movieData.director || '',\n        poster: movieData.poster || '',\n        yearOfRelease: movieData.yearOfRelease || '',\n        producer: movieData.producer || '',\n        actors: movieData.actors || []\n      });\n    } catch (error) {\n      setSnackbar({\n        open: true,\n        message: error.message || 'Failed to load data',\n        severity: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.name || formData.name.length < 3) {\n      newErrors.name = \"Name must be at least 3 characters\";\n    }\n    if (!formData.desc) {\n      newErrors.desc = \"Description is required\";\n    }\n    if (!formData.director || formData.director.length < 5) {\n      newErrors.director = \"Director name must be at least 5 characters\";\n    }\n    if (!formData.poster || formData.poster.length < 5) {\n      newErrors.poster = \"Poster URL must be at least 5 characters\";\n    }\n    if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n      newErrors.yearOfRelease = \"Invalid year\";\n    }\n    if (!formData.producer) {\n      newErrors.producer = \"Producer is required\";\n    }\n    if (!formData.actors || formData.actors.length === 0) {\n      newErrors.actors = \"At least one actor must be selected\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleActorsChange = event => {\n    setFormData(prev => ({\n      ...prev,\n      actors: event.target.value\n    }));\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    try {\n      setSubmitting(true);\n      await apiService.updateMovie(id, formData);\n      setSnackbar({\n        open: true,\n        message: 'Movie updated successfully!',\n        severity: 'success'\n      });\n      setTimeout(() => navigate('/'), 1500);\n    } catch (error) {\n      setSnackbar({\n        open: true,\n        message: error.message || 'Failed to update movie',\n        severity: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"64vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 800,\n        margin: \"2rem auto\",\n        padding: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Edit Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: onSubmit,\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"1rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Movie Name\",\n            name: \"name\",\n            value: formData.name,\n            onChange: handleChange,\n            error: !!errors.name,\n            helperText: errors.name,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Description\",\n            name: \"desc\",\n            value: formData.desc,\n            onChange: handleChange,\n            error: !!errors.desc,\n            helperText: errors.desc,\n            fullWidth: true,\n            multiline: true,\n            rows: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Director\",\n            name: \"director\",\n            value: formData.director,\n            onChange: handleChange,\n            error: !!errors.director,\n            helperText: errors.director,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Poster URL\",\n            name: \"poster\",\n            value: formData.poster,\n            onChange: handleChange,\n            error: !!errors.poster,\n            helperText: errors.poster,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Year of Release\",\n            name: \"yearOfRelease\",\n            type: \"number\",\n            value: formData.yearOfRelease,\n            onChange: handleChange,\n            error: !!errors.yearOfRelease,\n            helperText: errors.yearOfRelease,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            error: !!errors.producer,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Producer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              name: \"producer\",\n              value: formData.producer,\n              onChange: handleChange,\n              label: \"Producer\",\n              children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: producer._id,\n                children: producer.name\n              }, producer._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 923,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 15\n            }, this), errors.producer && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: errors.producer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 928,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 914,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            error: !!errors.actors,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Actors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 932,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              multiple: true,\n              name: \"actors\",\n              value: formData.actors,\n              onChange: handleActorsChange,\n              label: \"Actors\",\n              children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: actor._id,\n                children: actor.name\n              }, actor._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 941,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 933,\n              columnNumber: 15\n            }, this), errors.actors && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: errors.actors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            disabled: submitting,\n            sx: {\n              mt: 2\n            },\n            children: submitting ? \"Updating...\" : \"Update Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: snackbar.severity,\n        sx: {\n          width: '100%'\n        },\n        children: snackbar.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 967,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EditMovies, \"I241mcm/9mPEV39fSaZMPOuHssY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditMovies;\nexport default EditMovies;\nvar _c;\n$RefreshReg$(_c, \"EditMovies\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","CircularProgress","Box","Card","CardContent","CardHeader","Button","TextField","FormControl","InputLabel","MenuItem","Select","FormHelperText","Snackbar","Alert","apiService","jsxDEV","_jsxDEV","Fragment","_Fragment","EditMovies","_s","id","navigate","loading","setLoading","movie","setMovie","producers","setProducers","actors","setActors","formData","setFormData","name","desc","director","poster","yearOfRelease","producer","submitting","setSubmitting","errors","setErrors","snackbar","setSnackbar","open","message","severity","fetchInitialData","movieData","producersData","actorsData","Promise","all","getMovie","getProducers","getActors","error","validateForm","newErrors","length","Object","keys","handleChange","e","value","target","prev","handleActorsChange","event","handleCloseSnackbar","onSubmit","preventDefault","updateMovie","setTimeout","sx","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","margin","padding","title","style","flexDirection","gap","label","onChange","helperText","fullWidth","multiline","rows","type","map","_id","multiple","actor","variant","disabled","mt","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","width","_c","$RefreshReg$"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js"],"sourcesContent":["// // // import React, { useEffect, useState } from \"react\";\n// // // import Button from \"@mui/material/Button\";\n// // // import TextField from \"@mui/material/TextField\";\n// // // import { useNavigate, useParams } from \"react-router-dom\";\n// // // import CircularProgress from \"@mui/material/CircularProgress\";\n// // // import Box from \"@mui/material/Box\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// // // import apiService from \"./services/api.service\"; // Import apiService\n\n// // // function EditMovies() {\n// // //   const { id } = useParams();\n// // //   const [movie, setMovie] = useState(null);\n\n// // //   useEffect(() => {\n// // //     getMovie();\n// // //   }, []);\n\n// // //   const getMovie = async () => {\n// // //     const moviesData = await apiService.getMovie(id); // Use apiService\n// // //     setMovie(moviesData);\n// // //   };\n\n// // //   return (\n// // //     <>\n// // //       {movie ? (\n// // //         <EditFunction movie={movie} />\n// // //       ) : (\n// // //         <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n// // //           <CircularProgress />\n// // //         </Box>\n// // //       )}\n// // //     </>\n// // //   );\n// // // }\n\n// // // const EditFunction = ({ movie }) => {\n// // //   const navigate = useNavigate();\n// // //   const [actors, setActors] = useState([]);\n// // //   const [producer, setProducer] = useState(\"\");\n// // //   const [producerArr, setProducerArr] = useState([]);\n// // //   const [actorNames, setActorNames] = useState([]);\n\n// // //   useEffect(() => {\n// // //     getData();\n// // //   }, []);\n\n// // //   const getData = async () => {\n// // //     const producers = await apiService.getProducers(); // Use apiService\n// // //     const actors = await apiService.getActors(); // Use apiService\n// // //     setProducerArr(producers);\n// // //     setActorNames(actors);\n// // //   };\n\n// // //   const handleProducerChange = (e) => {\n// // //     const { value } = e.target;\n// // //     setProducer(value);\n// // //   };\n\n// // //   const handleChange = (e) => {\n// // //     const { value } = e.target;\n// // //     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n// // //   };\n\n// // //   const movieValidationSchema = yup.object({\n// // //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// // //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// // //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// // //     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n// // //     yearOfRelease: yup\n// // //       .number()\n// // //       .required(\"*Year of release field is mandatory\")\n// // //       .min(5),\n// // //   });\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: movie.name,\n// // //       desc: movie.desc,\n// // //       director: movie.director,\n// // //       poster: movie.poster,\n// // //       yearOfRelease: movie.yearOfRelease,\n// // //     },\n// // //     validationSchema: movieValidationSchema,\n// // //     onSubmit: async (newMovie) => {\n// // //       await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n// // //       navigate(\"/\");\n// // //     },\n// // //   });\n\n// // //   return (\n// // //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // //       <TextField\n// // //         label=\"Enter the name\"\n// // //         variant=\"outlined\"\n// // //         id=\"name\"\n// // //         name=\"name\"\n// // //         value={formik.values.name}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.name && formik.errors.name}\n// // //         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the movie Description\"\n// // //         variant=\"outlined\"\n// // //         id=\"desc\"\n// // //         name=\"desc\"\n// // //         value={formik.values.desc}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.desc && formik.errors.desc}\n// // //         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the poster link\"\n// // //         variant=\"outlined\"\n// // //         id=\"poster\"\n// // //         name=\"poster\"\n// // //         value={formik.values.poster}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.poster && formik.errors.poster}\n// // //         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the director name\"\n// // //         variant=\"outlined\"\n// // //         id=\"director\"\n// // //         name=\"director\"\n// // //         value={formik.values.director}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.director && formik.errors.director}\n// // //         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n// // //       />\n// // //       <TextField\n// // //         label=\"Enter the year of release\"\n// // //         variant=\"outlined\"\n// // //         id=\"yearOfRelease\"\n// // //         name=\"yearOfRelease\"\n// // //         value={formik.values.yearOfRelease}\n// // //         onChange={formik.handleChange}\n// // //         onBlur={formik.handleBlur}\n// // //         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //         helperText={\n// // //           formik.touched.yearOfRelease && formik.errors.yearOfRelease\n// // //             ? formik.errors.yearOfRelease\n// // //             : \"\"\n// // //         }\n// // //       />\n// // //       <FormControl fullWidth>\n// // //         <InputLabel id=\"producer\">Producer Name</InputLabel>\n// // //         <Select\n// // //           labelId=\"producer\"\n// // //           id=\"producer\"\n// // //           value={producer}\n// // //           label=\"producer\"\n// // //           onChange={handleProducerChange}\n// // //         >\n// // //           {producerArr.map((prodName) => (\n// // //             <MenuItem key={prodName._id} value={prodName._id}>\n// // //               {prodName.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n// // //       <FormControl fullWidth>\n// // //         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// // //         <Select\n// // //           labelId=\"actor\"\n// // //           id=\"actor\"\n// // //           multiple\n// // //           value={actors}\n// // //           onChange={handleChange}\n// // //         >\n// // //           {actorNames.map((actor) => (\n// // //             <MenuItem key={actor._id} value={actor._id}>\n// // //               {actor.name}\n// // //             </MenuItem>\n// // //           ))}\n// // //         </Select>\n// // //       </FormControl>\n// // //       <Button variant=\"contained\" type=\"submit\">\n// // //         Update Movie\n// // //       </Button>\n// // //     </form>\n// // //   );\n// // // };\n\n// // // export default EditMovies;\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate, useParams } from \"react-router-dom\";\n// // import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// // import { Button } from \"@/components/ui/button\";\n// // import { Input } from \"@/components/ui/input\";\n// // import { Label } from \"@/components/ui/label\";\n// // import {\n// //   Select,\n// //   SelectContent,\n// //   SelectItem,\n// //   SelectTrigger,\n// //   SelectValue,\n// // } from \"@/components/ui/select\";\n// // import {\n// //   Form,\n// //   FormControl,\n// //   FormField,\n// //   FormItem,\n// //   FormLabel,\n// //   FormMessage,\n// // } from \"@/components/ui/form\";\n// // import { Loader2 } from \"lucide-react\";\n// // import { zodResolver } from \"@hookform/resolve\";\n// // import { useForm } from \"react-hook-form\";\n// // import * as z from \"zod\";\n// // import apiService from \"./services/api.service\";\n// // // import apiService from \"./services/api.service\"; // Import apiService\n// // // import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\n// // const movieSchema = z.object({\n// //   name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n// //   desc: z.string().min(1, { message: \"Description is required\" }),\n// //   director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n// //   poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n// //   yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n// //   producer: z.string().min(1, { message: \"Producer is required\" }),\n// //   actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n// // });\n\n// // function EditMovies() {\n// //   const { id } = useParams();\n// //   const [loading, setLoading] = useState(true);\n// //   const [movie, setMovie] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     fetchMovie();\n// //   }, [id]);\n\n// //   const fetchMovie = async () => {\n// //     try {\n// //       const response = await apiService.get(`/movies/${id}`);\n// //       setMovie(response);\n// //       setLoading(false);\n// //     } catch (err) {\n// //       setError(\"Failed to fetch movie details\");\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <div className=\"flex justify-center items-center h-64\">\n// //         <Loader2 className=\"h-8 w-8 animate-spin\" />\n// //       </div>\n// //     );\n// //   }\n\n// //   if (error) {\n// //     return <div className=\"text-red-500 text-center\">{error}</div>;\n// //   }\n\n// //   return movie ? <EditMovieForm movie={movie} /> : null;\n// // }\n\n// // function EditMovieForm({ movie }) {\n// //   const navigate = useNavigate();\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [submitting, setSubmitting] = useState(false);\n\n// //   const form = useForm({\n// //     resolver: zodResolver(movieSchema),\n// //     defaultValues: {\n// //       name: movie.name,\n// //       desc: movie.desc,\n// //       director: movie.director,\n// //       poster: movie.poster,\n// //       yearOfRelease: movie.yearOfRelease,\n// //       producer: movie.producer,\n// //       actors: movie.actors\n// //     }\n// //   });\n\n// //   useEffect(() => {\n// //     fetchData();\n// //   }, []);\n\n// //   const fetchData = async () => {\n// //     try {\n// //       const [producersData, actorsData] = await Promise.all([\n// //         apiService.get('/producers'),\n// //         apiService.get('/actors')\n// //       ]);\n// //       setProducers(producersData);\n// //       setActors(actorsData);\n// //     } catch (error) {\n// //       console.error('Failed to fetch data:', error);\n// //     }\n// //   };\n\n// //   const onSubmit = async (data) => {\n// //     try {\n// //       setSubmitting(true);\n// //       await apiService.post(`/movies/${movie._id}`, data);\n// //       navigate('/');\n// //     } catch (error) {\n// //       console.error('Failed to update movie:', error);\n// //     } finally {\n// //       setSubmitting(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n// //       <CardHeader>\n// //         <CardTitle>Edit Movie</CardTitle>\n// //       </CardHeader>\n// //       <CardContent>\n// //         <Form {...form}>\n// //           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n// //             <FormField\n// //               control={form.control}\n// //               name=\"name\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Movie Name</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"desc\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Description</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"director\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Director</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"poster\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Poster URL</FormLabel>\n// //                   <FormControl>\n// //                     <Input {...field} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"yearOfRelease\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Year of Release</FormLabel>\n// //                   <FormControl>\n// //                     <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n// //                   </FormControl>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"producer\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Producer</FormLabel>\n// //                   <Select onValueChange={field.onChange} defaultValue={field.value}>\n// //                     <FormControl>\n// //                       <SelectTrigger>\n// //                         <SelectValue placeholder=\"Select a producer\" />\n// //                       </SelectTrigger>\n// //                     </FormControl>\n// //                     <SelectContent>\n// //                       {producers.map((producer) => (\n// //                         <SelectItem key={producer._id} value={producer._id}>\n// //                           {producer.name}\n// //                         </SelectItem>\n// //                       ))}\n// //                     </SelectContent>\n// //                   </Select>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <FormField\n// //               control={form.control}\n// //               name=\"actors\"\n// //               render={({ field }) => (\n// //                 <FormItem>\n// //                   <FormLabel>Actors</FormLabel>\n// //                   <Select\n// //                     onValueChange={(value) => field.onChange([...field.value, value])}\n// //                     value={field.value}\n// //                     multiple\n// //                   >\n// //                     <FormControl>\n// //                       <SelectTrigger>\n// //                         <SelectValue placeholder=\"Select actors\" />\n// //                       </SelectTrigger>\n// //                     </FormControl>\n// //                     <SelectContent>\n// //                       {actors.map((actor) => (\n// //                         <SelectItem key={actor._id} value={actor._id}>\n// //                           {actor.name}\n// //                         </SelectItem>\n// //                       ))}\n// //                     </SelectContent>\n// //                   </Select>\n// //                   <FormMessage />\n// //                 </FormItem>\n// //               )}\n// //             />\n\n// //             <Button type=\"submit\" disabled={submitting}>\n// //               {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n// //               Update Movie\n// //             </Button>\n// //           </form>\n// //         </Form>\n// //       </CardContent>\n// //     </Card>\n// //   );\n// // }\n\n// // export default EditMovies;\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import Card from \"@mui/material/Card\";\n// import CardContent from \"@mui/material/CardContent\";\n// import CardHeader from \"@mui/material/CardHeader\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// import apiService from \"./services/api.service\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const [loading, setLoading] = useState(true);\n//   const [movie, setMovie] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetchMovie();\n//   }, []);\n\n//   const fetchMovie = async () => {\n//     try {\n//       const response = await apiService.get(`/movies/${id}`);\n//       setMovie(response);\n//       setLoading(false);\n//     } catch (err) {\n//       setError(\"Failed to fetch movie details\");\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   if (error) {\n//     return <Box sx={{ color: \"error.main\", textAlign: \"center\" }}>{error}</Box>;\n//   }\n\n//   return movie ? <EditMovieForm movie={movie} /> : null;\n// }\n\n// function EditMovieForm({ movie }) {\n//   const navigate = useNavigate();\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [formData, setFormData] = useState({\n//     name: movie.name,\n//     desc: movie.desc,\n//     director: movie.director,\n//     poster: movie.poster,\n//     yearOfRelease: movie.yearOfRelease,\n//     producer: movie.producer || \"\",\n//     actors: movie.actors || []\n//   });\n//   const [submitting, setSubmitting] = useState(false);\n//   const [errors, setErrors] = useState({});\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [producersData, actorsData] = await Promise.all([\n//         apiService.get('/producers'),\n//         apiService.get('/actors')\n//       ]);\n//       setProducers(producersData);\n//       setActors(actorsData);\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     if (!formData.name || formData.name.length < 3) {\n//       newErrors.name = \"Name must be at least 3 characters\";\n//     }\n//     if (!formData.desc) {\n//       newErrors.desc = \"Description is required\";\n//     }\n//     if (!formData.director || formData.director.length < 5) {\n//       newErrors.director = \"Director name must be at least 5 characters\";\n//     }\n//     if (!formData.poster || formData.poster.length < 5) {\n//       newErrors.poster = \"Poster URL must be at least 5 characters\";\n//     }\n//     if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n//       newErrors.yearOfRelease = \"Invalid year\";\n//     }\n//     if (!formData.producer) {\n//       newErrors.producer = \"Producer is required\";\n//     }\n//     if (!formData.actors || formData.actors.length === 0) {\n//       newErrors.actors = \"At least one actor must be selected\";\n//     }\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleActorsChange = (event) => {\n//     setFormData(prev => ({\n//       ...prev,\n//       actors: event.target.value\n//     }));\n//   };\n\n//   const onSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n\n//     try {\n//       setSubmitting(true);\n//       await apiService.post(`/movies/${movie._id}`, formData);\n//       navigate('/');\n//     } catch (error) {\n//       console.error('Failed to update movie:', error);\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n//       <CardHeader title=\"Edit Movie\" />\n//       <CardContent>\n//         <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n//           <TextField\n//             label=\"Movie Name\"\n//             name=\"name\"\n//             value={formData.name}\n//             onChange={handleChange}\n//             error={!!errors.name}\n//             helperText={errors.name}\n//             fullWidth\n//           />\n\n//           <TextField\n//             label=\"Description\"\n//             name=\"desc\"\n//             value={formData.desc}\n//             onChange={handleChange}\n//             error={!!errors.desc}\n//             helperText={errors.desc}\n//             fullWidth\n//             multiline\n//             rows={3}\n//           />\n\n//           <TextField\n//             label=\"Director\"\n//             name=\"director\"\n//             value={formData.director}\n//             onChange={handleChange}\n//             error={!!errors.director}\n//             helperText={errors.director}\n//             fullWidth\n//           />\n\n//           <TextField\n//             label=\"Poster URL\"\n//             name=\"poster\"\n//             value={formData.poster}\n//             onChange={handleChange}\n//             error={!!errors.poster}\n//             helperText={errors.poster}\n//             fullWidth\n//           />\n\n//           <TextField\n//             label=\"Year of Release\"\n//             name=\"yearOfRelease\"\n//             type=\"number\"\n//             value={formData.yearOfRelease}\n//             onChange={handleChange}\n//             error={!!errors.yearOfRelease}\n//             helperText={errors.yearOfRelease}\n//             fullWidth\n//           />\n\n//           <FormControl fullWidth error={!!errors.producer}>\n//             <InputLabel>Producer</InputLabel>\n//             <Select\n//               name=\"producer\"\n//               value={formData.producer}\n//               onChange={handleChange}\n//               label=\"Producer\"\n//             >\n//               {producers.map((producer) => (\n//                 <MenuItem key={producer._id} value={producer._id}>\n//                   {producer.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n\n//           <FormControl fullWidth error={!!errors.actors}>\n//             <InputLabel>Actors</InputLabel>\n//             <Select\n//               multiple\n//               name=\"actors\"\n//               value={formData.actors}\n//               onChange={handleActorsChange}\n//               label=\"Actors\"\n//             >\n//               {actors.map((actor) => (\n//                 <MenuItem key={actor._id} value={actor._id}>\n//                   {actor.name}\n//                 </MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n\n//           <Button \n//             type=\"submit\" \n//             variant=\"contained\" \n//             disabled={submitting}\n//             sx={{ mt: 2 }}\n//           >\n//             {submitting ? \"Updating...\" : \"Update Movie\"}\n//           </Button>\n//         </form>\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default EditMovies;\n// EditMovies.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { FormControl, InputLabel, MenuItem, Select, FormHelperText } from \"@mui/material\";\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport apiService from \"./services/api.service\";\n\nfunction EditMovies() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState(null);\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    desc: '',\n    director: '',\n    poster: '',\n    yearOfRelease: '',\n    producer: '',\n    actors: []\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success'\n  });\n\n  useEffect(() => {\n    fetchInitialData();\n  }, [id]);\n\n  const fetchInitialData = async () => {\n    try {\n      const [movieData, producersData, actorsData] = await Promise.all([\n        apiService.getMovie(id),\n        apiService.getProducers(),\n        apiService.getActors()\n      ]);\n\n      setMovie(movieData);\n      setProducers(producersData);\n      setActors(actorsData);\n      setFormData({\n        name: movieData.name || '',\n        desc: movieData.desc || '',\n        director: movieData.director || '',\n        poster: movieData.poster || '',\n        yearOfRelease: movieData.yearOfRelease || '',\n        producer: movieData.producer || '',\n        actors: movieData.actors || []\n      });\n    } catch (error) {\n      setSnackbar({\n        open: true,\n        message: error.message || 'Failed to load data',\n        severity: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.name || formData.name.length < 3) {\n      newErrors.name = \"Name must be at least 3 characters\";\n    }\n    if (!formData.desc) {\n      newErrors.desc = \"Description is required\";\n    }\n    if (!formData.director || formData.director.length < 5) {\n      newErrors.director = \"Director name must be at least 5 characters\";\n    }\n    if (!formData.poster || formData.poster.length < 5) {\n      newErrors.poster = \"Poster URL must be at least 5 characters\";\n    }\n    if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n      newErrors.yearOfRelease = \"Invalid year\";\n    }\n    if (!formData.producer) {\n      newErrors.producer = \"Producer is required\";\n    }\n    if (!formData.actors || formData.actors.length === 0) {\n      newErrors.actors = \"At least one actor must be selected\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleActorsChange = (event) => {\n    setFormData(prev => ({\n      ...prev,\n      actors: event.target.value\n    }));\n  };\n\n  const handleCloseSnackbar = () => {\n    setSnackbar(prev => ({ ...prev, open: false }));\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    try {\n      setSubmitting(true);\n      await apiService.updateMovie(id, formData);\n      setSnackbar({\n        open: true,\n        message: 'Movie updated successfully!',\n        severity: 'success'\n      });\n      setTimeout(() => navigate('/'), 1500);\n    } catch (error) {\n      setSnackbar({\n        open: true,\n        message: error.message || 'Failed to update movie',\n        severity: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n        <CardHeader title=\"Edit Movie\" />\n        <CardContent>\n          <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n            <TextField\n              label=\"Movie Name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              error={!!errors.name}\n              helperText={errors.name}\n              fullWidth\n            />\n\n            <TextField\n              label=\"Description\"\n              name=\"desc\"\n              value={formData.desc}\n              onChange={handleChange}\n              error={!!errors.desc}\n              helperText={errors.desc}\n              fullWidth\n              multiline\n              rows={3}\n            />\n\n            <TextField\n              label=\"Director\"\n              name=\"director\"\n              value={formData.director}\n              onChange={handleChange}\n              error={!!errors.director}\n              helperText={errors.director}\n              fullWidth\n            />\n\n            <TextField\n              label=\"Poster URL\"\n              name=\"poster\"\n              value={formData.poster}\n              onChange={handleChange}\n              error={!!errors.poster}\n              helperText={errors.poster}\n              fullWidth\n            />\n\n            <TextField\n              label=\"Year of Release\"\n              name=\"yearOfRelease\"\n              type=\"number\"\n              value={formData.yearOfRelease}\n              onChange={handleChange}\n              error={!!errors.yearOfRelease}\n              helperText={errors.yearOfRelease}\n              fullWidth\n            />\n\n            <FormControl fullWidth error={!!errors.producer}>\n              <InputLabel>Producer</InputLabel>\n              <Select\n                name=\"producer\"\n                value={formData.producer}\n                onChange={handleChange}\n                label=\"Producer\"\n              >\n                {producers.map((producer) => (\n                  <MenuItem key={producer._id} value={producer._id}>\n                    {producer.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              {errors.producer && <FormHelperText>{errors.producer}</FormHelperText>}\n            </FormControl>\n\n            <FormControl fullWidth error={!!errors.actors}>\n              <InputLabel>Actors</InputLabel>\n              <Select\n                multiple\n                name=\"actors\"\n                value={formData.actors}\n                onChange={handleActorsChange}\n                label=\"Actors\"\n              >\n                {actors.map((actor) => (\n                  <MenuItem key={actor._id} value={actor._id}>\n                    {actor.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              {errors.actors && <FormHelperText>{errors.actors}</FormHelperText>}\n            </FormControl>\n\n            <Button \n              type=\"submit\" \n              variant=\"contained\" \n              disabled={submitting}\n              sx={{ mt: 2 }}\n            >\n              {submitting ? \"Updating...\" : \"Update Movie\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      <Snackbar \n        open={snackbar.open} \n        autoHideDuration={6000} \n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n}\n\nexport default EditMovies;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}