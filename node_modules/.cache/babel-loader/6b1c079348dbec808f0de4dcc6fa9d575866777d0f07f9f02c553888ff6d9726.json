{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// import apiService from \"./services/api.service\"; // Import apiService\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     getMovie();\n//   }, []);\n\n//   const getMovie = async () => {\n//     const moviesData = await apiService.getMovie(id); // Use apiService\n//     setMovie(moviesData);\n//   };\n\n//   return (\n//     <>\n//       {movie ? (\n//         <EditFunction movie={movie} />\n//       ) : (\n//         <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n//           <CircularProgress />\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// const EditFunction = ({ movie }) => {\n//   const navigate = useNavigate();\n//   const [actors, setActors] = useState([]);\n//   const [producer, setProducer] = useState(\"\");\n//   const [producerArr, setProducerArr] = useState([]);\n//   const [actorNames, setActorNames] = useState([]);\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     const producers = await apiService.getProducers(); // Use apiService\n//     const actors = await apiService.getActors(); // Use apiService\n//     setProducerArr(producers);\n//     setActorNames(actors);\n//   };\n\n//   const handleProducerChange = (e) => {\n//     const { value } = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n//   };\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (newMovie) => {\n//       await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n//       navigate(\"/\");\n//     },\n//   });\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//       <TextField\n//         label=\"Enter the name\"\n//         variant=\"outlined\"\n//         id=\"name\"\n//         name=\"name\"\n//         value={formik.values.name}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.name && formik.errors.name}\n//         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the movie Description\"\n//         variant=\"outlined\"\n//         id=\"desc\"\n//         name=\"desc\"\n//         value={formik.values.desc}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.desc && formik.errors.desc}\n//         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the poster link\"\n//         variant=\"outlined\"\n//         id=\"poster\"\n//         name=\"poster\"\n//         value={formik.values.poster}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.poster && formik.errors.poster}\n//         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the director name\"\n//         variant=\"outlined\"\n//         id=\"director\"\n//         name=\"director\"\n//         value={formik.values.director}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.director && formik.errors.director}\n//         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the year of release\"\n//         variant=\"outlined\"\n//         id=\"yearOfRelease\"\n//         name=\"yearOfRelease\"\n//         value={formik.values.yearOfRelease}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//         helperText={\n//           formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//             ? formik.errors.yearOfRelease\n//             : \"\"\n//         }\n//       />\n//       <FormControl fullWidth>\n//         <InputLabel id=\"producer\">Producer Name</InputLabel>\n//         <Select\n//           labelId=\"producer\"\n//           id=\"producer\"\n//           value={producer}\n//           label=\"producer\"\n//           onChange={handleProducerChange}\n//         >\n//           {producerArr.map((prodName) => (\n//             <MenuItem key={prodName._id} value={prodName._id}>\n//               {prodName.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl fullWidth>\n//         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//         <Select\n//           labelId=\"actor\"\n//           id=\"actor\"\n//           multiple\n//           value={actors}\n//           onChange={handleChange}\n//         >\n//           {actorNames.map((actor) => (\n//             <MenuItem key={actor._id} value={actor._id}>\n//               {actor.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <Button variant=\"contained\" type=\"submit\">\n//         Update Movie\n//       </Button>\n//     </form>\n//   );\n// };\n\n// export default EditMovies;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Loader2 } from \"lucide-react\";\nimport { zodResolver } from \"@hookform/resolve\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport apiService from \"./services/api.service\";\n// import apiService from \"./services/api.service\"; // Import apiService\n// import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst movieSchema = z.object({\n  name: z.string().min(3, {\n    message: \"Name must be at least 3 characters\"\n  }),\n  desc: z.string().min(1, {\n    message: \"Description is required\"\n  }),\n  director: z.string().min(5, {\n    message: \"Director name must be at least 5 characters\"\n  }),\n  poster: z.string().min(5, {\n    message: \"Poster URL must be at least 5 characters\"\n  }),\n  yearOfRelease: z.number().min(1900, {\n    message: \"Invalid year\"\n  }),\n  producer: z.string().min(1, {\n    message: \"Producer is required\"\n  }),\n  actors: z.array(z.string()).min(1, {\n    message: \"At least one actor must be selected\"\n  })\n});\nfunction EditMovies() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMovie();\n  }, [id]);\n  const fetchMovie = async () => {\n    try {\n      const response = await apiService.get(`/movies/${id}`);\n      setMovie(response);\n      setLoading(false);\n    } catch (err) {\n      setError(\"Failed to fetch movie details\");\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-64\",\n      children: /*#__PURE__*/_jsxDEV(Loader2, {\n        className: \"h-8 w-8 animate-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500 text-center\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 12\n    }, this);\n  }\n  return movie ? /*#__PURE__*/_jsxDEV(EditMovieForm, {\n    movie: movie\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 18\n  }, this) : null;\n}\n_s(EditMovies, \"DqEGB/FfHLNyOINua3CQQpdYJX8=\", false, function () {\n  return [useParams];\n});\n_c = EditMovies;\nfunction EditMovieForm({\n  movie\n}) {\n  _s2();\n  const navigate = useNavigate();\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const form = useForm({\n    resolver: zodResolver(movieSchema),\n    defaultValues: {\n      name: movie.name,\n      desc: movie.desc,\n      director: movie.director,\n      poster: movie.poster,\n      yearOfRelease: movie.yearOfRelease,\n      producer: movie.producer,\n      actors: movie.actors\n    }\n  });\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const [producersData, actorsData] = await Promise.all([apiService.get('/producers'), apiService.get('/actors')]);\n      setProducers(producersData);\n      setActors(actorsData);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n    }\n  };\n  const onSubmit = async data => {\n    try {\n      setSubmitting(true);\n      await apiService.post(`/movies/${movie._id}`, data);\n      navigate('/');\n    } catch (error) {\n      console.error('Failed to update movie:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"w-full max-w-2xl mx-auto mt-6\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CardTitle, {\n        children: \"Edit Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        ...form,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: form.handleSubmit(onSubmit),\n          className: \"space-y-6\",\n          children: [/*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"name\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Movie Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  ...field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"desc\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  ...field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"director\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Director\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  ...field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"poster\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Poster URL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  ...field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"yearOfRelease\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Year of Release\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"number\",\n                  ...field,\n                  onChange: e => field.onChange(parseInt(e.target.value))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"producer\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Producer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                onValueChange: field.onChange,\n                defaultValue: field.value,\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  children: /*#__PURE__*/_jsxDEV(SelectTrigger, {\n                    children: /*#__PURE__*/_jsxDEV(SelectValue, {\n                      placeholder: \"Select a producer\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 402,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n                  children: producers.map(producer => /*#__PURE__*/_jsxDEV(SelectItem, {\n                    value: producer._id,\n                    children: producer.name\n                  }, producer._id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 407,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormField, {\n            control: form.control,\n            name: \"actors\",\n            render: ({\n              field\n            }) => /*#__PURE__*/_jsxDEV(FormItem, {\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Actors\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                onValueChange: value => field.onChange([...field.value, value]),\n                value: field.value,\n                multiple: true,\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  children: /*#__PURE__*/_jsxDEV(SelectTrigger, {\n                    children: /*#__PURE__*/_jsxDEV(SelectValue, {\n                      placeholder: \"Select actors\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 431,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 430,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n                  children: actors.map(actor => /*#__PURE__*/_jsxDEV(SelectItem, {\n                    value: actor._id,\n                    children: actor.name\n                  }, actor._id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 436,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: submitting,\n            children: [submitting && /*#__PURE__*/_jsxDEV(Loader2, {\n              className: \"mr-2 h-4 w-4 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 30\n            }, this), \"Update Movie\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n}\n_s2(EditMovieForm, \"zf8qewlBtf4315Nb/+lZjUnF1tA=\", false, function () {\n  return [useNavigate, useForm];\n});\n_c2 = EditMovieForm;\nexport default EditMovies;\nvar _c, _c2;\n$RefreshReg$(_c, \"EditMovies\");\n$RefreshReg$(_c2, \"EditMovieForm\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","Card","CardContent","CardHeader","CardTitle","Button","Input","Label","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","Form","FormControl","FormField","FormItem","FormLabel","FormMessage","Loader2","zodResolver","useForm","z","apiService","jsxDEV","_jsxDEV","movieSchema","object","name","string","min","message","desc","director","poster","yearOfRelease","number","producer","actors","array","EditMovies","_s","id","loading","setLoading","movie","setMovie","error","setError","fetchMovie","response","get","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","EditMovieForm","_c","_s2","navigate","producers","setProducers","setActors","submitting","setSubmitting","form","resolver","defaultValues","fetchData","producersData","actorsData","Promise","all","console","onSubmit","data","post","_id","handleSubmit","control","render","field","type","onChange","e","parseInt","target","value","onValueChange","defaultValue","placeholder","map","multiple","actor","disabled","_c2","$RefreshReg$"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// import apiService from \"./services/api.service\"; // Import apiService\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     getMovie();\n//   }, []);\n\n//   const getMovie = async () => {\n//     const moviesData = await apiService.getMovie(id); // Use apiService\n//     setMovie(moviesData);\n//   };\n\n//   return (\n//     <>\n//       {movie ? (\n//         <EditFunction movie={movie} />\n//       ) : (\n//         <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n//           <CircularProgress />\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// const EditFunction = ({ movie }) => {\n//   const navigate = useNavigate();\n//   const [actors, setActors] = useState([]);\n//   const [producer, setProducer] = useState(\"\");\n//   const [producerArr, setProducerArr] = useState([]);\n//   const [actorNames, setActorNames] = useState([]);\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     const producers = await apiService.getProducers(); // Use apiService\n//     const actors = await apiService.getActors(); // Use apiService\n//     setProducerArr(producers);\n//     setActorNames(actors);\n//   };\n\n//   const handleProducerChange = (e) => {\n//     const { value } = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n//   };\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (newMovie) => {\n//       await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n//       navigate(\"/\");\n//     },\n//   });\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//       <TextField\n//         label=\"Enter the name\"\n//         variant=\"outlined\"\n//         id=\"name\"\n//         name=\"name\"\n//         value={formik.values.name}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.name && formik.errors.name}\n//         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the movie Description\"\n//         variant=\"outlined\"\n//         id=\"desc\"\n//         name=\"desc\"\n//         value={formik.values.desc}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.desc && formik.errors.desc}\n//         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the poster link\"\n//         variant=\"outlined\"\n//         id=\"poster\"\n//         name=\"poster\"\n//         value={formik.values.poster}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.poster && formik.errors.poster}\n//         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the director name\"\n//         variant=\"outlined\"\n//         id=\"director\"\n//         name=\"director\"\n//         value={formik.values.director}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.director && formik.errors.director}\n//         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n//       />\n//       <TextField\n//         label=\"Enter the year of release\"\n//         variant=\"outlined\"\n//         id=\"yearOfRelease\"\n//         name=\"yearOfRelease\"\n//         value={formik.values.yearOfRelease}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//         helperText={\n//           formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//             ? formik.errors.yearOfRelease\n//             : \"\"\n//         }\n//       />\n//       <FormControl fullWidth>\n//         <InputLabel id=\"producer\">Producer Name</InputLabel>\n//         <Select\n//           labelId=\"producer\"\n//           id=\"producer\"\n//           value={producer}\n//           label=\"producer\"\n//           onChange={handleProducerChange}\n//         >\n//           {producerArr.map((prodName) => (\n//             <MenuItem key={prodName._id} value={prodName._id}>\n//               {prodName.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl fullWidth>\n//         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//         <Select\n//           labelId=\"actor\"\n//           id=\"actor\"\n//           multiple\n//           value={actors}\n//           onChange={handleChange}\n//         >\n//           {actorNames.map((actor) => (\n//             <MenuItem key={actor._id} value={actor._id}>\n//               {actor.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <Button variant=\"contained\" type=\"submit\">\n//         Update Movie\n//       </Button>\n//     </form>\n//   );\n// };\n\n// export default EditMovies;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Loader2 } from \"lucide-react\";\nimport { zodResolver } from \"@hookform/resolve\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport apiService from \"./services/api.service\";\n// import apiService from \"./services/api.service\"; // Import apiService\n// import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\nconst movieSchema = z.object({\n  name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n  desc: z.string().min(1, { message: \"Description is required\" }),\n  director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n  poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n  yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n  producer: z.string().min(1, { message: \"Producer is required\" }),\n  actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n});\n\nfunction EditMovies() {\n  const { id } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchMovie();\n  }, [id]);\n\n  const fetchMovie = async () => {\n    try {\n      const response = await apiService.get(`/movies/${id}`);\n      setMovie(response);\n      setLoading(false);\n    } catch (err) {\n      setError(\"Failed to fetch movie details\");\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-500 text-center\">{error}</div>;\n  }\n\n  return movie ? <EditMovieForm movie={movie} /> : null;\n}\n\nfunction EditMovieForm({ movie }) {\n  const navigate = useNavigate();\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(movieSchema),\n    defaultValues: {\n      name: movie.name,\n      desc: movie.desc,\n      director: movie.director,\n      poster: movie.poster,\n      yearOfRelease: movie.yearOfRelease,\n      producer: movie.producer,\n      actors: movie.actors\n    }\n  });\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const [producersData, actorsData] = await Promise.all([\n        apiService.get('/producers'),\n        apiService.get('/actors')\n      ]);\n      setProducers(producersData);\n      setActors(actorsData);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n    }\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      await apiService.post(`/movies/${movie._id}`, data);\n      navigate('/');\n    } catch (error) {\n      console.error('Failed to update movie:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n      <CardHeader>\n        <CardTitle>Edit Movie</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Movie Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"desc\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"director\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Director</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"poster\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Poster URL</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"yearOfRelease\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Year of Release</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"producer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Producer</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a producer\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {producers.map((producer) => (\n                        <SelectItem key={producer._id} value={producer._id}>\n                          {producer.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"actors\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Actors</FormLabel>\n                  <Select\n                    onValueChange={(value) => field.onChange([...field.value, value])}\n                    value={field.value}\n                    multiple\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select actors\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {actors.map((actor) => (\n                        <SelectItem key={actor._id} value={actor._id}>\n                          {actor.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" disabled={submitting}>\n              {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Update Movie\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default EditMovies;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}