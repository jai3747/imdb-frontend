{"ast":null,"code":"// // // // src/services/metrics.service.jsimport axios from 'axios';\n\n// class MetricsService {\n//   constructor() {\n//     this.metrics = {\n//       pageViews: {},\n//       apiCalls: {},\n//       uiInteractions: {},\n//       loadTimes: [],\n//       errors: {}\n//     };\n\n//     this.metricsEndpoint = process.env.REACT_APP_METRICS_ENDPOINT || '/metrics-report';\n//     this.reportingInterval = null;\n\n//     // Initialize performance observer for page load metrics\n//     if (typeof PerformanceObserver !== 'undefined') {\n//       this.initPerformanceObserver();\n//     }\n//   }\n\n//   initPerformanceObserver() {\n//     const observer = new PerformanceObserver((list) => {\n//       for (const entry of list.getEntries()) {\n//         if (entry.entryType === 'navigation') {\n//           this.recordLoadTime(entry.duration);\n//         }\n//       }\n//     });\n\n//     observer.observe({ entryTypes: ['navigation'] });\n//   }\n\n//   startReporting(intervalMs = 30000) {\n//     if (this.reportingInterval) {\n//       clearInterval(this.reportingInterval);\n//     }\n\n//     this.reportingInterval = setInterval(() => {\n//       this.reportMetrics();\n//     }, intervalMs);\n\n//     // Report initial metrics on page load\n//     this.reportMetrics();\n\n//     return this;\n//   }\n\n//   stopReporting() {\n//     if (this.reportingInterval) {\n//       clearInterval(this.reportingInterval);\n//       this.reportingInterval = null;\n//     }\n//     return this;\n//   }\n\n//   // Sanitize strings to avoid issues with Prometheus format\n//   sanitizeString(str) {\n//     return (str || '').replace(/[\"\\n\\r\\\\]/g, '_');\n//   }\n\n//   recordPageView(page) {\n//     const safePage = this.sanitizeString(page);\n//     this.metrics.pageViews[safePage] = (this.metrics.pageViews[safePage] || 0) + 1;\n//     return this;\n//   }\n\n//   recordApiCall(endpoint, status, duration) {\n//     const safeEndpoint = this.sanitizeString(endpoint);\n//     const key = `${safeEndpoint}:${status}`;\n//     this.metrics.apiCalls[key] = this.metrics.apiCalls[key] || { count: 0, totalDuration: 0 };\n//     this.metrics.apiCalls[key].count += 1;\n//     this.metrics.apiCalls[key].totalDuration += duration;\n//     return this;\n//   }\n\n//   recordUiInteraction(component, action) {\n//     const safeComponent = this.sanitizeString(component);\n//     const safeAction = this.sanitizeString(action);\n//     const key = `${safeComponent}:${safeAction}`;\n//     this.metrics.uiInteractions[key] = (this.metrics.uiInteractions[key] || 0) + 1;\n//     return this;\n//   }\n\n//   recordLoadTime(duration) {\n//     this.metrics.loadTimes.push(duration);\n\n//     // Keep only the last 50 measurements\n//     if (this.metrics.loadTimes.length > 50) {\n//       this.metrics.loadTimes.shift();\n//     }\n//     return this;\n//   }\n\n//   recordError(category, message) {\n//     const safeCategory = this.sanitizeString(category);\n//     const safeMessage = this.sanitizeString(message);\n//     const key = `${safeCategory}:${safeMessage}`;\n//     this.metrics.errors[key] = (this.metrics.errors[key] || 0) + 1;\n//     return this;\n//   }\n\n//   getFormattedMetrics() {\n//     let output = '';\n\n//     // Page views metrics\n//     output += '# HELP frontend_page_views Total number of page views\\n';\n//     output += '# TYPE frontend_page_views counter\\n';\n\n//     Object.entries(this.metrics.pageViews).forEach(([page, count]) => {\n//       output += `frontend_page_views{page=\"${page}\"} ${count}\\n`;\n//     });\n\n//     // API calls metrics\n//     output += '# HELP frontend_api_calls Total number of API calls\\n';\n//     output += '# TYPE frontend_api_calls counter\\n';\n\n//     Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n//       const [endpoint, status] = key.split(':');\n//       output += `frontend_api_calls{endpoint=\"${endpoint}\",status=\"${status}\"} ${data.count}\\n`;\n//     });\n\n//     output += '# HELP frontend_api_call_duration_ms Average duration of API calls in ms\\n';\n//     output += '# TYPE frontend_api_call_duration_ms gauge\\n';\n\n//     Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n//       const [endpoint, status] = key.split(':');\n//       if (data.count > 0) {\n//         const avgDuration = data.totalDuration / data.count;\n//         output += `frontend_api_call_duration_ms{endpoint=\"${endpoint}\",status=\"${status}\"} ${avgDuration}\\n`;\n//       }\n//     });\n\n//     // UI interaction metrics\n//     output += '# HELP frontend_ui_interactions Total number of UI interactions\\n';\n//     output += '# TYPE frontend_ui_interactions counter\\n';\n\n//     Object.entries(this.metrics.uiInteractions).forEach(([key, count]) => {\n//       const [component, action] = key.split(':');\n//       output += `frontend_ui_interactions{component=\"${component}\",action=\"${action}\"} ${count}\\n`;\n//     });\n\n//     // Load time metrics\n//     if (this.metrics.loadTimes.length > 0) {\n//       const average = this.metrics.loadTimes.reduce((a, b) => a + b, 0) / this.metrics.loadTimes.length;\n//       output += '# HELP frontend_page_load_time_ms Average page load time in ms\\n';\n//       output += '# TYPE frontend_page_load_time_ms gauge\\n';\n//       output += `frontend_page_load_time_ms ${average}\\n`;\n//     }\n\n//     // Error metrics\n//     output += '# HELP frontend_errors Total number of errors\\n';\n//     output += '# TYPE frontend_errors counter\\n';\n\n//     Object.entries(this.metrics.errors).forEach(([key, count]) => {\n//       const [category, message] = key.split(':');\n//       output += `frontend_errors{category=\"${category}\",message=\"${message}\"} ${count}\\n`;\n//     });\n\n//     return output;\n//   }\n\n//   async reportMetrics() {\n//     try {\n//       const metricsData = this.getFormattedMetrics();\n\n//       // If the endpoint is an absolute URL, send metrics there\n//       if (this.metricsEndpoint.startsWith('http')) {\n//         await axios.post(this.metricsEndpoint, metricsData, {\n//           headers: {\n//             'Content-Type': 'text/plain'\n//           }\n//         });\n//       } else {\n//         // Send metrics to the server endpoint\n//         await axios.post(this.metricsEndpoint, metricsData, {\n//           headers: {\n//             'Content-Type': 'text/plain'\n//           }\n//         });\n\n//         // For development, also log metrics to console\n//         if (process.env.NODE_ENV !== 'production') {\n//           console.log(\"Frontend Metrics:\");\n//           console.log(metricsData);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Failed to report metrics:\", error);\n//     }\n//   }\n// }\n\n// // Create an instance of MetricsService\n// const metricsService = new MetricsService();\n\n// // Export the instance as the default export\n// export default metricsService;","map":{"version":3,"names":[],"sources":["/Users/jayachandran/imdb/imdb-frontend/src/services/metrics.service.js"],"sourcesContent":["// // // // src/services/metrics.service.jsimport axios from 'axios';\n\n// class MetricsService {\n//   constructor() {\n//     this.metrics = {\n//       pageViews: {},\n//       apiCalls: {},\n//       uiInteractions: {},\n//       loadTimes: [],\n//       errors: {}\n//     };\n\n//     this.metricsEndpoint = process.env.REACT_APP_METRICS_ENDPOINT || '/metrics-report';\n//     this.reportingInterval = null;\n\n//     // Initialize performance observer for page load metrics\n//     if (typeof PerformanceObserver !== 'undefined') {\n//       this.initPerformanceObserver();\n//     }\n//   }\n\n//   initPerformanceObserver() {\n//     const observer = new PerformanceObserver((list) => {\n//       for (const entry of list.getEntries()) {\n//         if (entry.entryType === 'navigation') {\n//           this.recordLoadTime(entry.duration);\n//         }\n//       }\n//     });\n\n//     observer.observe({ entryTypes: ['navigation'] });\n//   }\n\n//   startReporting(intervalMs = 30000) {\n//     if (this.reportingInterval) {\n//       clearInterval(this.reportingInterval);\n//     }\n\n//     this.reportingInterval = setInterval(() => {\n//       this.reportMetrics();\n//     }, intervalMs);\n\n//     // Report initial metrics on page load\n//     this.reportMetrics();\n\n//     return this;\n//   }\n\n//   stopReporting() {\n//     if (this.reportingInterval) {\n//       clearInterval(this.reportingInterval);\n//       this.reportingInterval = null;\n//     }\n//     return this;\n//   }\n\n//   // Sanitize strings to avoid issues with Prometheus format\n//   sanitizeString(str) {\n//     return (str || '').replace(/[\"\\n\\r\\\\]/g, '_');\n//   }\n\n//   recordPageView(page) {\n//     const safePage = this.sanitizeString(page);\n//     this.metrics.pageViews[safePage] = (this.metrics.pageViews[safePage] || 0) + 1;\n//     return this;\n//   }\n\n//   recordApiCall(endpoint, status, duration) {\n//     const safeEndpoint = this.sanitizeString(endpoint);\n//     const key = `${safeEndpoint}:${status}`;\n//     this.metrics.apiCalls[key] = this.metrics.apiCalls[key] || { count: 0, totalDuration: 0 };\n//     this.metrics.apiCalls[key].count += 1;\n//     this.metrics.apiCalls[key].totalDuration += duration;\n//     return this;\n//   }\n\n//   recordUiInteraction(component, action) {\n//     const safeComponent = this.sanitizeString(component);\n//     const safeAction = this.sanitizeString(action);\n//     const key = `${safeComponent}:${safeAction}`;\n//     this.metrics.uiInteractions[key] = (this.metrics.uiInteractions[key] || 0) + 1;\n//     return this;\n//   }\n\n//   recordLoadTime(duration) {\n//     this.metrics.loadTimes.push(duration);\n\n//     // Keep only the last 50 measurements\n//     if (this.metrics.loadTimes.length > 50) {\n//       this.metrics.loadTimes.shift();\n//     }\n//     return this;\n//   }\n\n//   recordError(category, message) {\n//     const safeCategory = this.sanitizeString(category);\n//     const safeMessage = this.sanitizeString(message);\n//     const key = `${safeCategory}:${safeMessage}`;\n//     this.metrics.errors[key] = (this.metrics.errors[key] || 0) + 1;\n//     return this;\n//   }\n\n//   getFormattedMetrics() {\n//     let output = '';\n    \n//     // Page views metrics\n//     output += '# HELP frontend_page_views Total number of page views\\n';\n//     output += '# TYPE frontend_page_views counter\\n';\n    \n//     Object.entries(this.metrics.pageViews).forEach(([page, count]) => {\n//       output += `frontend_page_views{page=\"${page}\"} ${count}\\n`;\n//     });\n\n//     // API calls metrics\n//     output += '# HELP frontend_api_calls Total number of API calls\\n';\n//     output += '# TYPE frontend_api_calls counter\\n';\n    \n//     Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n//       const [endpoint, status] = key.split(':');\n//       output += `frontend_api_calls{endpoint=\"${endpoint}\",status=\"${status}\"} ${data.count}\\n`;\n//     });\n\n//     output += '# HELP frontend_api_call_duration_ms Average duration of API calls in ms\\n';\n//     output += '# TYPE frontend_api_call_duration_ms gauge\\n';\n    \n//     Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n//       const [endpoint, status] = key.split(':');\n//       if (data.count > 0) {\n//         const avgDuration = data.totalDuration / data.count;\n//         output += `frontend_api_call_duration_ms{endpoint=\"${endpoint}\",status=\"${status}\"} ${avgDuration}\\n`;\n//       }\n//     });\n\n//     // UI interaction metrics\n//     output += '# HELP frontend_ui_interactions Total number of UI interactions\\n';\n//     output += '# TYPE frontend_ui_interactions counter\\n';\n    \n//     Object.entries(this.metrics.uiInteractions).forEach(([key, count]) => {\n//       const [component, action] = key.split(':');\n//       output += `frontend_ui_interactions{component=\"${component}\",action=\"${action}\"} ${count}\\n`;\n//     });\n\n//     // Load time metrics\n//     if (this.metrics.loadTimes.length > 0) {\n//       const average = this.metrics.loadTimes.reduce((a, b) => a + b, 0) / this.metrics.loadTimes.length;\n//       output += '# HELP frontend_page_load_time_ms Average page load time in ms\\n';\n//       output += '# TYPE frontend_page_load_time_ms gauge\\n';\n//       output += `frontend_page_load_time_ms ${average}\\n`;\n//     }\n\n//     // Error metrics\n//     output += '# HELP frontend_errors Total number of errors\\n';\n//     output += '# TYPE frontend_errors counter\\n';\n    \n//     Object.entries(this.metrics.errors).forEach(([key, count]) => {\n//       const [category, message] = key.split(':');\n//       output += `frontend_errors{category=\"${category}\",message=\"${message}\"} ${count}\\n`;\n//     });\n\n//     return output;\n//   }\n\n//   async reportMetrics() {\n//     try {\n//       const metricsData = this.getFormattedMetrics();\n\n//       // If the endpoint is an absolute URL, send metrics there\n//       if (this.metricsEndpoint.startsWith('http')) {\n//         await axios.post(this.metricsEndpoint, metricsData, {\n//           headers: {\n//             'Content-Type': 'text/plain'\n//           }\n//         });\n//       } else {\n//         // Send metrics to the server endpoint\n//         await axios.post(this.metricsEndpoint, metricsData, {\n//           headers: {\n//             'Content-Type': 'text/plain'\n//           }\n//         });\n        \n//         // For development, also log metrics to console\n//         if (process.env.NODE_ENV !== 'production') {\n//           console.log(\"Frontend Metrics:\");\n//           console.log(metricsData);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Failed to report metrics:\", error);\n//     }\n//   }\n// }\n\n// // Create an instance of MetricsService\n// const metricsService = new MetricsService();\n\n// // Export the instance as the default export\n// export default metricsService;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}