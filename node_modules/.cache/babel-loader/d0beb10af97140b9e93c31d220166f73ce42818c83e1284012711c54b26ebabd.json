{"ast":null,"code":"// import axios from 'axios';\n\n// const API_CONFIG = {\n//   BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n//   TIMEOUT: 10000,\n//   RETRY_DELAY: 1000,\n//   ENDPOINTS: {\n//     HEALTH: '/health',\n//     MOVIES: '/movies',\n//     ACTORS: '/actors',\n//     PRODUCERS: '/producers'\n//   }\n// };\n\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// });\n\n// const apiService = {\n//   getMovies: async () => {\n//     try {\n//       const response = await apiClient.get('/movies');\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n//     }\n//   },\n\n//   addMovie: async (movieData) => {\n//     try {\n//       const response = await apiClient.post('/movies/add-movie', movieData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add movie');\n//     }\n//   },\n\n//   deleteMovie: async (id) => {\n//     try {\n//       const response = await apiClient.delete(`/movies/${id}`);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n//     }\n//   },\n\n//   get: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n//     }\n//   },\n\n//   post: async (endpoint, data) => {\n//     try {\n//       const response = await apiClient.post(endpoint, data);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to post data');\n//     }\n//   }\n// };\n\n// export default apiService;\n// services/api.service.js\nimport axios from 'axios';\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  TIMEOUT: 10000,\n  RETRY_DELAY: 1000,\n  ENDPOINTS: {\n    HEALTH: '/health',\n    MOVIES: '/movies',\n    ACTORS: '/actors',\n    PRODUCERS: '/producers'\n  }\n};\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst apiService = {\n  // Movies\n  getMovies: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch movies');\n    }\n  },\n  getMovie: async id => {\n    try {\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch movie');\n    }\n  },\n  addMovie: async movieData => {\n    try {\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to add movie');\n    }\n  },\n  updateMovie: async (id, movieData) => {\n    try {\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/update-movie/${id}`, movieData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update movie');\n    }\n  },\n  deleteMovie: async id => {\n    try {\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete movie');\n    }\n  },\n  // Actors\n  getActors: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to fetch actors');\n    }\n  },\n  // Producers\n  getProducers: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to fetch producers');\n    }\n  },\n  // Generic methods\n  get: async endpoint => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch data');\n    }\n  },\n  post: async (endpoint, data) => {\n    try {\n      const response = await apiClient.post(endpoint, data);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to post data');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","BASE_URL","process","env","REACT_APP_API_URL","TIMEOUT","RETRY_DELAY","ENDPOINTS","HEALTH","MOVIES","ACTORS","PRODUCERS","apiClient","create","baseURL","timeout","headers","apiService","getMovies","response","get","data","error","_error$response","_error$response$data","Error","message","getMovie","id","_error$response2","_error$response2$data","addMovie","movieData","post","_error$response3","_error$response3$data","updateMovie","put","_error$response4","_error$response4$data","deleteMovie","delete","_error$response5","_error$response5$data","getActors","_error$response6","_error$response6$data","getProducers","_error$response7","_error$response7$data","endpoint","_error$response8","_error$response8$data","_error$response9","_error$response9$data"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["// import axios from 'axios';\n\n// const API_CONFIG = {\n//   BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n//   TIMEOUT: 10000,\n//   RETRY_DELAY: 1000,\n//   ENDPOINTS: {\n//     HEALTH: '/health',\n//     MOVIES: '/movies',\n//     ACTORS: '/actors',\n//     PRODUCERS: '/producers'\n//   }\n// };\n\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// });\n\n// const apiService = {\n//   getMovies: async () => {\n//     try {\n//       const response = await apiClient.get('/movies');\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n//     }\n//   },\n\n//   addMovie: async (movieData) => {\n//     try {\n//       const response = await apiClient.post('/movies/add-movie', movieData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add movie');\n//     }\n//   },\n\n//   deleteMovie: async (id) => {\n//     try {\n//       const response = await apiClient.delete(`/movies/${id}`);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n//     }\n//   },\n\n//   get: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n//     }\n//   },\n\n//   post: async (endpoint, data) => {\n//     try {\n//       const response = await apiClient.post(endpoint, data);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to post data');\n//     }\n//   }\n// };\n\n// export default apiService;\n// services/api.service.js\nimport axios from 'axios';\n\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  TIMEOUT: 10000,\n  RETRY_DELAY: 1000,\n  ENDPOINTS: {\n    HEALTH: '/health',\n    MOVIES: '/movies',\n    ACTORS: '/actors',\n    PRODUCERS: '/producers'\n  }\n};\n\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst apiService = {\n  // Movies\n  getMovies: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n    }\n  },\n\n  getMovie: async (id) => {\n    try {\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch movie');\n    }\n  },\n\n  addMovie: async (movieData) => {\n    try {\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to add movie');\n    }\n  },\n\n  updateMovie: async (id, movieData) => {\n    try {\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/update-movie/${id}`, movieData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to update movie');\n    }\n  },\n\n  deleteMovie: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to delete movie');\n    }\n  },\n\n  // Actors\n  getActors: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n    }\n  },\n\n  // Producers\n  getProducers: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n    }\n  },\n\n  // Generic methods\n  get: async (endpoint) => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch data');\n    }\n  },\n\n  post: async (endpoint, data) => {\n    try {\n      const response = await apiClient.post(endpoint, data);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to post data');\n    }\n  }\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}