{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import { useFormik } from 'formik'\n// import * as yup from 'yup'\n// import axios from \"axios\";\n// import apiService from \"./services/api.service\";\n\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     getMovie()\n//   }, []);\n\n//   const getMovie = async() => {\n//    const moviesData = await axios.get(`${backend_API}/movies/${id}`);\n//    setMovie(moviesData.data)\n//   }\n\n//   return (\n//     <>\n//       {movie ? (\n//         <EditFunction movie={movie} />\n//       ) : (\n//         <Box sx={{ display: \"flex\" , justifyContent : \"center\" }}>\n//           <CircularProgress />\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// const EditFunction = ({ movie }) => {\n//   const navigate = useNavigate(); \n//   const [actors, setactors] = useState([]);\n//   const [producer, setProducer] = useState('');\n//   const [producerArr,setProducerArr] = useState([]);\n//   const [actorNames,setActorNames] = useState([]);\n\n//   useEffect(()=>{\n//     getData();\n//   },[])\n\n//   const getData = async() => {\n//     const res = await axios.get(`${backend_API}/producers`);\n//     const actorData = await axios.get(`${backend_API}/actors`);\n//     setProducerArr(res.data);\n//     setActorNames(actorData.data);\n//   }\n\n//   const handleProducerChange = (e) => {\n//     const {value} = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setactors(\n//       typeof value === \"string\" ? value.split(\",\") : value\n//     );\n//   };\n\n//   // console.log(movie)\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async(newMovie) => {\n//       // console.log(\"onSubmit : \", {...newMovie,actors,producer});\n//       await axios.put(`${backend_API}/movies/edit-movie/${movie._id}`,{...newMovie,actors,producer});\n//       navigate(\"/\");\n//     },\n//   });\n\n//   // console.log(movie)\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//         <TextField\n//           label=\"Enter the name\"\n//           variant=\"outlined\"\n//           id=\"name\"\n//           name=\"name\"\n//           value={formik.values.name}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.name && formik.errors.name}\n//           helperText={\n//             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the movie Description\"\n//           variant=\"outlined\"\n//           id=\"desc\"\n//           name=\"desc\"\n//           value={formik.values.desc}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.desc && formik.errors.desc}\n//           helperText={\n//             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the poster link\"\n//           variant=\"outlined\"\n//           id=\"poster\"\n//           name=\"poster\"\n//           value={formik.values.poster}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.poster && formik.errors.poster}\n//           helperText={\n//             formik.touched.poster && formik.errors.name\n//               ? formik.errors.poster\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the director name\"\n//           variant=\"outlined\"\n//           id=\"director\"\n//           name=\"director\"\n//           value={formik.values.director}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.director && formik.errors.director}\n//           helperText={\n//             formik.touched.director && formik.errors.director\n//               ? formik.errors.director\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the year of release\"\n//           variant=\"outlined\"\n//           id=\"yearOfRelease\"\n//           name=\"yearOfRelease\"\n//           value={formik.values.yearOfRelease}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           helperText={\n//             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//               ? formik.errors.yearOfRelease\n//               : \"\"\n//           }\n//         />\n//         <FormControl fullWidth>\n//           <InputLabel id=\"producer\">Producer Name</InputLabel>\n//           <Select\n//             labelId=\"producer\"\n//             id=\"producer\"\n//             value={producer}\n//             label=\"producer\"\n//             onChange={handleProducerChange}\n//           >\n//             {\n//               producerArr.map((prodName)=>{\n//                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n//               })\n//             }\n\n//           </Select>\n//         </FormControl>\n//         <FormControl fullWidth >\n//           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//           <Select\n//             labelId=\"actor\"\n//             id=\"actor\"\n//             multiple\n//             value={actors}\n//             onChange={handleChange}\n//           >\n//             {actorNames.map((actor) => (\n//               <MenuItem key={actor._id} value={actor._id}>\n//                 {actor.name}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" type=\"submit\">\n//           Update Movie\n//         </Button>\n//       </form>\n//   );\n// };\n\n// export default EditMovies;","map":{"version":3,"names":[],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/EditMovies.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import { useFormik } from 'formik'\n// import * as yup from 'yup'\n// import axios from \"axios\";\n// import apiService from \"./services/api.service\";\n\n// import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     getMovie()\n//   }, []);\n\n//   const getMovie = async() => {\n//    const moviesData = await axios.get(`${backend_API}/movies/${id}`);\n//    setMovie(moviesData.data)\n//   }\n\n//   return (\n//     <>\n//       {movie ? (\n//         <EditFunction movie={movie} />\n//       ) : (\n//         <Box sx={{ display: \"flex\" , justifyContent : \"center\" }}>\n//           <CircularProgress />\n//         </Box>\n//       )}\n//     </>\n//   );\n// }\n\n// const EditFunction = ({ movie }) => {\n//   const navigate = useNavigate(); \n//   const [actors, setactors] = useState([]);\n//   const [producer, setProducer] = useState('');\n//   const [producerArr,setProducerArr] = useState([]);\n//   const [actorNames,setActorNames] = useState([]);\n\n//   useEffect(()=>{\n//     getData();\n//   },[])\n\n//   const getData = async() => {\n//     const res = await axios.get(`${backend_API}/producers`);\n//     const actorData = await axios.get(`${backend_API}/actors`);\n//     setProducerArr(res.data);\n//     setActorNames(actorData.data);\n//   }\n\n//   const handleProducerChange = (e) => {\n//     const {value} = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setactors(\n//       typeof value === \"string\" ? value.split(\",\") : value\n//     );\n//   };\n\n//   // console.log(movie)\n\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n      \n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async(newMovie) => {\n//       // console.log(\"onSubmit : \", {...newMovie,actors,producer});\n//       await axios.put(`${backend_API}/movies/edit-movie/${movie._id}`,{...newMovie,actors,producer});\n//       navigate(\"/\");\n//     },\n//   });\n\n//   // console.log(movie)\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//         <TextField\n//           label=\"Enter the name\"\n//           variant=\"outlined\"\n//           id=\"name\"\n//           name=\"name\"\n//           value={formik.values.name}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.name && formik.errors.name}\n//           helperText={\n//             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the movie Description\"\n//           variant=\"outlined\"\n//           id=\"desc\"\n//           name=\"desc\"\n//           value={formik.values.desc}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.desc && formik.errors.desc}\n//           helperText={\n//             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the poster link\"\n//           variant=\"outlined\"\n//           id=\"poster\"\n//           name=\"poster\"\n//           value={formik.values.poster}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.poster && formik.errors.poster}\n//           helperText={\n//             formik.touched.poster && formik.errors.name\n//               ? formik.errors.poster\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the director name\"\n//           variant=\"outlined\"\n//           id=\"director\"\n//           name=\"director\"\n//           value={formik.values.director}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.director && formik.errors.director}\n//           helperText={\n//             formik.touched.director && formik.errors.director\n//               ? formik.errors.director\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the year of release\"\n//           variant=\"outlined\"\n//           id=\"yearOfRelease\"\n//           name=\"yearOfRelease\"\n//           value={formik.values.yearOfRelease}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           helperText={\n//             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//               ? formik.errors.yearOfRelease\n//               : \"\"\n//           }\n//         />\n//         <FormControl fullWidth>\n//           <InputLabel id=\"producer\">Producer Name</InputLabel>\n//           <Select\n//             labelId=\"producer\"\n//             id=\"producer\"\n//             value={producer}\n//             label=\"producer\"\n//             onChange={handleProducerChange}\n//           >\n//             {\n//               producerArr.map((prodName)=>{\n//                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n//               })\n//             }\n            \n//           </Select>\n//         </FormControl>\n//         <FormControl fullWidth >\n//           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//           <Select\n//             labelId=\"actor\"\n//             id=\"actor\"\n//             multiple\n//             value={actors}\n//             onChange={handleChange}\n//           >\n//             {actorNames.map((actor) => (\n//               <MenuItem key={actor._id} value={actor._id}>\n//                 {actor.name}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" type=\"submit\">\n//           Update Movie\n//         </Button>\n//       </form>\n//   );\n// };\n\n// export default EditMovies;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}