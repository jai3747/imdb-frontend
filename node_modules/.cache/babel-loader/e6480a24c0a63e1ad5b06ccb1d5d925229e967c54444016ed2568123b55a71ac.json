{"ast":null,"code":"// // // // //   // // src/services/api.service.js\n\n// // // // //   // import axios from 'axios';\n// // // // //   // import { API_CONFIG } from '../config/api.config';\n// // // // //   // // Create axios instance with default config\n// // // // //   // const apiClient = axios.create({\n// // // // //   //   baseURL: API_CONFIG.BASE_URL,\n// // // // //   //   timeout: API_CONFIG.TIMEOUT,\n// // // // //   //   headers: {\n// // // // //   //     'Content-Type': 'application/json'\n// // // // //   //   }\n// // // // //   // });\n\n// // // // //   // // Response interceptor for handling errors\n// // // // //   // apiClient.interceptors.response.use(\n// // // // //   //   (response) => response,\n// // // // //   //   async (error) => {\n// // // // //   //     const originalRequest = error.config;\n\n// // // // //   //     // Don't retry if we've already retried or if it's not an error we want to retry\n// // // // //   //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // // // //   //       throw handleApiError(error);\n// // // // //   //     }\n\n// // // // //   //     originalRequest._retry = true;\n\n// // // // //   //     // Implement exponential backoff\n// // // // //   //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// // // // //   //     return apiClient(originalRequest);\n// // // // //   //   }\n// // // // //   // );\n\n// // // // //   // // Error handler utility\n// // // // //   // export const handleApiError = (error) => {\n// // // // //   //   if (error.response) {\n// // // // //   //     // Server responded with error status\n// // // // //   //     const errorMessage = error.response.data?.message || 'An error occurred with the server';\n// // // // //   //     return new Error(errorMessage);\n// // // // //   //   } else if (error.request) {\n// // // // //   //     // Request made but no response\n// // // // //   //     return new Error('Unable to connect to the server');\n// // // // //   //   } else {\n// // // // //   //     // Error in request setup\n// // // // //   //     return new Error('Error setting up the request');\n// // // // //   //   }\n// // // // //   // };\n\n// // // // //   // // Utility to determine if we should retry the request\n// // // // //   // const shouldRetryError = (error) => {\n// // // // //   //   // Retry on network errors or 5xx server errors\n// // // // //   //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // // //   // };\n\n// // // // //   // // Delay utility for retries\n// // // // //   // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// // // // //   // // API service methods\n// // // // //   // export const apiService = {\n// // // // //   //   // Health check\n// // // // //   //   checkHealth: async () => {\n// // // // //   //     try {\n// // // // //   //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// // // // //   //       return response.data;\n// // // // //   //     } catch (error) {\n// // // // //   //       throw handleApiError(error);\n// // // // //   //     }\n// // // // //   //   },\n\n// // // // //   //   // Check specific API status\n// // // // //   //   checkApiStatus: async (endpoint) => {\n// // // // //   //     try {\n// // // // //   //       const response = await apiClient.get(endpoint);\n// // // // //   //       return response.data;\n// // // // //   //     } catch (error) {\n// // // // //   //       throw handleApiError(error);\n// // // // //   //     }\n// // // // //   //   },\n\n// // // // //   //   // Movies\n// // // // //   //   movies: {\n// // // // //   //     getAll: async () => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     },\n// // // // //   //     add: async (movieData) => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     }\n// // // // //   //   },\n\n// // // // //   //   // Actors\n// // // // //   //   actors: {\n// // // // //   //     getAll: async () => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     },\n// // // // //   //     add: async (actorData) => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     }\n// // // // //   //   },\n\n// // // // //   //   // Producers\n// // // // //   //   producers: {\n// // // // //   //     getAll: async () => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     },\n// // // // //   //     add: async (producerData) => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     }\n// // // // //   //   }\n// // // // //   // };\n\n// // // // //   // export default apiService;\n// // // // //   // src/services/api.service.js\n// // // // // import axios from 'axios';\n// // // // // import { API_CONFIG } from '../config/api.config';\n\n// // // // // const apiClient = axios.create({\n// // // // //   baseURL: API_CONFIG.BASE_URL,\n// // // // //   timeout: API_CONFIG.TIMEOUT,\n// // // // //   headers: {\n// // // // //     'Content-Type': 'application/json'\n// // // // //   }\n// // // // // });\n\n// // // // // apiClient.interceptors.response.use(\n// // // // //   (response) => response,\n// // // // //   async (error) => {\n// // // // //     const originalRequest = error.config;\n\n// // // // //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n\n// // // // //     originalRequest._retry = true;\n// // // // //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// // // // //     return apiClient(originalRequest);\n// // // // //   }\n// // // // // );\n\n// // // // // const handleApiError = (error) => {\n// // // // //   if (error.response) {\n// // // // //     return new Error(error.response.data?.message || 'An error occurred with the server');\n// // // // //   } else if (error.request) {\n// // // // //     return new Error('Unable to connect to the server');\n// // // // //   }\n// // // // //   return new Error('Error setting up the request');\n// // // // // };\n\n// // // // // const shouldRetryError = (error) => {\n// // // // //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // // // };\n\n// // // // // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// // // // // export const apiService = {\n// // // // //   checkHealth: async () => {\n// // // // //     try {\n// // // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   },\n\n// // // // //   checkApiStatus: async (endpoint) => {\n// // // // //     try {\n// // // // //       const response = await apiClient.get(endpoint);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   },\n\n// // // // //   get: async (endpoint) => {\n// // // // //     try {\n// // // // //       const response = await apiClient.get(endpoint);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   },\n\n// // // // //   post: async (endpoint, data) => {\n// // // // //     try {\n// // // // //       const response = await apiClient.post(endpoint, data);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   }\n// // // // // };\n\n// // // // // export default apiService;\n// // // // import axios from \"axios\";\n// // // // import { API_CONFIG } from \"../config/api.config\";\n\n// // // // const apiClient = axios.create({\n// // // //   baseURL: API_CONFIG.BASE_URL,\n// // // //   timeout: API_CONFIG.TIMEOUT,\n// // // //   headers: {\n// // // //     \"Content-Type\": \"application/json\",\n// // // //   },\n// // // // });\n\n// // // // apiClient.interceptors.response.use(\n// // // //   (response) => response,\n// // // //   async (error) => {\n// // // //     const originalRequest = error.config;\n\n// // // //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // // //       throw handleApiError(error);\n// // // //     }\n\n// // // //     originalRequest._retry = true;\n// // // //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// // // //     return apiClient(originalRequest);\n// // // //   }\n// // // // );\n\n// // // // const handleApiError = (error) => {\n// // // //   if (error.response) {\n// // // //     return new Error(error.response.data?.message || \"An error occurred with the server\");\n// // // //   } else if (error.request) {\n// // // //     return new Error(\"Unable to connect to the server\");\n// // // //   }\n// // // //   return new Error(\"Error setting up the request\");\n// // // // };\n\n// // // // const shouldRetryError = (error) => {\n// // // //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // // };\n\n// // // // const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// // // // export const apiService = {\n// // // //   checkHealth: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   checkApiStatus: async (endpoint) => {\n// // // //     try {\n// // // //       const response = await apiClient.get(endpoint);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   get: async (endpoint) => {\n// // // //     try {\n// // // //       const response = await apiClient.get(endpoint);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   post: async (endpoint, data) => {\n// // // //     try {\n// // // //       const response = await apiClient.post(endpoint, data);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   // Add movie-specific methods\n// // // //   getMovies: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   getMovie: async (id) => {\n// // // //     try {\n// // // //       const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   addMovie: async (newMovie) => {\n// // // //     try {\n// // // //       const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, newMovie);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   updateMovie: async (id, updatedMovie) => {\n// // // //     try {\n// // // //       const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`, updatedMovie);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   deleteMovie: async (id) => {\n// // // //     try {\n// // // //       const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   // Add actor-specific methods\n// // // //   getActors: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   // Add producer-specific methods\n// // // //   getProducers: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n// // // // };\n\n// // // // export default apiService;\n// // // import axios from \"axios\";\n// // // import { API_CONFIG } from \"../config/api.config\";\n\n// // // const apiClient = axios.create({\n// // //   baseURL: API_CONFIG.BASE_URL,\n// // //   timeout: API_CONFIG.TIMEOUT,\n// // //   headers: {\n// // //     \"Content-Type\": \"application/json\",\n// // //   },\n// // // });\n\n// // // apiClient.interceptors.response.use(\n// // //   (response) => response,\n// // //   async (error) => {\n// // //     const originalRequest = error.config;\n\n// // //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // //       throw handleApiError(error);\n// // //     }\n\n// // //     originalRequest._retry = true;\n// // //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// // //     return apiClient(originalRequest);\n// // //   }\n// // // );\n\n// // // const handleApiError = (error) => {\n// // //   if (error.response) {\n// // //     return new Error(error.response.data?.message || \"An error occurred with the server\");\n// // //   } else if (error.request) {\n// // //     return new Error(\"Unable to connect to the server\");\n// // //   }\n// // //   return new Error(\"Error setting up the request\");\n// // // };\n\n// // // const shouldRetryError = (error) => {\n// // //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // };\n\n// // // const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// // // export const apiService = {\n// // //   getMovies: async () => {\n// // //     try {\n// // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n\n// // //   addMovie: async (newMovie) => {\n// // //     try {\n// // //       const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, newMovie);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n\n// // //   getActors: async () => {\n// // //     try {\n// // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n\n// // //   getProducers: async () => {\n// // //     try {\n// // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n// // // };\n\n// // // export default apiService;\n// // import axios from \"axios\";\n// // import { API_CONFIG } from \"../config/api.config\";\n\n// // const apiClient = axios.create({\n// //   baseURL: API_CONFIG.BASE_URL,\n// //   timeout: API_CONFIG.TIMEOUT,\n// //   headers: {\n// //     \"Content-Type\": \"application/json\",\n// //   },\n// // });\n\n// // apiClient.interceptors.response.use(\n// //   (response) => response,\n// //   async (error) => {\n// //     const originalRequest = error.config;\n\n// //     if (originalRequest._retry || !shouldRetryError(error)) {\n// //       throw handleApiError(error);\n// //     }\n\n// //     originalRequest._retry = true;\n// //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// //     return apiClient(originalRequest);\n// //   }\n// // );\n\n// // const handleApiError = (error) => {\n// //   if (error.response) {\n// //     return new Error(error.response.data?.message || \"An error occurred with the server\");\n// //   } else if (error.request) {\n// //     return new Error(\"Unable to connect to the server\");\n// //   }\n// //   return new Error(\"Error setting up the request\");\n// // };\n\n// // const shouldRetryError = (error) => {\n// //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // };\n\n// // const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// // export const apiService = {\n// //   checkHealth: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   getMovies: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   addMovie: async (newMovie) => {\n// //     try {\n// //       const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, newMovie);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   getActors: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   getProducers: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n// // };\n\n// // export default apiService;\n// import axios from \"axios\";\n// import { API_CONFIG } from \"../config/api.config\";\n\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// apiClient.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     if (originalRequest._retry || !shouldRetryError(error)) {\n//       throw handleApiError(error);\n//     }\n\n//     originalRequest._retry = true;\n//     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n//     return apiClient(originalRequest);\n//   }\n// );\n\n// const handleApiError = (error) => {\n//   if (error.response) {\n//     return new Error(error.response.data?.message || \"An error occurred with the server\");\n//   } else if (error.request) {\n//     return new Error(\"Unable to connect to the server\");\n//   }\n//   return new Error(\"Error setting up the request\");\n// };\n\n// const shouldRetryError = (error) => {\n//   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// };\n\n// const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// export const apiService = {\n//   checkHealth: async () => {\n//     try {\n//       const response = await apiClient.get(\"/health\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   getMovies: async () => {\n//     try {\n//       const response = await apiClient.get(\"/movies\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   addMovie: async (newMovie) => {\n//     try {\n//       const response = await apiClient.post(\"/movies\", newMovie);\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   getActors: async () => {\n//     try {\n//       const response = await apiClient.get(\"/actors\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   getProducers: async () => {\n//     try {\n//       const response = await apiClient.get(\"/producers\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n// };\n\n// export default apiService;\nimport axios from \"axios\";\n\n// Define the base URL for your backend API\nconst BASE_URL = \"http://localhost:5000\"; // Replace with your backend URL\n\nconst apiService = {\n  // Fetch all actors\n  getActors: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/actors`);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to fetch actors\");\n    }\n  },\n  // Fetch all producers\n  getProducers: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/producers`);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to fetch producers\");\n    }\n  },\n  // Add a new movie\n  addMovie: async newMovie => {\n    try {\n      const response = await axios.post(`${BASE_URL}/movies/add-movie`, newMovie);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to add movie\");\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","BASE_URL","apiService","getActors","response","get","data","error","Error","getProducers","addMovie","newMovie","post"],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["\n// // // // //   // // src/services/api.service.js\n  \n// // // // //   // import axios from 'axios';\n// // // // //   // import { API_CONFIG } from '../config/api.config';\n// // // // //   // // Create axios instance with default config\n// // // // //   // const apiClient = axios.create({\n// // // // //   //   baseURL: API_CONFIG.BASE_URL,\n// // // // //   //   timeout: API_CONFIG.TIMEOUT,\n// // // // //   //   headers: {\n// // // // //   //     'Content-Type': 'application/json'\n// // // // //   //   }\n// // // // //   // });\n  \n// // // // //   // // Response interceptor for handling errors\n// // // // //   // apiClient.interceptors.response.use(\n// // // // //   //   (response) => response,\n// // // // //   //   async (error) => {\n// // // // //   //     const originalRequest = error.config;\n      \n// // // // //   //     // Don't retry if we've already retried or if it's not an error we want to retry\n// // // // //   //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // // // //   //       throw handleApiError(error);\n// // // // //   //     }\n  \n// // // // //   //     originalRequest._retry = true;\n      \n// // // // //   //     // Implement exponential backoff\n// // // // //   //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n      \n// // // // //   //     return apiClient(originalRequest);\n// // // // //   //   }\n// // // // //   // );\n  \n// // // // //   // // Error handler utility\n// // // // //   // export const handleApiError = (error) => {\n// // // // //   //   if (error.response) {\n// // // // //   //     // Server responded with error status\n// // // // //   //     const errorMessage = error.response.data?.message || 'An error occurred with the server';\n// // // // //   //     return new Error(errorMessage);\n// // // // //   //   } else if (error.request) {\n// // // // //   //     // Request made but no response\n// // // // //   //     return new Error('Unable to connect to the server');\n// // // // //   //   } else {\n// // // // //   //     // Error in request setup\n// // // // //   //     return new Error('Error setting up the request');\n// // // // //   //   }\n// // // // //   // };\n  \n// // // // //   // // Utility to determine if we should retry the request\n// // // // //   // const shouldRetryError = (error) => {\n// // // // //   //   // Retry on network errors or 5xx server errors\n// // // // //   //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // // //   // };\n  \n// // // // //   // // Delay utility for retries\n// // // // //   // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n  \n// // // // //   // // API service methods\n// // // // //   // export const apiService = {\n// // // // //   //   // Health check\n// // // // //   //   checkHealth: async () => {\n// // // // //   //     try {\n// // // // //   //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// // // // //   //       return response.data;\n// // // // //   //     } catch (error) {\n// // // // //   //       throw handleApiError(error);\n// // // // //   //     }\n// // // // //   //   },\n  \n// // // // //   //   // Check specific API status\n// // // // //   //   checkApiStatus: async (endpoint) => {\n// // // // //   //     try {\n// // // // //   //       const response = await apiClient.get(endpoint);\n// // // // //   //       return response.data;\n// // // // //   //     } catch (error) {\n// // // // //   //       throw handleApiError(error);\n// // // // //   //     }\n// // // // //   //   },\n  \n// // // // //   //   // Movies\n// // // // //   //   movies: {\n// // // // //   //     getAll: async () => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     },\n// // // // //   //     add: async (movieData) => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     }\n// // // // //   //   },\n  \n// // // // //   //   // Actors\n// // // // //   //   actors: {\n// // // // //   //     getAll: async () => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     },\n// // // // //   //     add: async (actorData) => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     }\n// // // // //   //   },\n  \n// // // // //   //   // Producers\n// // // // //   //   producers: {\n// // // // //   //     getAll: async () => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     },\n// // // // //   //     add: async (producerData) => {\n// // // // //   //       try {\n// // // // //   //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n// // // // //   //         return response.data;\n// // // // //   //       } catch (error) {\n// // // // //   //         throw handleApiError(error);\n// // // // //   //       }\n// // // // //   //     }\n// // // // //   //   }\n// // // // //   // };\n  \n// // // // //   // export default apiService;\n// // // // //   // src/services/api.service.js\n// // // // // import axios from 'axios';\n// // // // // import { API_CONFIG } from '../config/api.config';\n\n// // // // // const apiClient = axios.create({\n// // // // //   baseURL: API_CONFIG.BASE_URL,\n// // // // //   timeout: API_CONFIG.TIMEOUT,\n// // // // //   headers: {\n// // // // //     'Content-Type': 'application/json'\n// // // // //   }\n// // // // // });\n\n// // // // // apiClient.interceptors.response.use(\n// // // // //   (response) => response,\n// // // // //   async (error) => {\n// // // // //     const originalRequest = error.config;\n    \n// // // // //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n\n// // // // //     originalRequest._retry = true;\n// // // // //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n    \n// // // // //     return apiClient(originalRequest);\n// // // // //   }\n// // // // // );\n\n// // // // // const handleApiError = (error) => {\n// // // // //   if (error.response) {\n// // // // //     return new Error(error.response.data?.message || 'An error occurred with the server');\n// // // // //   } else if (error.request) {\n// // // // //     return new Error('Unable to connect to the server');\n// // // // //   }\n// // // // //   return new Error('Error setting up the request');\n// // // // // };\n\n// // // // // const shouldRetryError = (error) => {\n// // // // //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // // // };\n\n// // // // // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// // // // // export const apiService = {\n// // // // //   checkHealth: async () => {\n// // // // //     try {\n// // // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   },\n\n// // // // //   checkApiStatus: async (endpoint) => {\n// // // // //     try {\n// // // // //       const response = await apiClient.get(endpoint);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   },\n\n// // // // //   get: async (endpoint) => {\n// // // // //     try {\n// // // // //       const response = await apiClient.get(endpoint);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   },\n\n// // // // //   post: async (endpoint, data) => {\n// // // // //     try {\n// // // // //       const response = await apiClient.post(endpoint, data);\n// // // // //       return response.data;\n// // // // //     } catch (error) {\n// // // // //       throw handleApiError(error);\n// // // // //     }\n// // // // //   }\n// // // // // };\n\n// // // // // export default apiService;\n// // // // import axios from \"axios\";\n// // // // import { API_CONFIG } from \"../config/api.config\";\n\n// // // // const apiClient = axios.create({\n// // // //   baseURL: API_CONFIG.BASE_URL,\n// // // //   timeout: API_CONFIG.TIMEOUT,\n// // // //   headers: {\n// // // //     \"Content-Type\": \"application/json\",\n// // // //   },\n// // // // });\n\n// // // // apiClient.interceptors.response.use(\n// // // //   (response) => response,\n// // // //   async (error) => {\n// // // //     const originalRequest = error.config;\n\n// // // //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // // //       throw handleApiError(error);\n// // // //     }\n\n// // // //     originalRequest._retry = true;\n// // // //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// // // //     return apiClient(originalRequest);\n// // // //   }\n// // // // );\n\n// // // // const handleApiError = (error) => {\n// // // //   if (error.response) {\n// // // //     return new Error(error.response.data?.message || \"An error occurred with the server\");\n// // // //   } else if (error.request) {\n// // // //     return new Error(\"Unable to connect to the server\");\n// // // //   }\n// // // //   return new Error(\"Error setting up the request\");\n// // // // };\n\n// // // // const shouldRetryError = (error) => {\n// // // //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // // };\n\n// // // // const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// // // // export const apiService = {\n// // // //   checkHealth: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   checkApiStatus: async (endpoint) => {\n// // // //     try {\n// // // //       const response = await apiClient.get(endpoint);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   get: async (endpoint) => {\n// // // //     try {\n// // // //       const response = await apiClient.get(endpoint);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   post: async (endpoint, data) => {\n// // // //     try {\n// // // //       const response = await apiClient.post(endpoint, data);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   // Add movie-specific methods\n// // // //   getMovies: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   getMovie: async (id) => {\n// // // //     try {\n// // // //       const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   addMovie: async (newMovie) => {\n// // // //     try {\n// // // //       const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, newMovie);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   updateMovie: async (id, updatedMovie) => {\n// // // //     try {\n// // // //       const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`, updatedMovie);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   deleteMovie: async (id) => {\n// // // //     try {\n// // // //       const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   // Add actor-specific methods\n// // // //   getActors: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n\n// // // //   // Add producer-specific methods\n// // // //   getProducers: async () => {\n// // // //     try {\n// // // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// // // //       return response.data;\n// // // //     } catch (error) {\n// // // //       throw handleApiError(error);\n// // // //     }\n// // // //   },\n// // // // };\n\n// // // // export default apiService;\n// // // import axios from \"axios\";\n// // // import { API_CONFIG } from \"../config/api.config\";\n\n// // // const apiClient = axios.create({\n// // //   baseURL: API_CONFIG.BASE_URL,\n// // //   timeout: API_CONFIG.TIMEOUT,\n// // //   headers: {\n// // //     \"Content-Type\": \"application/json\",\n// // //   },\n// // // });\n\n// // // apiClient.interceptors.response.use(\n// // //   (response) => response,\n// // //   async (error) => {\n// // //     const originalRequest = error.config;\n\n// // //     if (originalRequest._retry || !shouldRetryError(error)) {\n// // //       throw handleApiError(error);\n// // //     }\n\n// // //     originalRequest._retry = true;\n// // //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// // //     return apiClient(originalRequest);\n// // //   }\n// // // );\n\n// // // const handleApiError = (error) => {\n// // //   if (error.response) {\n// // //     return new Error(error.response.data?.message || \"An error occurred with the server\");\n// // //   } else if (error.request) {\n// // //     return new Error(\"Unable to connect to the server\");\n// // //   }\n// // //   return new Error(\"Error setting up the request\");\n// // // };\n\n// // // const shouldRetryError = (error) => {\n// // //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // // };\n\n// // // const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// // // export const apiService = {\n// // //   getMovies: async () => {\n// // //     try {\n// // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n\n// // //   addMovie: async (newMovie) => {\n// // //     try {\n// // //       const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, newMovie);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n\n// // //   getActors: async () => {\n// // //     try {\n// // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n\n// // //   getProducers: async () => {\n// // //     try {\n// // //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw handleApiError(error);\n// // //     }\n// // //   },\n// // // };\n\n// // // export default apiService;\n// // import axios from \"axios\";\n// // import { API_CONFIG } from \"../config/api.config\";\n\n// // const apiClient = axios.create({\n// //   baseURL: API_CONFIG.BASE_URL,\n// //   timeout: API_CONFIG.TIMEOUT,\n// //   headers: {\n// //     \"Content-Type\": \"application/json\",\n// //   },\n// // });\n\n// // apiClient.interceptors.response.use(\n// //   (response) => response,\n// //   async (error) => {\n// //     const originalRequest = error.config;\n\n// //     if (originalRequest._retry || !shouldRetryError(error)) {\n// //       throw handleApiError(error);\n// //     }\n\n// //     originalRequest._retry = true;\n// //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n// //     return apiClient(originalRequest);\n// //   }\n// // );\n\n// // const handleApiError = (error) => {\n// //   if (error.response) {\n// //     return new Error(error.response.data?.message || \"An error occurred with the server\");\n// //   } else if (error.request) {\n// //     return new Error(\"Unable to connect to the server\");\n// //   }\n// //   return new Error(\"Error setting up the request\");\n// // };\n\n// // const shouldRetryError = (error) => {\n// //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// // };\n\n// // const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// // export const apiService = {\n// //   checkHealth: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   getMovies: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   addMovie: async (newMovie) => {\n// //     try {\n// //       const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, newMovie);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   getActors: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n\n// //   getProducers: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw handleApiError(error);\n// //     }\n// //   },\n// // };\n\n// // export default apiService;\n// import axios from \"axios\";\n// import { API_CONFIG } from \"../config/api.config\";\n\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// apiClient.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     if (originalRequest._retry || !shouldRetryError(error)) {\n//       throw handleApiError(error);\n//     }\n\n//     originalRequest._retry = true;\n//     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n//     return apiClient(originalRequest);\n//   }\n// );\n\n// const handleApiError = (error) => {\n//   if (error.response) {\n//     return new Error(error.response.data?.message || \"An error occurred with the server\");\n//   } else if (error.request) {\n//     return new Error(\"Unable to connect to the server\");\n//   }\n//   return new Error(\"Error setting up the request\");\n// };\n\n// const shouldRetryError = (error) => {\n//   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// };\n\n// const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// export const apiService = {\n//   checkHealth: async () => {\n//     try {\n//       const response = await apiClient.get(\"/health\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   getMovies: async () => {\n//     try {\n//       const response = await apiClient.get(\"/movies\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   addMovie: async (newMovie) => {\n//     try {\n//       const response = await apiClient.post(\"/movies\", newMovie);\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   getActors: async () => {\n//     try {\n//       const response = await apiClient.get(\"/actors\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   getProducers: async () => {\n//     try {\n//       const response = await apiClient.get(\"/producers\");\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n// };\n\n// export default apiService;\nimport axios from \"axios\";\n\n// Define the base URL for your backend API\nconst BASE_URL = \"http://localhost:5000\"; // Replace with your backend URL\n\nconst apiService = {\n  // Fetch all actors\n  getActors: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/actors`);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to fetch actors\");\n    }\n  },\n\n  // Fetch all producers\n  getProducers: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/producers`);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to fetch producers\");\n    }\n  },\n\n  // Add a new movie\n  addMovie: async (newMovie) => {\n    try {\n      const response = await axios.post(`${BASE_URL}/movies/add-movie`, newMovie);\n      return response.data;\n    } catch (error) {\n      throw new Error(\"Failed to add movie\");\n    }\n  },\n};\n\nexport default apiService;"],"mappingszB;AACA,MAAMC,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C,MAAMC,UAAU,GAAG;EACjB;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,QAAS,SAAQ,CAAC;MACtD,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF,CAAC;EAED;EACAC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,QAAS,YAAW,CAAC;MACzD,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF,CAAC;EAED;EACAE,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACY,IAAI,CAAE,GAAEX,QAAS,mBAAkB,EAAEU,QAAQ,CAAC;MAC3E,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF;AACF,CAAC;AAED,eAAeN,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}