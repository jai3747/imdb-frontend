{"ast":null,"code":"// src/services/metrics.service.js\nimport axios from 'axios';\nclass MetricsService {\n  constructor() {\n    this.metrics = {\n      pageViews: {},\n      apiCalls: {},\n      uiInteractions: {},\n      loadTimes: [],\n      errors: {}\n    };\n\n    // Fixed: Point to backend server port instead of frontend port\n    this.metricsEndpoint = process.env.REACT_APP_METRICS_ENDPOINT || 'http://localhost:5000/metrics-report';\n    this.reportingInterval = null;\n\n    // Initialize performance observer for page load metrics\n    if (typeof PerformanceObserver !== 'undefined') {\n      this.initPerformanceObserver();\n    }\n  }\n  initPerformanceObserver() {\n    const observer = new PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'navigation') {\n          this.recordLoadTime(entry.duration);\n        }\n      }\n    });\n    observer.observe({\n      entryTypes: ['navigation']\n    });\n  }\n  startReporting(intervalMs = 30000) {\n    if (this.reportingInterval) {\n      clearInterval(this.reportingInterval);\n    }\n    this.reportingInterval = setInterval(() => {\n      this.reportMetrics();\n    }, intervalMs);\n\n    // Report initial metrics on page load\n    this.reportMetrics();\n    return this;\n  }\n  stopReporting() {\n    if (this.reportingInterval) {\n      clearInterval(this.reportingInterval);\n      this.reportingInterval = null;\n    }\n    return this;\n  }\n\n  // Sanitize strings to avoid issues with Prometheus format\n  sanitizeString(str) {\n    return (str || '').replace(/[\"\\n\\r\\\\]/g, '_');\n  }\n  recordPageView(page) {\n    const safePage = this.sanitizeString(page);\n    this.metrics.pageViews[safePage] = (this.metrics.pageViews[safePage] || 0) + 1;\n    return this;\n  }\n  recordApiCall(endpoint, status, duration) {\n    const safeEndpoint = this.sanitizeString(endpoint);\n    const key = `${safeEndpoint}:${status}`;\n    this.metrics.apiCalls[key] = this.metrics.apiCalls[key] || {\n      count: 0,\n      totalDuration: 0\n    };\n    this.metrics.apiCalls[key].count += 1;\n    this.metrics.apiCalls[key].totalDuration += duration;\n    return this;\n  }\n  recordUiInteraction(component, action) {\n    const safeComponent = this.sanitizeString(component);\n    const safeAction = this.sanitizeString(action);\n    const key = `${safeComponent}:${safeAction}`;\n    this.metrics.uiInteractions[key] = (this.metrics.uiInteractions[key] || 0) + 1;\n    return this;\n  }\n  recordLoadTime(duration) {\n    this.metrics.loadTimes.push(duration);\n\n    // Keep only the last 50 measurements\n    if (this.metrics.loadTimes.length > 50) {\n      this.metrics.loadTimes.shift();\n    }\n    return this;\n  }\n  recordError(category, message) {\n    const safeCategory = this.sanitizeString(category);\n    const safeMessage = this.sanitizeString(message);\n    const key = `${safeCategory}:${safeMessage}`;\n    this.metrics.errors[key] = (this.metrics.errors[key] || 0) + 1;\n    return this;\n  }\n  getFormattedMetrics() {\n    let output = '';\n\n    // Page views metrics\n    output += '# HELP frontend_page_views Total number of page views\\n';\n    output += '# TYPE frontend_page_views counter\\n';\n    Object.entries(this.metrics.pageViews).forEach(([page, count]) => {\n      output += `frontend_page_views{page=\"${page}\"} ${count}\\n`;\n    });\n\n    // API calls metrics\n    output += '# HELP frontend_api_calls Total number of API calls\\n';\n    output += '# TYPE frontend_api_calls counter\\n';\n    Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n      const [endpoint, status] = key.split(':');\n      output += `frontend_api_calls{endpoint=\"${endpoint}\",status=\"${status}\"} ${data.count}\\n`;\n    });\n    output += '# HELP frontend_api_call_duration_ms Average duration of API calls in ms\\n';\n    output += '# TYPE frontend_api_call_duration_ms gauge\\n';\n    Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n      const [endpoint, status] = key.split(':');\n      if (data.count > 0) {\n        const avgDuration = data.totalDuration / data.count;\n        output += `frontend_api_call_duration_ms{endpoint=\"${endpoint}\",status=\"${status}\"} ${avgDuration}\\n`;\n      }\n    });\n\n    // UI interaction metrics\n    output += '# HELP frontend_ui_interactions Total number of UI interactions\\n';\n    output += '# TYPE frontend_ui_interactions counter\\n';\n    Object.entries(this.metrics.uiInteractions).forEach(([key, count]) => {\n      const [component, action] = key.split(':');\n      output += `frontend_ui_interactions{component=\"${component}\",action=\"${action}\"} ${count}\\n`;\n    });\n\n    // Load time metrics\n    if (this.metrics.loadTimes.length > 0) {\n      const average = this.metrics.loadTimes.reduce((a, b) => a + b, 0) / this.metrics.loadTimes.length;\n      output += '# HELP frontend_page_load_time_ms Average page load time in ms\\n';\n      output += '# TYPE frontend_page_load_time_ms gauge\\n';\n      output += `frontend_page_load_time_ms ${average}\\n`;\n    }\n\n    // Error metrics\n    output += '# HELP frontend_errors Total number of errors\\n';\n    output += '# TYPE frontend_errors counter\\n';\n    Object.entries(this.metrics.errors).forEach(([key, count]) => {\n      const [category, message] = key.split(':');\n      output += `frontend_errors{category=\"${category}\",message=\"${message}\"} ${count}\\n`;\n    });\n    return output;\n  }\n  async reportMetrics() {\n    try {\n      const metricsData = this.getFormattedMetrics();\n\n      // Send metrics to the backend server\n      await axios.post(this.metricsEndpoint, metricsData, {\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        timeout: 5000 // Add timeout to prevent hanging requests\n      });\n\n      // For development, also log metrics to console\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"✅ Frontend metrics sent successfully\");\n        console.log(\"📊 Metrics data:\", metricsData);\n      }\n    } catch (error) {\n      // More detailed error logging\n      if (error.code === 'ECONNREFUSED') {\n        console.error(\"❌ Backend server not running on port 5000\");\n      } else if (error.response) {\n        console.error(\"❌ Failed to report metrics - Server responded with:\", error.response.status, error.response.statusText);\n      } else if (error.request) {\n        console.error(\"❌ Failed to report metrics - No response from server:\", error.message);\n      } else {\n        console.error(\"❌ Failed to report metrics:\", error.message);\n      }\n    }\n  }\n\n  // Method to test connection to backend\n  async testConnection() {\n    try {\n      const response = await axios.get('http://localhost:5000/health', {\n        timeout: 3000\n      });\n      console.log(\"✅ Backend connection test successful:\", response.data);\n      return true;\n    } catch (error) {\n      console.error(\"❌ Backend connection test failed:\", error.message);\n      return false;\n    }\n  }\n}\n\n// Create an instance of MetricsService\nconst metricsService = new MetricsService();\n\n// Export the instance as the default export\nexport default metricsService;","map":{"version":3,"names":["axios","MetricsService","constructor","metrics","pageViews","apiCalls","uiInteractions","loadTimes","errors","metricsEndpoint","process","env","REACT_APP_METRICS_ENDPOINT","reportingInterval","PerformanceObserver","initPerformanceObserver","observer","list","entry","getEntries","entryType","recordLoadTime","duration","observe","entryTypes","startReporting","intervalMs","clearInterval","setInterval","reportMetrics","stopReporting","sanitizeString","str","replace","recordPageView","page","safePage","recordApiCall","endpoint","status","safeEndpoint","key","count","totalDuration","recordUiInteraction","component","action","safeComponent","safeAction","push","length","shift","recordError","category","message","safeCategory","safeMessage","getFormattedMetrics","output","Object","entries","forEach","data","split","avgDuration","average","reduce","a","b","metricsData","post","headers","timeout","NODE_ENV","console","log","error","code","response","statusText","request","testConnection","get","metricsService"],"sources":["/Users/jayachandran/imdb/imdb-frontend/src/services/metrics.service.js"],"sourcesContent":["// src/services/metrics.service.js\nimport axios from 'axios';\n\nclass MetricsService {\n  constructor() {\n    this.metrics = {\n      pageViews: {},\n      apiCalls: {},\n      uiInteractions: {},\n      loadTimes: [],\n      errors: {}\n    };\n\n    // Fixed: Point to backend server port instead of frontend port\n    this.metricsEndpoint = process.env.REACT_APP_METRICS_ENDPOINT || 'http://localhost:5000/metrics-report';\n    this.reportingInterval = null;\n\n    // Initialize performance observer for page load metrics\n    if (typeof PerformanceObserver !== 'undefined') {\n      this.initPerformanceObserver();\n    }\n  }\n\n  initPerformanceObserver() {\n    const observer = new PerformanceObserver((list) => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'navigation') {\n          this.recordLoadTime(entry.duration);\n        }\n      }\n    });\n\n    observer.observe({ entryTypes: ['navigation'] });\n  }\n\n  startReporting(intervalMs = 30000) {\n    if (this.reportingInterval) {\n      clearInterval(this.reportingInterval);\n    }\n\n    this.reportingInterval = setInterval(() => {\n      this.reportMetrics();\n    }, intervalMs);\n\n    // Report initial metrics on page load\n    this.reportMetrics();\n\n    return this;\n  }\n\n  stopReporting() {\n    if (this.reportingInterval) {\n      clearInterval(this.reportingInterval);\n      this.reportingInterval = null;\n    }\n    return this;\n  }\n\n  // Sanitize strings to avoid issues with Prometheus format\n  sanitizeString(str) {\n    return (str || '').replace(/[\"\\n\\r\\\\]/g, '_');\n  }\n\n  recordPageView(page) {\n    const safePage = this.sanitizeString(page);\n    this.metrics.pageViews[safePage] = (this.metrics.pageViews[safePage] || 0) + 1;\n    return this;\n  }\n\n  recordApiCall(endpoint, status, duration) {\n    const safeEndpoint = this.sanitizeString(endpoint);\n    const key = `${safeEndpoint}:${status}`;\n    this.metrics.apiCalls[key] = this.metrics.apiCalls[key] || { count: 0, totalDuration: 0 };\n    this.metrics.apiCalls[key].count += 1;\n    this.metrics.apiCalls[key].totalDuration += duration;\n    return this;\n  }\n\n  recordUiInteraction(component, action) {\n    const safeComponent = this.sanitizeString(component);\n    const safeAction = this.sanitizeString(action);\n    const key = `${safeComponent}:${safeAction}`;\n    this.metrics.uiInteractions[key] = (this.metrics.uiInteractions[key] || 0) + 1;\n    return this;\n  }\n\n  recordLoadTime(duration) {\n    this.metrics.loadTimes.push(duration);\n\n    // Keep only the last 50 measurements\n    if (this.metrics.loadTimes.length > 50) {\n      this.metrics.loadTimes.shift();\n    }\n    return this;\n  }\n\n  recordError(category, message) {\n    const safeCategory = this.sanitizeString(category);\n    const safeMessage = this.sanitizeString(message);\n    const key = `${safeCategory}:${safeMessage}`;\n    this.metrics.errors[key] = (this.metrics.errors[key] || 0) + 1;\n    return this;\n  }\n\n  getFormattedMetrics() {\n    let output = '';\n    \n    // Page views metrics\n    output += '# HELP frontend_page_views Total number of page views\\n';\n    output += '# TYPE frontend_page_views counter\\n';\n    \n    Object.entries(this.metrics.pageViews).forEach(([page, count]) => {\n      output += `frontend_page_views{page=\"${page}\"} ${count}\\n`;\n    });\n\n    // API calls metrics\n    output += '# HELP frontend_api_calls Total number of API calls\\n';\n    output += '# TYPE frontend_api_calls counter\\n';\n    \n    Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n      const [endpoint, status] = key.split(':');\n      output += `frontend_api_calls{endpoint=\"${endpoint}\",status=\"${status}\"} ${data.count}\\n`;\n    });\n\n    output += '# HELP frontend_api_call_duration_ms Average duration of API calls in ms\\n';\n    output += '# TYPE frontend_api_call_duration_ms gauge\\n';\n    \n    Object.entries(this.metrics.apiCalls).forEach(([key, data]) => {\n      const [endpoint, status] = key.split(':');\n      if (data.count > 0) {\n        const avgDuration = data.totalDuration / data.count;\n        output += `frontend_api_call_duration_ms{endpoint=\"${endpoint}\",status=\"${status}\"} ${avgDuration}\\n`;\n      }\n    });\n\n    // UI interaction metrics\n    output += '# HELP frontend_ui_interactions Total number of UI interactions\\n';\n    output += '# TYPE frontend_ui_interactions counter\\n';\n    \n    Object.entries(this.metrics.uiInteractions).forEach(([key, count]) => {\n      const [component, action] = key.split(':');\n      output += `frontend_ui_interactions{component=\"${component}\",action=\"${action}\"} ${count}\\n`;\n    });\n\n    // Load time metrics\n    if (this.metrics.loadTimes.length > 0) {\n      const average = this.metrics.loadTimes.reduce((a, b) => a + b, 0) / this.metrics.loadTimes.length;\n      output += '# HELP frontend_page_load_time_ms Average page load time in ms\\n';\n      output += '# TYPE frontend_page_load_time_ms gauge\\n';\n      output += `frontend_page_load_time_ms ${average}\\n`;\n    }\n\n    // Error metrics\n    output += '# HELP frontend_errors Total number of errors\\n';\n    output += '# TYPE frontend_errors counter\\n';\n    \n    Object.entries(this.metrics.errors).forEach(([key, count]) => {\n      const [category, message] = key.split(':');\n      output += `frontend_errors{category=\"${category}\",message=\"${message}\"} ${count}\\n`;\n    });\n\n    return output;\n  }\n\n  async reportMetrics() {\n    try {\n      const metricsData = this.getFormattedMetrics();\n\n      // Send metrics to the backend server\n      await axios.post(this.metricsEndpoint, metricsData, {\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        timeout: 5000 // Add timeout to prevent hanging requests\n      });\n\n      // For development, also log metrics to console\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"✅ Frontend metrics sent successfully\");\n        console.log(\"📊 Metrics data:\", metricsData);\n      }\n    } catch (error) {\n      // More detailed error logging\n      if (error.code === 'ECONNREFUSED') {\n        console.error(\"❌ Backend server not running on port 5000\");\n      } else if (error.response) {\n        console.error(\"❌ Failed to report metrics - Server responded with:\", error.response.status, error.response.statusText);\n      } else if (error.request) {\n        console.error(\"❌ Failed to report metrics - No response from server:\", error.message);\n      } else {\n        console.error(\"❌ Failed to report metrics:\", error.message);\n      }\n    }\n  }\n\n  // Method to test connection to backend\n  async testConnection() {\n    try {\n      const response = await axios.get('http://localhost:5000/health', { timeout: 3000 });\n      console.log(\"✅ Backend connection test successful:\", response.data);\n      return true;\n    } catch (error) {\n      console.error(\"❌ Backend connection test failed:\", error.message);\n      return false;\n    }\n  }\n}\n\n// Create an instance of MetricsService\nconst metricsService = new MetricsService();\n\n// Export the instance as the default export\nexport default metricsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}