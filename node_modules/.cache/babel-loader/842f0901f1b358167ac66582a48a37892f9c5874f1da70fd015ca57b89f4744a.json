{"ast":null,"code":"// // src/services/api.service.js\n// import axios from 'axios';\n// import { API_CONFIG, getDirectBaseURL } from '../config/api.config';\n\n// // Create axios instance with proper configuration for CORS\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   },\n//   withCredentials: false // Keep false to avoid CORS preflight issues\n// });\n\n// // Create a separate client for direct API calls (non /api routes)\n// const directApiClient = axios.create({\n//   baseURL: getDirectBaseURL(),\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   },\n//   withCredentials: false\n// });\n\n// // Add request interceptor for logging and debugging\n// const setupInterceptors = (client, clientName = 'API') => {\n//   client.interceptors.request.use(\n//     config => {\n//       const url = config.baseURL + config.url;\n//       console.log(`üöÄ ${clientName} Request: ${config.method?.toUpperCase()} ${url}`);\n\n//       // Add timestamp to help with debugging\n//       config.metadata = { startTime: new Date() };\n\n//       return config;\n//     },\n//     error => {\n//       console.error(`‚ùå ${clientName} Request Error:`, error);\n//       return Promise.reject(error);\n//     }\n//   );\n\n//   client.interceptors.response.use(\n//     response => {\n//       const duration = new Date() - response.config.metadata.startTime;\n//       const url = response.config.baseURL + response.config.url;\n\n//       console.log(`‚úÖ ${clientName} Response: ${response.config.method?.toUpperCase()} ${url} - Status: ${response.status} (${duration}ms)`);\n\n//       return response;\n//     },\n//     error => {\n//       const duration = error.config?.metadata ? new Date() - error.config.metadata.startTime : 0;\n//       const url = error.config ? error.config.baseURL + error.config.url : 'unknown';\n\n//       // Handle different types of errors\n//       if (error.response) {\n//         // Server responded with error status\n//         console.error(`‚ùå ${clientName} Error: ${error.config?.method?.toUpperCase()} ${url} - Status: ${error.response.status} (${duration}ms)`, error.response.data);\n//       } else if (error.request) {\n//         // Request was made but no response received (likely CORS)\n//         console.error(`üîå ${clientName} Network/CORS Error: ${error.config?.method?.toUpperCase()} ${url} - No response received (${duration}ms)`);\n//         console.error('This is likely a CORS issue or server is not running. Request details:', {\n//           url: url,\n//           method: error.config?.method,\n//           timeout: error.config?.timeout,\n//           headers: error.config?.headers\n//         });\n//       } else {\n//         // Something happened in setting up the request\n//         console.error(`‚öôÔ∏è ${clientName} Setup Error: ${error.message}`);\n//       }\n\n//       return Promise.reject(error);\n//     }\n//   );\n// };\n\n// // Setup interceptors for both clients\n// setupInterceptors(apiClient, 'API');\n// setupInterceptors(directApiClient, 'Direct');\n\n// const apiService = {\n//   // Health check methods - Try both direct and API routes\n//   checkHealth: async () => {\n//     try {\n//       console.log('üè• Checking API health...');\n\n//       // Try the /api/health endpoint first\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n//         console.log('‚úÖ Health check successful (API route):', response.data);\n//         return response.data;\n//       } catch (apiError) {\n//         console.log('‚ö†Ô∏è API route failed, trying direct route...');\n\n//         // Fallback to direct /health endpoint\n//         const response = await directApiClient.get('/health');\n//         console.log('‚úÖ Health check successful (Direct route):', response.data);\n//         return response.data;\n//       }\n//     } catch (error) {\n//       console.error(\"‚ùå Health check failed:\", error);\n\n//       // Provide more specific error handling for CORS issues\n//       if (error.code === 'ERR_NETWORK' || !error.response) {\n//         throw new Error('Network error - Backend server might not be running or CORS issue. Check if backend server is running on http://localhost:5000');\n//       }\n\n//       throw new Error(error.response?.data?.message || 'Health check failed');\n//     }\n//   },\n\n//   // Movie methods\n//   getMovies: async () => {\n//     try {\n//       console.log('üé¨ Fetching movies...');\n//       let response;\n//       try {\n//         response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n//       } catch (apiError) {\n//         console.log('‚ö†Ô∏è API route failed, trying direct route...');\n//         response = await directApiClient.get('/movies');\n//       }\n//       console.log('‚úÖ Movies fetched successfully:', response.data?.length || 'unknown count');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to fetch movies:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n//     }\n//   },\n\n//   getMovie: async (id) => {\n//     try {\n//       console.log(`üé¨ Fetching movie with ID: ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.get(`/movies/${id}`);\n//       }\n//       console.log(`‚úÖ Movie ${id} fetched successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to fetch movie ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to fetch movie ${id}`);\n//     }\n//   },\n\n//   addMovie: async (movieData) => {\n//     try {\n//       console.log('üé¨ Adding new movie:', movieData?.title || 'unknown title');\n//       let response;\n//       try {\n//         response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n//       } catch (apiError) {\n//         response = await directApiClient.post('/movies/add-movie', movieData);\n//       }\n//       console.log('‚úÖ Movie added successfully');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to add movie:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to add movie');\n//     }\n//   },\n\n//   updateMovie: async (id, movieData) => {\n//     try {\n//       console.log(`üé¨ Updating movie ${id}:`, movieData?.title || 'unknown title');\n//       let response;\n//       try {\n//         response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/edit-movie/${id}`, movieData);\n//       } catch (apiError) {\n//         response = await directApiClient.put(`/movies/edit-movie/${id}`, movieData);\n//       }\n//       console.log(`‚úÖ Movie ${id} updated successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to update movie ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to update movie ${id}`);\n//     }\n//   },\n\n//   deleteMovie: async (id) => {\n//     try {\n//       console.log(`üé¨ Deleting movie ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/delete-movie/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(`/movies/delete-movie/${id}`);\n//       }\n//       console.log(`‚úÖ Movie ${id} deleted successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to delete movie ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to delete movie ${id}`);\n//     }\n//   },\n\n//   // Actor methods\n//   getActors: async () => {\n//     try {\n//       console.log('üé≠ Fetching actors...');\n//       let response;\n//       try {\n//         response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n//       } catch (apiError) {\n//         response = await directApiClient.get('/actors');\n//       }\n//       console.log('‚úÖ Actors fetched successfully:', response.data?.length || 'unknown count');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to fetch actors:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n//     }\n//   },\n\n//   getActor: async (id) => {\n//     try {\n//       console.log(`üé≠ Fetching actor with ID: ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(`${API_CONFIG.ENDPOINTS.ACTORS}/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.get(`/actors/${id}`);\n//       }\n//       console.log(`‚úÖ Actor ${id} fetched successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to fetch actor ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to fetch actor ${id}`);\n//     }\n//   },\n\n//   addActor: async (actorData) => {\n//     try {\n//       console.log('üé≠ Adding new actor:', actorData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n//       } catch (apiError) {\n//         response = await directApiClient.post('/actors/add-actor', actorData);\n//       }\n//       console.log('‚úÖ Actor added successfully');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to add actor:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to add actor');\n//     }\n//   },\n\n//   updateActor: async (id, actorData) => {\n//     try {\n//       console.log(`üé≠ Updating actor ${id}:`, actorData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.put(`${API_CONFIG.ENDPOINTS.ACTORS}/edit-actor/${id}`, actorData);\n//       } catch (apiError) {\n//         response = await directApiClient.put(`/actors/edit-actor/${id}`, actorData);\n//       }\n//       console.log(`‚úÖ Actor ${id} updated successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to update actor ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to update actor ${id}`);\n//     }\n//   },\n\n//   deleteActor: async (id) => {\n//     try {\n//       console.log(`üé≠ Deleting actor ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.ACTORS}/delete-actor/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(`/actors/delete-actor/${id}`);\n//       }\n//       console.log(`‚úÖ Actor ${id} deleted successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to delete actor ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to delete actor ${id}`);\n//     }\n//   },\n\n//   // Producer methods\n//   getProducers: async () => {\n//     try {\n//       console.log('üéØ Fetching producers...');\n//       let response;\n//       try {\n//         response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n//       } catch (apiError) {\n//         response = await directApiClient.get('/producers');\n//       }\n//       console.log('‚úÖ Producers fetched successfully:', response.data?.length || 'unknown count');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to fetch producers:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n//     }\n//   },\n\n//   getProducer: async (id) => {\n//     try {\n//       console.log(`üéØ Fetching producer with ID: ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(`${API_CONFIG.ENDPOINTS.PRODUCERS}/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.get(`/producers/${id}`);\n//       }\n//       console.log(`‚úÖ Producer ${id} fetched successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to fetch producer ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to fetch producer ${id}`);\n//     }\n//   },\n\n//   addProducer: async (producerData) => {\n//     try {\n//       console.log('üéØ Adding new producer:', producerData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n//       } catch (apiError) {\n//         response = await directApiClient.post('/producers/add-producer', producerData);\n//       }\n//       console.log('‚úÖ Producer added successfully');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to add producer:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to add producer');\n//     }\n//   },\n\n//   updateProducer: async (id, producerData) => {\n//     try {\n//       console.log(`üéØ Updating producer ${id}:`, producerData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.put(`${API_CONFIG.ENDPOINTS.PRODUCERS}/edit-producer/${id}`, producerData);\n//       } catch (apiError) {\n//         response = await directApiClient.put(`/producers/edit-producer/${id}`, producerData);\n//       }\n//       console.log(`‚úÖ Producer ${id} updated successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to update producer ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to update producer ${id}`);\n//     }\n//   },\n\n//   deleteProducer: async (id) => {\n//     try {\n//       console.log(`üéØ Deleting producer ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.PRODUCERS}/delete-producer/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(`/producers/delete-producer/${id}`);\n//       }\n//       console.log(`‚úÖ Producer ${id} deleted successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to delete producer ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to delete producer ${id}`);\n//     }\n//   },\n\n//   // Generic HTTP methods with fallback\n//   get: async (endpoint) => {\n//     try {\n//       console.log(`üì° GET request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(endpoint);\n//       } catch (apiError) {\n//         response = await directApiClient.get(endpoint);\n//       }\n//       console.log(`‚úÖ GET request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå GET request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n//     }\n//   },\n\n//   post: async (endpoint, data) => {\n//     try {\n//       console.log(`üì° POST request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.post(endpoint, data);\n//       } catch (apiError) {\n//         response = await directApiClient.post(endpoint, data);\n//       }\n//       console.log(`‚úÖ POST request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå POST request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to post data');\n//     }\n//   },\n\n//   put: async (endpoint, data) => {\n//     try {\n//       console.log(`üì° PUT request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.put(endpoint, data);\n//       } catch (apiError) {\n//         response = await directApiClient.put(endpoint, data);\n//       }\n//       console.log(`‚úÖ PUT request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå PUT request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to update data');\n//     }\n//   },\n\n//   delete: async (endpoint) => {\n//     try {\n//       console.log(`üì° DELETE request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(endpoint);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(endpoint);\n//       }\n//       console.log(`‚úÖ DELETE request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå DELETE request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to delete data');\n//     }\n//   }\n// };\n\n// export default apiService;\n// src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG, getDirectBaseURL, getAPIBaseURL, logAPIConfig } from '../config/api.config';\n\n// Log configuration on startup\nlogAPIConfig();\n\n// Create axios instance with proper configuration for CORS\nconst apiClient = axios.create({\n  baseURL: getAPIBaseURL(),\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Create a separate client for direct API calls (non /api routes)\nconst directApiClient = axios.create({\n  baseURL: getDirectBaseURL(),\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Enhanced request interceptor with retry logic\nconst setupInterceptors = (client, clientName = 'API') => {\n  client.interceptors.request.use(config => {\n    var _config$method;\n    const fullUrl = config.baseURL + config.url;\n    console.log(`üöÄ ${clientName} Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${fullUrl}`);\n    config.metadata = {\n      startTime: new Date()\n    };\n    return config;\n  }, error => {\n    console.error(`‚ùå ${clientName} Request Error:`, error);\n    return Promise.reject(error);\n  });\n  client.interceptors.response.use(response => {\n    var _response$config$meth;\n    const duration = new Date() - response.config.metadata.startTime;\n    const fullUrl = response.config.baseURL + response.config.url;\n    console.log(`‚úÖ ${clientName} Response: ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${fullUrl} - Status: ${response.status} (${duration}ms)`);\n    return response;\n  }, error => {\n    var _error$config;\n    const duration = (_error$config = error.config) !== null && _error$config !== void 0 && _error$config.metadata ? new Date() - error.config.metadata.startTime : 0;\n    const fullUrl = error.config ? error.config.baseURL + error.config.url : 'unknown';\n    if (error.response) {\n      var _error$config2, _error$config2$method;\n      console.error(`‚ùå ${clientName} Error: ${(_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : (_error$config2$method = _error$config2.method) === null || _error$config2$method === void 0 ? void 0 : _error$config2$method.toUpperCase()} ${fullUrl} - Status: ${error.response.status} (${duration}ms)`);\n      console.error('Response data:', error.response.data);\n    } else if (error.request) {\n      var _error$config3, _error$config3$method, _error$config4, _error$config5;\n      console.error(`üîå ${clientName} Network Error: ${(_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : (_error$config3$method = _error$config3.method) === null || _error$config3$method === void 0 ? void 0 : _error$config3$method.toUpperCase()} ${fullUrl} - No response (${duration}ms)`);\n      console.error('Possible CORS issue or server not running. Request details:', {\n        url: fullUrl,\n        method: (_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.method,\n        timeout: (_error$config5 = error.config) === null || _error$config5 === void 0 ? void 0 : _error$config5.timeout\n      });\n    } else {\n      console.error(`‚öôÔ∏è ${clientName} Setup Error: ${error.message}`);\n    }\n    return Promise.reject(error);\n  });\n};\n\n// Setup interceptors for both clients\nsetupInterceptors(apiClient, 'API');\nsetupInterceptors(directApiClient, 'Direct');\n\n// Enhanced request method with automatic fallback\nconst makeRequest = async (method, endpoint, data = null, options = {}) => {\n  const {\n    useDirectFirst = false,\n    retries = API_CONFIG.RETRY_ATTEMPTS\n  } = options;\n  const clients = useDirectFirst ? [directApiClient, apiClient] : [apiClient, directApiClient];\n  const clientNames = useDirectFirst ? ['Direct', 'API'] : ['API', 'Direct'];\n  for (let clientIndex = 0; clientIndex < clients.length; clientIndex++) {\n    const client = clients[clientIndex];\n    const clientName = clientNames[clientIndex];\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        console.log(`üîÑ Attempting ${method.toUpperCase()} ${endpoint} via ${clientName} client (attempt ${attempt + 1})`);\n        let response;\n        switch (method.toLowerCase()) {\n          case 'get':\n            response = await client.get(endpoint);\n            break;\n          case 'post':\n            response = await client.post(endpoint, data);\n            break;\n          case 'put':\n            response = await client.put(endpoint, data);\n            break;\n          case 'delete':\n            response = await client.delete(endpoint);\n            break;\n          default:\n            throw new Error(`Unsupported HTTP method: ${method}`);\n        }\n        console.log(`‚úÖ ${method.toUpperCase()} ${endpoint} successful via ${clientName}`);\n        return response.data;\n      } catch (error) {\n        console.warn(`‚ö†Ô∏è ${method.toUpperCase()} ${endpoint} failed via ${clientName} (attempt ${attempt + 1}):`, error.message);\n\n        // If this is the last attempt with the last client, throw the error\n        if (clientIndex === clients.length - 1 && attempt === retries) {\n          throw error;\n        }\n\n        // If not the last attempt with current client, wait before retry\n        if (attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));\n        }\n      }\n    }\n  }\n};\nconst apiService = {\n  // Health check - Enhanced with better error handling\n  checkHealth: async () => {\n    try {\n      console.log('üè• Checking API health...');\n\n      // Try API route first, then direct route\n      const healthData = await makeRequest('get', API_CONFIG.ENDPOINTS.HEALTH);\n      console.log('‚úÖ Health check successful:', healthData);\n      return healthData;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error('‚ùå Health check failed:', error);\n\n      // Provide specific error messages based on error type\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        const backendUrl = getDirectBaseURL();\n        throw new Error(`Cannot connect to backend server at ${backendUrl}. Please ensure the backend is running on port 5000.`);\n      }\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        throw new Error('Health check endpoint not found. Backend API may not be properly configured.');\n      }\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || `Health check failed: ${error.message}`);\n    }\n  },\n  // Movie methods\n  getMovies: async () => {\n    try {\n      console.log('üé¨ Fetching movies...');\n      const movies = await makeRequest('get', API_CONFIG.ENDPOINTS.MOVIES);\n      console.log(`‚úÖ Fetched ${(movies === null || movies === void 0 ? void 0 : movies.length) || 0} movies`);\n      return movies;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('‚ùå Failed to fetch movies:', error);\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch movies');\n    }\n  },\n  getMovie: async id => {\n    try {\n      console.log(`üé¨ Fetching movie with ID: ${id}`);\n      const movie = await makeRequest('get', `${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      console.log(`‚úÖ Movie ${id} fetched successfully`);\n      return movie;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error(`‚ùå Failed to fetch movie ${id}:`, error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || `Failed to fetch movie ${id}`);\n    }\n  },\n  addMovie: async movieData => {\n    try {\n      console.log('üé¨ Adding new movie:', (movieData === null || movieData === void 0 ? void 0 : movieData.title) || 'unknown title');\n      const result = await makeRequest('post', `${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n      console.log('‚úÖ Movie added successfully');\n      return result;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('‚ùå Failed to add movie:', error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to add movie');\n    }\n  },\n  updateMovie: async (id, movieData) => {\n    try {\n      console.log(`üé¨ Updating movie ${id}:`, (movieData === null || movieData === void 0 ? void 0 : movieData.title) || 'unknown title');\n      const result = await makeRequest('put', `${API_CONFIG.ENDPOINTS.MOVIES}/edit-movie/${id}`, movieData);\n      console.log(`‚úÖ Movie ${id} updated successfully`);\n      return result;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error(`‚ùå Failed to update movie ${id}:`, error);\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || `Failed to update movie ${id}`);\n    }\n  },\n  deleteMovie: async id => {\n    try {\n      console.log(`üé¨ Deleting movie ${id}`);\n      const result = await makeRequest('delete', `${API_CONFIG.ENDPOINTS.MOVIES}/delete-movie/${id}`);\n      console.log(`‚úÖ Movie ${id} deleted successfully`);\n      return result;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error(`‚ùå Failed to delete movie ${id}:`, error);\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || `Failed to delete movie ${id}`);\n    }\n  },\n  // Actor methods\n  getActors: async () => {\n    try {\n      console.log('üé≠ Fetching actors...');\n      const actors = await makeRequest('get', API_CONFIG.ENDPOINTS.ACTORS);\n      console.log(`‚úÖ Fetched ${(actors === null || actors === void 0 ? void 0 : actors.length) || 0} actors`);\n      return actors;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('‚ùå Failed to fetch actors:', error);\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch actors');\n    }\n  },\n  getActor: async id => {\n    try {\n      console.log(`üé≠ Fetching actor with ID: ${id}`);\n      const actor = await makeRequest('get', `${API_CONFIG.ENDPOINTS.ACTORS}/${id}`);\n      console.log(`‚úÖ Actor ${id} fetched successfully`);\n      return actor;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error(`‚ùå Failed to fetch actor ${id}:`, error);\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || `Failed to fetch actor ${id}`);\n    }\n  },\n  addActor: async actorData => {\n    try {\n      console.log('üé≠ Adding new actor:', (actorData === null || actorData === void 0 ? void 0 : actorData.name) || 'unknown name');\n      const result = await makeRequest('post', `${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n      console.log('‚úÖ Actor added successfully');\n      return result;\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error('‚ùå Failed to add actor:', error);\n      throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to add actor');\n    }\n  },\n  updateActor: async (id, actorData) => {\n    try {\n      console.log(`üé≠ Updating actor ${id}:`, (actorData === null || actorData === void 0 ? void 0 : actorData.name) || 'unknown name');\n      const result = await makeRequest('put', `${API_CONFIG.ENDPOINTS.ACTORS}/edit-actor/${id}`, actorData);\n      console.log(`‚úÖ Actor ${id} updated successfully`);\n      return result;\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      console.error(`‚ùå Failed to update actor ${id}:`, error);\n      throw new Error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || `Failed to update actor ${id}`);\n    }\n  },\n  deleteActor: async id => {\n    try {\n      console.log(`üé≠ Deleting actor ${id}`);\n      const result = await makeRequest('delete', `${API_CONFIG.ENDPOINTS.ACTORS}/delete-actor/${id}`);\n      console.log(`‚úÖ Actor ${id} deleted successfully`);\n      return result;\n    } catch (error) {\n      var _error$response12, _error$response12$dat;\n      console.error(`‚ùå Failed to delete actor ${id}:`, error);\n      throw new Error(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.message) || `Failed to delete actor ${id}`);\n    }\n  },\n  // Producer methods\n  getProducers: async () => {\n    try {\n      console.log('üéØ Fetching producers...');\n      const producers = await makeRequest('get', API_CONFIG.ENDPOINTS.PRODUCERS);\n      console.log(`‚úÖ Fetched ${(producers === null || producers === void 0 ? void 0 : producers.length) || 0} producers`);\n      return producers;\n    } catch (error) {\n      var _error$response13, _error$response13$dat;\n      console.error('‚ùå Failed to fetch producers:', error);\n      throw new Error(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.message) || 'Failed to fetch producers');\n    }\n  },\n  getProducer: async id => {\n    try {\n      console.log(`üéØ Fetching producer with ID: ${id}`);\n      const producer = await makeRequest('get', `${API_CONFIG.ENDPOINTS.PRODUCERS}/${id}`);\n      console.log(`‚úÖ Producer ${id} fetched successfully`);\n      return producer;\n    } catch (error) {\n      var _error$response14, _error$response14$dat;\n      console.error(`‚ùå Failed to fetch producer ${id}:`, error);\n      throw new Error(((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.message) || `Failed to fetch producer ${id}`);\n    }\n  },\n  addProducer: async producerData => {\n    try {\n      console.log('üéØ Adding new producer:', (producerData === null || producerData === void 0 ? void 0 : producerData.name) || 'unknown name');\n      const result = await makeRequest('post', `${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n      console.log('‚úÖ Producer added successfully');\n      return result;\n    } catch (error) {\n      var _error$response15, _error$response15$dat;\n      console.error('‚ùå Failed to add producer:', error);\n      throw new Error(((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : (_error$response15$dat = _error$response15.data) === null || _error$response15$dat === void 0 ? void 0 : _error$response15$dat.message) || 'Failed to add producer');\n    }\n  },\n  updateProducer: async (id, producerData) => {\n    try {\n      console.log(`üéØ Updating producer ${id}:`, (producerData === null || producerData === void 0 ? void 0 : producerData.name) || 'unknown name');\n      const result = await makeRequest('put', `${API_CONFIG.ENDPOINTS.PRODUCERS}/edit-producer/${id}`, producerData);\n      console.log(`‚úÖ Producer ${id} updated successfully`);\n      return result;\n    } catch (error) {\n      var _error$response16, _error$response16$dat;\n      console.error(`‚ùå Failed to update producer ${id}:`, error);\n      throw new Error(((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.message) || `Failed to update producer ${id}`);\n    }\n  },\n  deleteProducer: async id => {\n    try {\n      console.log(`üéØ Deleting producer ${id}`);\n      const result = await makeRequest('delete', `${API_CONFIG.ENDPOINTS.PRODUCERS}/delete-producer/${id}`);\n      console.log(`‚úÖ Producer ${id} deleted successfully`);\n      return result;\n    } catch (error) {\n      var _error$response17, _error$response17$dat;\n      console.error(`‚ùå Failed to delete producer ${id}:`, error);\n      throw new Error(((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : (_error$response17$dat = _error$response17.data) === null || _error$response17$dat === void 0 ? void 0 : _error$response17$dat.message) || `Failed to delete producer ${id}`);\n    }\n  },\n  // Generic HTTP methods with enhanced error handling\n  get: async (endpoint, options = {}) => {\n    return await makeRequest('get', endpoint, null, options);\n  },\n  post: async (endpoint, data, options = {}) => {\n    return await makeRequest('post', endpoint, data, options);\n  },\n  put: async (endpoint, data, options = {}) => {\n    return await makeRequest('put', endpoint, data, options);\n  },\n  delete: async (endpoint, options = {}) => {\n    return await makeRequest('delete', endpoint, null, options);\n  },\n  // Utility method to test connectivity\n  testConnectivity: async () => {\n    try {\n      console.log('üîç Testing API connectivity...');\n      const tests = [{\n        name: 'Direct Health Check',\n        url: `${getDirectBaseURL()}/health`\n      }, {\n        name: 'API Health Check',\n        url: `${getAPIBaseURL()}/health`\n      }, {\n        name: 'Root Endpoint',\n        url: `${getDirectBaseURL()}/`\n      }, {\n        name: 'API Root',\n        url: `${getAPIBaseURL()}/`\n      }];\n      const results = [];\n      for (const test of tests) {\n        try {\n          const response = await fetch(test.url, {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json'\n            }\n          });\n          results.push({\n            name: test.name,\n            url: test.url,\n            status: response.status,\n            ok: response.ok,\n            statusText: response.statusText\n          });\n          console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);\n        } catch (error) {\n          results.push({\n            name: test.name,\n            url: test.url,\n            error: error.message,\n            ok: false\n          });\n          console.error(`‚ùå ${test.name}: ${error.message}`);\n        }\n      }\n      return results;\n    } catch (error) {\n      console.error('‚ùå Connectivity test failed:', error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","getDirectBaseURL","getAPIBaseURL","logAPIConfig","apiClient","create","baseURL","timeout","TIMEOUT","headers","withCredentials","directApiClient","setupInterceptors","client","clientName","interceptors","request","use","config","_config$method","fullUrl","url","console","log","method","toUpperCase","metadata","startTime","Date","error","Promise","reject","response","_response$config$meth","duration","status","_error$config","_error$config2","_error$config2$method","data","_error$config3","_error$config3$method","_error$config4","_error$config5","message","makeRequest","endpoint","options","useDirectFirst","retries","RETRY_ATTEMPTS","clients","clientNames","clientIndex","length","attempt","toLowerCase","get","post","put","delete","Error","warn","resolve","setTimeout","apiService","checkHealth","healthData","ENDPOINTS","HEALTH","_error$response","_error$response2","_error$response2$data","code","backendUrl","getMovies","movies","MOVIES","_error$response3","_error$response3$data","getMovie","id","movie","_error$response4","_error$response4$data","addMovie","movieData","title","result","_error$response5","_error$response5$data","updateMovie","_error$response6","_error$response6$data","deleteMovie","_error$response7","_error$response7$data","getActors","actors","ACTORS","_error$response8","_error$response8$data","getActor","actor","_error$response9","_error$response9$data","addActor","actorData","name","_error$response10","_error$response10$dat","updateActor","_error$response11","_error$response11$dat","deleteActor","_error$response12","_error$response12$dat","getProducers","producers","PRODUCERS","_error$response13","_error$response13$dat","getProducer","producer","_error$response14","_error$response14$dat","addProducer","producerData","_error$response15","_error$response15$dat","updateProducer","_error$response16","_error$response16$dat","deleteProducer","_error$response17","_error$response17$dat","testConnectivity","tests","results","test","fetch","push","ok","statusText"],"sources":["/Users/jayachandran/imdb/imdb-frontend/src/services/api.service.js"],"sourcesContent":["// // src/services/api.service.js\n// import axios from 'axios';\n// import { API_CONFIG, getDirectBaseURL } from '../config/api.config';\n\n// // Create axios instance with proper configuration for CORS\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   },\n//   withCredentials: false // Keep false to avoid CORS preflight issues\n// });\n\n// // Create a separate client for direct API calls (non /api routes)\n// const directApiClient = axios.create({\n//   baseURL: getDirectBaseURL(),\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Accept': 'application/json'\n//   },\n//   withCredentials: false\n// });\n\n// // Add request interceptor for logging and debugging\n// const setupInterceptors = (client, clientName = 'API') => {\n//   client.interceptors.request.use(\n//     config => {\n//       const url = config.baseURL + config.url;\n//       console.log(`üöÄ ${clientName} Request: ${config.method?.toUpperCase()} ${url}`);\n      \n//       // Add timestamp to help with debugging\n//       config.metadata = { startTime: new Date() };\n      \n//       return config;\n//     },\n//     error => {\n//       console.error(`‚ùå ${clientName} Request Error:`, error);\n//       return Promise.reject(error);\n//     }\n//   );\n\n//   client.interceptors.response.use(\n//     response => {\n//       const duration = new Date() - response.config.metadata.startTime;\n//       const url = response.config.baseURL + response.config.url;\n      \n//       console.log(`‚úÖ ${clientName} Response: ${response.config.method?.toUpperCase()} ${url} - Status: ${response.status} (${duration}ms)`);\n      \n//       return response;\n//     },\n//     error => {\n//       const duration = error.config?.metadata ? new Date() - error.config.metadata.startTime : 0;\n//       const url = error.config ? error.config.baseURL + error.config.url : 'unknown';\n      \n//       // Handle different types of errors\n//       if (error.response) {\n//         // Server responded with error status\n//         console.error(`‚ùå ${clientName} Error: ${error.config?.method?.toUpperCase()} ${url} - Status: ${error.response.status} (${duration}ms)`, error.response.data);\n//       } else if (error.request) {\n//         // Request was made but no response received (likely CORS)\n//         console.error(`üîå ${clientName} Network/CORS Error: ${error.config?.method?.toUpperCase()} ${url} - No response received (${duration}ms)`);\n//         console.error('This is likely a CORS issue or server is not running. Request details:', {\n//           url: url,\n//           method: error.config?.method,\n//           timeout: error.config?.timeout,\n//           headers: error.config?.headers\n//         });\n//       } else {\n//         // Something happened in setting up the request\n//         console.error(`‚öôÔ∏è ${clientName} Setup Error: ${error.message}`);\n//       }\n      \n//       return Promise.reject(error);\n//     }\n//   );\n// };\n\n// // Setup interceptors for both clients\n// setupInterceptors(apiClient, 'API');\n// setupInterceptors(directApiClient, 'Direct');\n\n// const apiService = {\n//   // Health check methods - Try both direct and API routes\n//   checkHealth: async () => {\n//     try {\n//       console.log('üè• Checking API health...');\n      \n//       // Try the /api/health endpoint first\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n//         console.log('‚úÖ Health check successful (API route):', response.data);\n//         return response.data;\n//       } catch (apiError) {\n//         console.log('‚ö†Ô∏è API route failed, trying direct route...');\n        \n//         // Fallback to direct /health endpoint\n//         const response = await directApiClient.get('/health');\n//         console.log('‚úÖ Health check successful (Direct route):', response.data);\n//         return response.data;\n//       }\n//     } catch (error) {\n//       console.error(\"‚ùå Health check failed:\", error);\n      \n//       // Provide more specific error handling for CORS issues\n//       if (error.code === 'ERR_NETWORK' || !error.response) {\n//         throw new Error('Network error - Backend server might not be running or CORS issue. Check if backend server is running on http://localhost:5000');\n//       }\n      \n//       throw new Error(error.response?.data?.message || 'Health check failed');\n//     }\n//   },\n\n//   // Movie methods\n//   getMovies: async () => {\n//     try {\n//       console.log('üé¨ Fetching movies...');\n//       let response;\n//       try {\n//         response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n//       } catch (apiError) {\n//         console.log('‚ö†Ô∏è API route failed, trying direct route...');\n//         response = await directApiClient.get('/movies');\n//       }\n//       console.log('‚úÖ Movies fetched successfully:', response.data?.length || 'unknown count');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to fetch movies:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n//     }\n//   },\n\n//   getMovie: async (id) => {\n//     try {\n//       console.log(`üé¨ Fetching movie with ID: ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.get(`/movies/${id}`);\n//       }\n//       console.log(`‚úÖ Movie ${id} fetched successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to fetch movie ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to fetch movie ${id}`);\n//     }\n//   },\n\n//   addMovie: async (movieData) => {\n//     try {\n//       console.log('üé¨ Adding new movie:', movieData?.title || 'unknown title');\n//       let response;\n//       try {\n//         response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n//       } catch (apiError) {\n//         response = await directApiClient.post('/movies/add-movie', movieData);\n//       }\n//       console.log('‚úÖ Movie added successfully');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to add movie:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to add movie');\n//     }\n//   },\n\n//   updateMovie: async (id, movieData) => {\n//     try {\n//       console.log(`üé¨ Updating movie ${id}:`, movieData?.title || 'unknown title');\n//       let response;\n//       try {\n//         response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/edit-movie/${id}`, movieData);\n//       } catch (apiError) {\n//         response = await directApiClient.put(`/movies/edit-movie/${id}`, movieData);\n//       }\n//       console.log(`‚úÖ Movie ${id} updated successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to update movie ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to update movie ${id}`);\n//     }\n//   },\n\n//   deleteMovie: async (id) => {\n//     try {\n//       console.log(`üé¨ Deleting movie ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/delete-movie/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(`/movies/delete-movie/${id}`);\n//       }\n//       console.log(`‚úÖ Movie ${id} deleted successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to delete movie ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to delete movie ${id}`);\n//     }\n//   },\n\n//   // Actor methods\n//   getActors: async () => {\n//     try {\n//       console.log('üé≠ Fetching actors...');\n//       let response;\n//       try {\n//         response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n//       } catch (apiError) {\n//         response = await directApiClient.get('/actors');\n//       }\n//       console.log('‚úÖ Actors fetched successfully:', response.data?.length || 'unknown count');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to fetch actors:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n//     }\n//   },\n\n//   getActor: async (id) => {\n//     try {\n//       console.log(`üé≠ Fetching actor with ID: ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(`${API_CONFIG.ENDPOINTS.ACTORS}/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.get(`/actors/${id}`);\n//       }\n//       console.log(`‚úÖ Actor ${id} fetched successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to fetch actor ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to fetch actor ${id}`);\n//     }\n//   },\n\n//   addActor: async (actorData) => {\n//     try {\n//       console.log('üé≠ Adding new actor:', actorData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n//       } catch (apiError) {\n//         response = await directApiClient.post('/actors/add-actor', actorData);\n//       }\n//       console.log('‚úÖ Actor added successfully');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to add actor:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to add actor');\n//     }\n//   },\n\n//   updateActor: async (id, actorData) => {\n//     try {\n//       console.log(`üé≠ Updating actor ${id}:`, actorData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.put(`${API_CONFIG.ENDPOINTS.ACTORS}/edit-actor/${id}`, actorData);\n//       } catch (apiError) {\n//         response = await directApiClient.put(`/actors/edit-actor/${id}`, actorData);\n//       }\n//       console.log(`‚úÖ Actor ${id} updated successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to update actor ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to update actor ${id}`);\n//     }\n//   },\n\n//   deleteActor: async (id) => {\n//     try {\n//       console.log(`üé≠ Deleting actor ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.ACTORS}/delete-actor/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(`/actors/delete-actor/${id}`);\n//       }\n//       console.log(`‚úÖ Actor ${id} deleted successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to delete actor ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to delete actor ${id}`);\n//     }\n//   },\n\n//   // Producer methods\n//   getProducers: async () => {\n//     try {\n//       console.log('üéØ Fetching producers...');\n//       let response;\n//       try {\n//         response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n//       } catch (apiError) {\n//         response = await directApiClient.get('/producers');\n//       }\n//       console.log('‚úÖ Producers fetched successfully:', response.data?.length || 'unknown count');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to fetch producers:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n//     }\n//   },\n\n//   getProducer: async (id) => {\n//     try {\n//       console.log(`üéØ Fetching producer with ID: ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(`${API_CONFIG.ENDPOINTS.PRODUCERS}/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.get(`/producers/${id}`);\n//       }\n//       console.log(`‚úÖ Producer ${id} fetched successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to fetch producer ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to fetch producer ${id}`);\n//     }\n//   },\n\n//   addProducer: async (producerData) => {\n//     try {\n//       console.log('üéØ Adding new producer:', producerData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n//       } catch (apiError) {\n//         response = await directApiClient.post('/producers/add-producer', producerData);\n//       }\n//       console.log('‚úÖ Producer added successfully');\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to add producer:\", error);\n//       throw new Error(error.response?.data?.message || 'Failed to add producer');\n//     }\n//   },\n\n//   updateProducer: async (id, producerData) => {\n//     try {\n//       console.log(`üéØ Updating producer ${id}:`, producerData?.name || 'unknown name');\n//       let response;\n//       try {\n//         response = await apiClient.put(`${API_CONFIG.ENDPOINTS.PRODUCERS}/edit-producer/${id}`, producerData);\n//       } catch (apiError) {\n//         response = await directApiClient.put(`/producers/edit-producer/${id}`, producerData);\n//       }\n//       console.log(`‚úÖ Producer ${id} updated successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to update producer ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to update producer ${id}`);\n//     }\n//   },\n\n//   deleteProducer: async (id) => {\n//     try {\n//       console.log(`üéØ Deleting producer ${id}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.PRODUCERS}/delete-producer/${id}`);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(`/producers/delete-producer/${id}`);\n//       }\n//       console.log(`‚úÖ Producer ${id} deleted successfully`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå Failed to delete producer ${id}:`, error);\n//       throw new Error(error.response?.data?.message || `Failed to delete producer ${id}`);\n//     }\n//   },\n\n//   // Generic HTTP methods with fallback\n//   get: async (endpoint) => {\n//     try {\n//       console.log(`üì° GET request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.get(endpoint);\n//       } catch (apiError) {\n//         response = await directApiClient.get(endpoint);\n//       }\n//       console.log(`‚úÖ GET request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå GET request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n//     }\n//   },\n\n//   post: async (endpoint, data) => {\n//     try {\n//       console.log(`üì° POST request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.post(endpoint, data);\n//       } catch (apiError) {\n//         response = await directApiClient.post(endpoint, data);\n//       }\n//       console.log(`‚úÖ POST request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå POST request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to post data');\n//     }\n//   },\n\n//   put: async (endpoint, data) => {\n//     try {\n//       console.log(`üì° PUT request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.put(endpoint, data);\n//       } catch (apiError) {\n//         response = await directApiClient.put(endpoint, data);\n//       }\n//       console.log(`‚úÖ PUT request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå PUT request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to update data');\n//     }\n//   },\n\n//   delete: async (endpoint) => {\n//     try {\n//       console.log(`üì° DELETE request to: ${endpoint}`);\n//       let response;\n//       try {\n//         response = await apiClient.delete(endpoint);\n//       } catch (apiError) {\n//         response = await directApiClient.delete(endpoint);\n//       }\n//       console.log(`‚úÖ DELETE request successful for ${endpoint}`);\n//       return response.data;\n//     } catch (error) {\n//       console.error(`‚ùå DELETE request failed for ${endpoint}:`, error);\n//       throw new Error(error.response?.data?.message || 'Failed to delete data');\n//     }\n//   }\n// };\n\n// export default apiService;\n// src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG, getDirectBaseURL, getAPIBaseURL, logAPIConfig } from '../config/api.config';\n\n// Log configuration on startup\nlogAPIConfig();\n\n// Create axios instance with proper configuration for CORS\nconst apiClient = axios.create({\n  baseURL: getAPIBaseURL(),\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Create a separate client for direct API calls (non /api routes)\nconst directApiClient = axios.create({\n  baseURL: getDirectBaseURL(),\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Enhanced request interceptor with retry logic\nconst setupInterceptors = (client, clientName = 'API') => {\n  client.interceptors.request.use(\n    config => {\n      const fullUrl = config.baseURL + config.url;\n      console.log(`üöÄ ${clientName} Request: ${config.method?.toUpperCase()} ${fullUrl}`);\n      \n      config.metadata = { startTime: new Date() };\n      return config;\n    },\n    error => {\n      console.error(`‚ùå ${clientName} Request Error:`, error);\n      return Promise.reject(error);\n    }\n  );\n\n  client.interceptors.response.use(\n    response => {\n      const duration = new Date() - response.config.metadata.startTime;\n      const fullUrl = response.config.baseURL + response.config.url;\n      \n      console.log(`‚úÖ ${clientName} Response: ${response.config.method?.toUpperCase()} ${fullUrl} - Status: ${response.status} (${duration}ms)`);\n      return response;\n    },\n    error => {\n      const duration = error.config?.metadata ? new Date() - error.config.metadata.startTime : 0;\n      const fullUrl = error.config ? error.config.baseURL + error.config.url : 'unknown';\n      \n      if (error.response) {\n        console.error(`‚ùå ${clientName} Error: ${error.config?.method?.toUpperCase()} ${fullUrl} - Status: ${error.response.status} (${duration}ms)`);\n        console.error('Response data:', error.response.data);\n      } else if (error.request) {\n        console.error(`üîå ${clientName} Network Error: ${error.config?.method?.toUpperCase()} ${fullUrl} - No response (${duration}ms)`);\n        console.error('Possible CORS issue or server not running. Request details:', {\n          url: fullUrl,\n          method: error.config?.method,\n          timeout: error.config?.timeout\n        });\n      } else {\n        console.error(`‚öôÔ∏è ${clientName} Setup Error: ${error.message}`);\n      }\n      \n      return Promise.reject(error);\n    }\n  );\n};\n\n// Setup interceptors for both clients\nsetupInterceptors(apiClient, 'API');\nsetupInterceptors(directApiClient, 'Direct');\n\n// Enhanced request method with automatic fallback\nconst makeRequest = async (method, endpoint, data = null, options = {}) => {\n  const { useDirectFirst = false, retries = API_CONFIG.RETRY_ATTEMPTS } = options;\n  \n  const clients = useDirectFirst ? [directApiClient, apiClient] : [apiClient, directApiClient];\n  const clientNames = useDirectFirst ? ['Direct', 'API'] : ['API', 'Direct'];\n  \n  for (let clientIndex = 0; clientIndex < clients.length; clientIndex++) {\n    const client = clients[clientIndex];\n    const clientName = clientNames[clientIndex];\n    \n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        console.log(`üîÑ Attempting ${method.toUpperCase()} ${endpoint} via ${clientName} client (attempt ${attempt + 1})`);\n        \n        let response;\n        switch (method.toLowerCase()) {\n          case 'get':\n            response = await client.get(endpoint);\n            break;\n          case 'post':\n            response = await client.post(endpoint, data);\n            break;\n          case 'put':\n            response = await client.put(endpoint, data);\n            break;\n          case 'delete':\n            response = await client.delete(endpoint);\n            break;\n          default:\n            throw new Error(`Unsupported HTTP method: ${method}`);\n        }\n        \n        console.log(`‚úÖ ${method.toUpperCase()} ${endpoint} successful via ${clientName}`);\n        return response.data;\n        \n      } catch (error) {\n        console.warn(`‚ö†Ô∏è ${method.toUpperCase()} ${endpoint} failed via ${clientName} (attempt ${attempt + 1}):`, error.message);\n        \n        // If this is the last attempt with the last client, throw the error\n        if (clientIndex === clients.length - 1 && attempt === retries) {\n          throw error;\n        }\n        \n        // If not the last attempt with current client, wait before retry\n        if (attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));\n        }\n      }\n    }\n  }\n};\n\nconst apiService = {\n  // Health check - Enhanced with better error handling\n  checkHealth: async () => {\n    try {\n      console.log('üè• Checking API health...');\n      \n      // Try API route first, then direct route\n      const healthData = await makeRequest('get', API_CONFIG.ENDPOINTS.HEALTH);\n      console.log('‚úÖ Health check successful:', healthData);\n      return healthData;\n      \n    } catch (error) {\n      console.error('‚ùå Health check failed:', error);\n      \n      // Provide specific error messages based on error type\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        const backendUrl = getDirectBaseURL();\n        throw new Error(`Cannot connect to backend server at ${backendUrl}. Please ensure the backend is running on port 5000.`);\n      }\n      \n      if (error.response?.status === 404) {\n        throw new Error('Health check endpoint not found. Backend API may not be properly configured.');\n      }\n      \n      throw new Error(error.response?.data?.message || `Health check failed: ${error.message}`);\n    }\n  },\n\n  // Movie methods\n  getMovies: async () => {\n    try {\n      console.log('üé¨ Fetching movies...');\n      const movies = await makeRequest('get', API_CONFIG.ENDPOINTS.MOVIES);\n      console.log(`‚úÖ Fetched ${movies?.length || 0} movies`);\n      return movies;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch movies:', error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n    }\n  },\n\n  getMovie: async (id) => {\n    try {\n      console.log(`üé¨ Fetching movie with ID: ${id}`);\n      const movie = await makeRequest('get', `${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      console.log(`‚úÖ Movie ${id} fetched successfully`);\n      return movie;\n    } catch (error) {\n      console.error(`‚ùå Failed to fetch movie ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to fetch movie ${id}`);\n    }\n  },\n\n  addMovie: async (movieData) => {\n    try {\n      console.log('üé¨ Adding new movie:', movieData?.title || 'unknown title');\n      const result = await makeRequest('post', `${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n      console.log('‚úÖ Movie added successfully');\n      return result;\n    } catch (error) {\n      console.error('‚ùå Failed to add movie:', error);\n      throw new Error(error.response?.data?.message || 'Failed to add movie');\n    }\n  },\n\n  updateMovie: async (id, movieData) => {\n    try {\n      console.log(`üé¨ Updating movie ${id}:`, movieData?.title || 'unknown title');\n      const result = await makeRequest('put', `${API_CONFIG.ENDPOINTS.MOVIES}/edit-movie/${id}`, movieData);\n      console.log(`‚úÖ Movie ${id} updated successfully`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå Failed to update movie ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to update movie ${id}`);\n    }\n  },\n\n  deleteMovie: async (id) => {\n    try {\n      console.log(`üé¨ Deleting movie ${id}`);\n      const result = await makeRequest('delete', `${API_CONFIG.ENDPOINTS.MOVIES}/delete-movie/${id}`);\n      console.log(`‚úÖ Movie ${id} deleted successfully`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå Failed to delete movie ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to delete movie ${id}`);\n    }\n  },\n\n  // Actor methods\n  getActors: async () => {\n    try {\n      console.log('üé≠ Fetching actors...');\n      const actors = await makeRequest('get', API_CONFIG.ENDPOINTS.ACTORS);\n      console.log(`‚úÖ Fetched ${actors?.length || 0} actors`);\n      return actors;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch actors:', error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n    }\n  },\n\n  getActor: async (id) => {\n    try {\n      console.log(`üé≠ Fetching actor with ID: ${id}`);\n      const actor = await makeRequest('get', `${API_CONFIG.ENDPOINTS.ACTORS}/${id}`);\n      console.log(`‚úÖ Actor ${id} fetched successfully`);\n      return actor;\n    } catch (error) {\n      console.error(`‚ùå Failed to fetch actor ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to fetch actor ${id}`);\n    }\n  },\n\n  addActor: async (actorData) => {\n    try {\n      console.log('üé≠ Adding new actor:', actorData?.name || 'unknown name');\n      const result = await makeRequest('post', `${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n      console.log('‚úÖ Actor added successfully');\n      return result;\n    } catch (error) {\n      console.error('‚ùå Failed to add actor:', error);\n      throw new Error(error.response?.data?.message || 'Failed to add actor');\n    }\n  },\n\n  updateActor: async (id, actorData) => {\n    try {\n      console.log(`üé≠ Updating actor ${id}:`, actorData?.name || 'unknown name');\n      const result = await makeRequest('put', `${API_CONFIG.ENDPOINTS.ACTORS}/edit-actor/${id}`, actorData);\n      console.log(`‚úÖ Actor ${id} updated successfully`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå Failed to update actor ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to update actor ${id}`);\n    }\n  },\n\n  deleteActor: async (id) => {\n    try {\n      console.log(`üé≠ Deleting actor ${id}`);\n      const result = await makeRequest('delete', `${API_CONFIG.ENDPOINTS.ACTORS}/delete-actor/${id}`);\n      console.log(`‚úÖ Actor ${id} deleted successfully`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå Failed to delete actor ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to delete actor ${id}`);\n    }\n  },\n\n  // Producer methods\n  getProducers: async () => {\n    try {\n      console.log('üéØ Fetching producers...');\n      const producers = await makeRequest('get', API_CONFIG.ENDPOINTS.PRODUCERS);\n      console.log(`‚úÖ Fetched ${producers?.length || 0} producers`);\n      return producers;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch producers:', error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n    }\n  },\n\n  getProducer: async (id) => {\n    try {\n      console.log(`üéØ Fetching producer with ID: ${id}`);\n      const producer = await makeRequest('get', `${API_CONFIG.ENDPOINTS.PRODUCERS}/${id}`);\n      console.log(`‚úÖ Producer ${id} fetched successfully`);\n      return producer;\n    } catch (error) {\n      console.error(`‚ùå Failed to fetch producer ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to fetch producer ${id}`);\n    }\n  },\n\n  addProducer: async (producerData) => {\n    try {\n      console.log('üéØ Adding new producer:', producerData?.name || 'unknown name');\n      const result = await makeRequest('post', `${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n      console.log('‚úÖ Producer added successfully');\n      return result;\n    } catch (error) {\n      console.error('‚ùå Failed to add producer:', error);\n      throw new Error(error.response?.data?.message || 'Failed to add producer');\n    }\n  },\n\n  updateProducer: async (id, producerData) => {\n    try {\n      console.log(`üéØ Updating producer ${id}:`, producerData?.name || 'unknown name');\n      const result = await makeRequest('put', `${API_CONFIG.ENDPOINTS.PRODUCERS}/edit-producer/${id}`, producerData);\n      console.log(`‚úÖ Producer ${id} updated successfully`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå Failed to update producer ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to update producer ${id}`);\n    }\n  },\n\n  deleteProducer: async (id) => {\n    try {\n      console.log(`üéØ Deleting producer ${id}`);\n      const result = await makeRequest('delete', `${API_CONFIG.ENDPOINTS.PRODUCERS}/delete-producer/${id}`);\n      console.log(`‚úÖ Producer ${id} deleted successfully`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå Failed to delete producer ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to delete producer ${id}`);\n    }\n  },\n\n  // Generic HTTP methods with enhanced error handling\n  get: async (endpoint, options = {}) => {\n    return await makeRequest('get', endpoint, null, options);\n  },\n\n  post: async (endpoint, data, options = {}) => {\n    return await makeRequest('post', endpoint, data, options);\n  },\n\n  put: async (endpoint, data, options = {}) => {\n    return await makeRequest('put', endpoint, data, options);\n  },\n\n  delete: async (endpoint, options = {}) => {\n    return await makeRequest('delete', endpoint, null, options);\n  },\n\n  // Utility method to test connectivity\n  testConnectivity: async () => {\n    try {\n      console.log('üîç Testing API connectivity...');\n      \n      const tests = [\n        { name: 'Direct Health Check', url: `${getDirectBaseURL()}/health` },\n        { name: 'API Health Check', url: `${getAPIBaseURL()}/health` },\n        { name: 'Root Endpoint', url: `${getDirectBaseURL()}/` },\n        { name: 'API Root', url: `${getAPIBaseURL()}/` }\n      ];\n      \n      const results = [];\n      \n      for (const test of tests) {\n        try {\n          const response = await fetch(test.url, {\n            method: 'GET',\n            headers: { 'Accept': 'application/json' }\n          });\n          \n          results.push({\n            name: test.name,\n            url: test.url,\n            status: response.status,\n            ok: response.ok,\n            statusText: response.statusText\n          });\n          \n          console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);\n        } catch (error) {\n          results.push({\n            name: test.name,\n            url: test.url,\n            error: error.message,\n            ok: false\n          });\n          \n          console.error(`‚ùå ${test.name}: ${error.message}`);\n        }\n      }\n      \n      return results;\n    } catch (error) {\n      console.error('‚ùå Connectivity test failed:', error);\n      throw error;\n    }\n  }\n};\n\nexport default apiService;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}