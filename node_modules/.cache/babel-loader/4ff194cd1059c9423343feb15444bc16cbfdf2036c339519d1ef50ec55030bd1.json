{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/new-imdb/imdb-clone-client/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// // // // // //addmvoies.js\n\n// // // // // import React, { useEffect, useState } from \"react\";\n// // // // // import Button from \"@mui/material/Button\";\n// // // // // import TextField from \"@mui/material/TextField\";\n// // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // import apiService from './services/api.service';  // Add this import\n// // // // // import { useFormik } from \"formik\";\n// // // // // import * as yup from \"yup\";\n// // // // // import {\n// // // // //   FormControl,\n// // // // //   InputLabel,\n// // // // //   MenuItem,\n// // // // //   Select,\n// // // // // } from \"@mui/material\";\n// // // // // import axios from \"axios\";\n\n// // // // // function AddMovie() {\n// // // // //   const navigate = useNavigate();\n// // // // //   const [actors, setactors] = useState([]);\n// // // // //   const [producer, setProducer] = useState('');\n// // // // //   const [producerArr,setProducerArr] = useState([]);\n// // // // //   const [actorNames,setActorNames] = useState([]);\n\n// // // // //   useEffect(()=>{\n// // // // //     getData();\n// // // // //   },[])\n\n// // // // //   const getData = async() => {\n// // // // //     const res = await axios.get(`${api.service}/producers`);\n// // // // //     const actorData = await axios.get(`${api.service}/actors`);\n// // // // //     setProducerArr(res.data);\n// // // // //     setActorNames(actorData.data);\n// // // // //   }\n\n// // // // //   const handleAgeChange = (e) => {\n// // // // //     const {value} = e.target;\n// // // // //     setProducer(value);\n// // // // //   };\n\n// // // // //   const handleChange = (e) => {\n// // // // //     const { value } = e.target;\n// // // // //     setactors(\n// // // // //       typeof value === \"string\" ? value.split(\",\") : value\n// // // // //     );\n// // // // //   };\n\n// // // // //   const movieValidationSchema = yup.object({\n// // // // //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// // // // //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// // // // //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// // // // //     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n// // // // //     yearOfRelease: yup\n// // // // //       .number()\n// // // // //       .required(\"*Year of release field is mandatory\")\n// // // // //       .min(5),\n// // // // //   });\n\n// // // // //   const formik = useFormik({\n// // // // //     initialValues: {\n// // // // //       name: \"\",\n// // // // //       desc: \"\",\n// // // // //       director: \"\",\n// // // // //       poster: \"\",\n// // // // //       yearOfRelease: \"\",\n\n// // // // //     },\n// // // // //     validationSchema: movieValidationSchema,\n// // // // //     onSubmit: async(newMovie) => {\n// // // // //       console.log(\"onSubmit : \", {...newMovie,actors,producer});\n// // // // //       await axios.post(`${api.service}/movies/add-movie`,{...newMovie,actors,producer});\n// // // // //       navigate(\"/\");\n// // // // //     },\n// // // // //   });\n\n// // // // //   return (\n// // // // //     <>\n// // // // //       <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // // // //         <TextField\n// // // // //           label=\"Enter the name\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"name\"\n// // // // //           name=\"name\"\n// // // // //           value={formik.values.name}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.name && formik.errors.name}\n// // // // //           helperText={\n// // // // //             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the movie Description\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"desc\"\n// // // // //           name=\"desc\"\n// // // // //           value={formik.values.desc}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.desc && formik.errors.desc}\n// // // // //           helperText={\n// // // // //             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the poster link\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"poster\"\n// // // // //           name=\"poster\"\n// // // // //           value={formik.values.poster}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.poster && formik.errors.poster}\n// // // // //           helperText={\n// // // // //             formik.touched.poster && formik.errors.name\n// // // // //               ? formik.errors.poster\n// // // // //               : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the director name\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"director\"\n// // // // //           name=\"director\"\n// // // // //           value={formik.values.director}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.director && formik.errors.director}\n// // // // //           helperText={\n// // // // //             formik.touched.director && formik.errors.director\n// // // // //               ? formik.errors.director\n// // // // //               : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the year of release\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"yearOfRelease\"\n// // // // //           name=\"yearOfRelease\"\n// // // // //           value={formik.values.yearOfRelease}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // // // //           helperText={\n// // // // //             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n// // // // //               ? formik.errors.yearOfRelease\n// // // // //               : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <FormControl fullWidth>\n// // // // //           <InputLabel id=\"producer\">Producer Name</InputLabel>\n// // // // //           <Select\n// // // // //             labelId=\"producer\"\n// // // // //             id=\"producer\"\n// // // // //             value={producer}\n// // // // //             label=\"producer\"\n// // // // //             onChange={handleAgeChange}\n// // // // //           >\n// // // // //             {\n// // // // //               producerArr.map((prodName)=>{\n// // // // //                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n// // // // //               })\n// // // // //             }\n\n// // // // //           </Select>\n// // // // //         </FormControl>\n// // // // //         <FormControl fullWidth >\n// // // // //           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// // // // //           <Select\n// // // // //             labelId=\"actor\"\n// // // // //             id=\"actor\"\n// // // // //             multiple\n// // // // //             value={actors}\n// // // // //             onChange={handleChange}\n// // // // //           >\n// // // // //             {actorNames.map((actor) => (\n// // // // //               <MenuItem key={actor._id} value={actor._id}>\n// // // // //                 {actor.name}\n// // // // //               </MenuItem>\n// // // // //             ))}\n// // // // //           </Select>\n// // // // //         </FormControl>\n// // // // //         <Button variant=\"contained\" type=\"submit\">\n// // // // //           Add Movie\n// // // // //         </Button>\n// // // // //       </form>\n// // // // //     </>\n// // // // //   );\n// // // // // }\n\n// // // // // export default AddMovie;\n// // // // //addmovie.js\n// // // // import React, { useEffect, useState } from \"react\";\n// // // // import Button from \"@mui/material/Button\";\n// // // // import TextField from \"@mui/material/TextField\";\n// // // // import { useNavigate } from \"react-router-dom\";\n// // // // import { useFormik } from \"formik\";\n// // // // import * as yup from \"yup\";\n// // // // import {\n// // // //   FormControl,\n// // // //   InputLabel,\n// // // //   MenuItem,\n// // // //   Select,\n// // // // } from \"@mui/material\";\n// // // // import apiService from './services/api.service';  // Make sure this path is correct\n\n// // // // function AddMovie() {\n// // // //   const navigate = useNavigate();\n// // // //   const [actors, setActors] = useState([]);\n// // // //   const [producer, setProducer] = useState('');\n// // // //   const [producerArr, setProducerArr] = useState([]);\n// // // //   const [actorNames, setActorNames] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     getData();\n// // // //   }, []);\n\n// // // //   const getData = async () => {\n// // // //     try {\n// // // //       const producerResponse = await apiService.get('/producers');\n// // // //       const actorResponse = await apiService.get('/actors');\n// // // //       setProducerArr(producerResponse.data);\n// // // //       setActorNames(actorResponse.data);\n// // // //     } catch (error) {\n// // // //       console.error('Error fetching data:', error);\n// // // //     }\n// // // //   };\n\n// // // //   const handleProducerChange = (e) => {\n// // // //     const { value } = e.target;\n// // // //     setProducer(value);\n// // // //   };\n\n// // // //   const handleActorsChange = (e) => {\n// // // //     const { value } = e.target;\n// // // //     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n// // // //   };\n\n// // // //   const movieValidationSchema = yup.object({\n// // // //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// // // //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// // // //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// // // //     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n// // // //     yearOfRelease: yup\n// // // //       .number()\n// // // //       .required(\"*Year of release field is mandatory\")\n// // // //       .min(1900)\n// // // //       .max(new Date().getFullYear()),\n// // // //   });\n\n// // // //   const formik = useFormik({\n// // // //     initialValues: {\n// // // //       name: \"\",\n// // // //       desc: \"\",\n// // // //       director: \"\",\n// // // //       poster: \"\",\n// // // //       yearOfRelease: \"\",\n// // // //     },\n// // // //     validationSchema: movieValidationSchema,\n// // // //     onSubmit: async (newMovie) => {\n// // // //       try {\n// // // //         const movieData = { ...newMovie, actors, producer };\n// // // //         await apiService.post('/movies/add-movie', movieData);\n// // // //         navigate(\"/\");\n// // // //       } catch (error) {\n// // // //         console.error('Error adding movie:', error);\n// // // //       }\n// // // //     },\n// // // //   });\n\n// // // //   return (\n// // // //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // // //       <TextField\n// // // //         label=\"Enter the name\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"name\"\n// // // //         name=\"name\"\n// // // //         value={formik.values.name}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.name && formik.errors.name}\n// // // //         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the movie Description\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"desc\"\n// // // //         name=\"desc\"\n// // // //         value={formik.values.desc}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.desc && formik.errors.desc}\n// // // //         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the poster link\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"poster\"\n// // // //         name=\"poster\"\n// // // //         value={formik.values.poster}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.poster && formik.errors.poster}\n// // // //         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the director name\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"director\"\n// // // //         name=\"director\"\n// // // //         value={formik.values.director}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.director && formik.errors.director}\n// // // //         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the year of release\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"yearOfRelease\"\n// // // //         name=\"yearOfRelease\"\n// // // //         type=\"number\"\n// // // //         value={formik.values.yearOfRelease}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // // //         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"}\n// // // //       />\n// // // //       <FormControl fullWidth>\n// // // //         <InputLabel id=\"producer\">Producer Name</InputLabel>\n// // // //         <Select\n// // // //           labelId=\"producer\"\n// // // //           id=\"producer\"\n// // // //           value={producer}\n// // // //           label=\"Producer Name\"\n// // // //           onChange={handleProducerChange}\n// // // //         >\n// // // //           {producerArr.map((prodName) => (\n// // // //             <MenuItem key={prodName._id} value={prodName._id}>\n// // // //               {prodName.name}\n// // // //             </MenuItem>\n// // // //           ))}\n// // // //         </Select>\n// // // //       </FormControl>\n// // // //       <FormControl fullWidth>\n// // // //         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// // // //         <Select\n// // // //           labelId=\"actor\"\n// // // //           id=\"actor\"\n// // // //           multiple\n// // // //           value={actors}\n// // // //           label=\"Select the Actor names\"\n// // // //           onChange={handleActorsChange}\n// // // //         >\n// // // //           {actorNames.map((actor) => (\n// // // //             <MenuItem key={actor._id} value={actor._id}>\n// // // //               {actor.name}\n// // // //             </MenuItem>\n// // // //           ))}\n// // // //         </Select>\n// // // //       </FormControl>\n// // // //       <Button variant=\"contained\" type=\"submit\">\n// // // //         Add Movie\n// // // //       </Button>\n// // // //     </form>\n// // // //   );\n// // // // }\n\n// // // // export default AddMovie;\n// // // // src/components/AddMovie.js\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import {\n// // //   Button,\n// // //   TextField,\n// // //   FormControl,\n// // //   InputLabel,\n// // //   MenuItem,\n// // //   Select,\n// // //   Box,\n// // //   Typography\n// // // } from \"@mui/material\";\n// // // import apiService from './services/api.service';\n\n// // // const validationSchema = yup.object({\n// // //   name: yup.string().required(\"Name field is mandatory\").min(3),\n// // //   desc: yup.string().required(\"Description is mandatory\").min(1),\n// // //   director: yup.string().required(\"Director field is mandatory\").min(5),\n// // //   poster: yup.string().required(\"Poster is mandatory\").min(5),\n// // //   yearOfRelease: yup\n// // //     .number()\n// // //     .required(\"Year of release field is mandatory\")\n// // //     .min(1900)\n// // //     .max(new Date().getFullYear()),\n// // // });\n\n// // // function AddMovie() {\n// // //   const navigate = useNavigate();\n// // //   const [actors, setActors] = useState([]);\n// // //   const [producer, setProducer] = useState('');\n// // //   const [producerList, setProducerList] = useState([]);\n// // //   const [actorList, setActorList] = useState([]);\n// // //   const [error, setError] = useState(\"\");\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const [producerData, actorData] = await Promise.all([\n// // //           apiService.get('/producers'),\n// // //           apiService.get('/actors')\n// // //         ]);\n// // //         setProducerList(producerData);\n// // //         setActorList(actorData);\n// // //       } catch (err) {\n// // //         setError(\"Failed to fetch required data\");\n// // //       }\n// // //     };\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: \"\",\n// // //       desc: \"\",\n// // //       director: \"\",\n// // //       poster: \"\",\n// // //       yearOfRelease: \"\",\n// // //     },\n// // //     validationSchema,\n// // //     onSubmit: async (values) => {\n// // //       try {\n// // //         await apiService.post('/movies/add-movie', {\n// // //           ...values,\n// // //           actors,\n// // //           producer\n// // //         });\n// // //         navigate(\"/\");\n// // //       } catch (err) {\n// // //         setError(err.message || \"Failed to add movie\");\n// // //       }\n// // //     },\n// // //   });\n\n// // //   return (\n// // //     <Box sx={{ maxWidth: 600, mx: 'auto', mt: 4 }}>\n// // //       <Typography variant=\"h4\" gutterBottom>\n// // //         Add Movie\n// // //       </Typography>\n\n// // //       <form onSubmit={formik.handleSubmit}>\n// // //         {error && (\n// // //           <Typography color=\"error\" sx={{ mb: 2 }}>\n// // //             {error}\n// // //           </Typography>\n// // //         )}\n\n// // //         <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Movie Name\"\n// // //             {...formik.getFieldProps('name')}\n// // //             error={formik.touched.name && Boolean(formik.errors.name)}\n// // //             helperText={formik.touched.name && formik.errors.name}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Description\"\n// // //             multiline\n// // //             rows={4}\n// // //             {...formik.getFieldProps('desc')}\n// // //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// // //             helperText={formik.touched.desc && formik.errors.desc}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Director\"\n// // //             {...formik.getFieldProps('director')}\n// // //             error={formik.touched.director && Boolean(formik.errors.director)}\n// // //             helperText={formik.touched.director && formik.errors.director}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Poster URL\"\n// // //             {...formik.getFieldProps('poster')}\n// // //             error={formik.touched.poster && Boolean(formik.errors.poster)}\n// // //             helperText={formik.touched.poster && formik.errors.poster}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Year of Release\"\n// // //             type=\"number\"\n// // //             {...formik.getFieldProps('yearOfRelease')}\n// // //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// // //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //           />\n\n// // //           <FormControl fullWidth>\n// // //             <InputLabel>Producer</InputLabel>\n// // //             <Select\n// // //               value={producer}\n// // //               label=\"Producer\"\n// // //               onChange={(e) => setProducer(e.target.value)}\n// // //             >\n// // //               {producerList.map((prod) => (\n// // //                 <MenuItem key={prod._id} value={prod._id}>\n// // //                   {prod.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //           </FormControl>\n\n// // //           <FormControl fullWidth>\n// // //             <InputLabel>Actors</InputLabel>\n// // //             <Select\n// // //               multiple\n// // //               value={actors}\n// // //               label=\"Actors\"\n// // //               onChange={(e) => setActors(e.target.value)}\n// // //             >\n// // //               {actorList.map((actor) => (\n// // //                 <MenuItem key={actor._id} value={actor._id}>\n// // //                   {actor.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //           </FormControl>\n\n// // //           <Button\n// // //             variant=\"contained\"\n// // //             type=\"submit\"\n// // //             size=\"large\"\n// // //             sx={{ mt: 2 }}\n// // //           >\n// // //             Add Movie\n// // //           </Button>\n// // //         </Box>\n// // //       </form>\n// // //     </Box>\n// // //   );\n// // // }\n\n// // // export default AddMovie;\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import {\n// //   Button,\n// //   TextField,\n// //   FormControl,\n// //   InputLabel,\n// //   MenuItem,\n// //   Select,\n// //   Box,\n// //   Typography\n// // } from \"@mui/material\";\n// // import apiService from \"./services/api.service\";\n\n// // const validationSchema = yup.object({\n// //   name: yup.string().required(\"Name field is mandatory\").min(3),\n// //   desc: yup.string().required(\"Description is mandatory\").min(1),\n// //   director: yup.string().required(\"Director field is mandatory\").min(5),\n// //   poster: yup.string().required(\"Poster is mandatory\").min(5),\n// //   yearOfRelease: yup\n// //     .number()\n// //     .required(\"Year of release field is mandatory\")\n// //     .min(1900)\n// //     .max(new Date().getFullYear()),\n// // });\n\n// // function AddMovie() {\n// //   const navigate = useNavigate();\n// //   const [actors, setActors] = useState([]);\n// //   const [producer, setProducer] = useState(\"\");\n// //   const [producerList, setProducerList] = useState([]);\n// //   const [actorList, setActorList] = useState([]);\n// //   const [error, setError] = useState(\"\");\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const [producerData, actorData] = await Promise.all([\n// //           apiService.get(\"/producers\"),\n// //           apiService.get(\"/actors\"),\n// //         ]);\n// //         setProducerList(producerData.data);\n// //         setActorList(actorData.data);\n// //       } catch (err) {\n// //         setError(\"Failed to fetch required data\");\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: \"\",\n// //       desc: \"\",\n// //       director: \"\",\n// //       poster: \"\",\n// //       yearOfRelease: \"\",\n// //     },\n// //     validationSchema,\n// //     onSubmit: async (values) => {\n// //       try {\n// //         await apiService.post(\"/movies/add-movie\", {\n// //           ...values,\n// //           actors,\n// //           producer,\n// //         });\n// //         navigate(\"/\");\n// //       } catch (err) {\n// //         setError(err.response?.data?.message || \"Failed to add movie\");\n// //       }\n// //     },\n// //   });\n\n// //   return (\n// //     <Box sx={{ maxWidth: 600, mx: \"auto\", mt: 4 }}>\n// //       <Typography variant=\"h4\" gutterBottom>\n// //         Add Movie\n// //       </Typography>\n// //       <form onSubmit={formik.handleSubmit}>\n// //         {error && <Typography color=\"error\">{error}</Typography>}\n// //         <TextField label=\"Movie Name\" {...formik.getFieldProps(\"name\")} fullWidth />\n// //         <TextField label=\"Description\" {...formik.getFieldProps(\"desc\")} fullWidth multiline rows={4} />\n// //         <TextField label=\"Director\" {...formik.getFieldProps(\"director\")} fullWidth />\n// //         <TextField label=\"Poster URL\" {...formik.getFieldProps(\"poster\")} fullWidth />\n// //         <TextField label=\"Year of Release\" type=\"number\" {...formik.getFieldProps(\"yearOfRelease\")} fullWidth />\n// //         <FormControl fullWidth>\n// //           <InputLabel>Producer</InputLabel>\n// //           <Select value={producer} onChange={(e) => setProducer(e.target.value)}>\n// //             {producerList.map((prod) => (\n// //               <MenuItem key={prod._id} value={prod._id}>{prod.name}</MenuItem>\n// //             ))}\n// //           </Select>\n// //         </FormControl>\n// //         <FormControl fullWidth>\n// //           <InputLabel>Actors</InputLabel>\n// //           <Select multiple value={actors} onChange={(e) => setActors(e.target.value)}>\n// //             {actorList.map((actor) => (\n// //               <MenuItem key={actor._id} value={actor._id}>{actor.name}</MenuItem>\n// //             ))}\n// //           </Select>\n// //         </FormControl>\n// //         <Button variant=\"contained\" type=\"submit\" fullWidth>\n// //           Add Movie\n// //         </Button>\n// //       </form>\n// //     </Box>\n// //   );\n// // }\n\n// // export default AddMovie;\n// import React, { useEffect, useState } from \"react\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   CircularProgress,\n//   Box,\n// } from \"@mui/material\";\n// import apiService from \"./services/api.service\"; // Import apiService\n\n// function AddMovie() {\n//   const [actors, setActors] = useState([]);\n//   const [producers, setProducers] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true); // Add loading state\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const actorsData = await apiService.getActors(); // Fetch actors\n//       const producersData = await apiService.getProducers(); // Fetch producers\n//       setActors(actorsData);\n//       setProducers(producersData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     } finally {\n//       setIsLoading(false); // Set loading to false after fetching\n//     }\n//   };\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(1900, \"*Year must be after 1900\"),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: \"\",\n//       producer: \"\",\n//       actors: [],\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         await apiService.addMovie(values); // Add movie using apiService\n//         alert(\"Movie added successfully!\");\n//         formik.resetForm();\n//       } catch (error) {\n//         console.error(\"Error adding movie:\", error);\n//         alert(\"Failed to add movie. Please try again.\");\n//       }\n//     },\n//   });\n\n//   if (isLoading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//       <TextField\n//         label=\"Enter the name\"\n//         variant=\"outlined\"\n//         id=\"name\"\n//         name=\"name\"\n//         value={formik.values.name}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.name && Boolean(formik.errors.name)}\n//         helperText={formik.touched.name && formik.errors.name}\n//       />\n//       <TextField\n//         label=\"Enter the movie Description\"\n//         variant=\"outlined\"\n//         id=\"desc\"\n//         name=\"desc\"\n//         value={formik.values.desc}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.desc && Boolean(formik.errors.desc)}\n//         helperText={formik.touched.desc && formik.errors.desc}\n//       />\n//       <TextField\n//         label=\"Enter the poster link\"\n//         variant=\"outlined\"\n//         id=\"poster\"\n//         name=\"poster\"\n//         value={formik.values.poster}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.poster && Boolean(formik.errors.poster)}\n//         helperText={formik.touched.poster && formik.errors.poster}\n//       />\n//       <TextField\n//         label=\"Enter the director name\"\n//         variant=\"outlined\"\n//         id=\"director\"\n//         name=\"director\"\n//         value={formik.values.director}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.director && Boolean(formik.errors.director)}\n//         helperText={formik.touched.director && formik.errors.director}\n//       />\n//       <TextField\n//         label=\"Enter the year of release\"\n//         variant=\"outlined\"\n//         id=\"yearOfRelease\"\n//         name=\"yearOfRelease\"\n//         value={formik.values.yearOfRelease}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//       />\n//       <FormControl fullWidth>\n//         <InputLabel id=\"producer\">Producer</InputLabel>\n//         <Select\n//           labelId=\"producer\"\n//           id=\"producer\"\n//           name=\"producer\"\n//           value={formik.values.producer}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.producer && Boolean(formik.errors.producer)}\n//         >\n//           {producers.map((producer) => (\n//             <MenuItem key={producer._id} value={producer._id}>\n//               {producer.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl fullWidth>\n//         <InputLabel id=\"actors\">Actors</InputLabel>\n//         <Select\n//           labelId=\"actors\"\n//           id=\"actors\"\n//           name=\"actors\"\n//           multiple\n//           value={formik.values.actors}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.actors && Boolean(formik.errors.actors)}\n//         >\n//           {actors.map((actor) => (\n//             <MenuItem key={actor._id} value={actor._id}>\n//               {actor.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <Button variant=\"contained\" type=\"submit\">\n//         Add Movie\n//       </Button>\n//     </form>\n//   );\n// }\n\n// export default AddMovie;\nimport React, { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField, Button, FormControl, InputLabel, Select, MenuItem, CircularProgress, Box } from \"@mui/material\";\nimport apiService from \"./services/api.service\"; // Import apiService\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddMovie() {\n  _s();\n  const [actors, setActors] = useState([]);\n  const [producers, setProducers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const actorsData = await apiService.getActors(); // Fetch actors\n      const producersData = await apiService.getProducers(); // Fetch producers\n      setActors(actorsData);\n      setProducers(producersData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setIsLoading(false); // Set loading to false after fetching\n    }\n  };\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster is mandatory\").min(5),\n    yearOfRelease: yup.number().required(\"*Year of release field is mandatory\").min(1900, \"*Year must be after 1900\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: \"\",\n      producer: \"\",\n      actors: []\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async values => {\n      try {\n        await apiService.addMovie(values); // Add movie using apiService\n        alert(\"Movie added successfully!\");\n        formik.resetForm();\n      } catch (error) {\n        console.error(\"Error adding movie:\", error);\n        alert(\"Failed to add movie. Please try again.\");\n      }\n    }\n  });\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    className: \"formGroup\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the name\",\n      variant: \"outlined\",\n      id: \"name\",\n      name: \"name\",\n      value: formik.values.name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.name && Boolean(formik.errors.name),\n      helperText: formik.touched.name && formik.errors.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the movie Description\",\n      variant: \"outlined\",\n      id: \"desc\",\n      name: \"desc\",\n      value: formik.values.desc,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.desc && Boolean(formik.errors.desc),\n      helperText: formik.touched.desc && formik.errors.desc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the poster link\",\n      variant: \"outlined\",\n      id: \"poster\",\n      name: \"poster\",\n      value: formik.values.poster,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.poster && Boolean(formik.errors.poster),\n      helperText: formik.touched.poster && formik.errors.poster\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the director name\",\n      variant: \"outlined\",\n      id: \"director\",\n      name: \"director\",\n      value: formik.values.director,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.director && Boolean(formik.errors.director),\n      helperText: formik.touched.director && formik.errors.director\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 958,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the year of release\",\n      variant: \"outlined\",\n      id: \"yearOfRelease\",\n      name: \"yearOfRelease\",\n      value: formik.values.yearOfRelease,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease),\n      helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 969,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"producer\",\n        children: \"Producer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"producer\",\n        id: \"producer\",\n        name: \"producer\",\n        value: formik.values.producer,\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        error: formik.touched.producer && Boolean(formik.errors.producer),\n        children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: producer._id,\n          children: producer.name\n        }, producer._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"actors\",\n        children: \"Actors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 999,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"actors\",\n        id: \"actors\",\n        name: \"actors\",\n        multiple: true,\n        value: formik.values.actors,\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        error: formik.touched.actors && Boolean(formik.errors.actors),\n        children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: actor._id,\n          children: actor.name\n        }, actor._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      children: \"Add Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 924,\n    columnNumber: 5\n  }, this);\n}\n_s(AddMovie, \"0V4rR1Ot2b4zTjocsVA84ieqBbw=\", false, function () {\n  return [useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","useFormik","yup","TextField","Button","FormControl","InputLabel","Select","MenuItem","CircularProgress","Box","apiService","jsxDEV","_jsxDEV","AddMovie","_s","actors","setActors","producers","setProducers","isLoading","setIsLoading","fetchData","actorsData","getActors","producersData","getProducers","error","console","movieValidationSchema","object","name","string","required","min","desc","director","poster","yearOfRelease","number","formik","initialValues","producer","validationSchema","onSubmit","values","addMovie","alert","resetForm","sx","display","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","className","label","variant","id","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","fullWidth","labelId","map","_id","multiple","actor","type","_c","$RefreshReg$"],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/AddMovie.js"],"sourcesContent":["// // // // // //addmvoies.js\n\n// // // // // import React, { useEffect, useState } from \"react\";\n// // // // // import Button from \"@mui/material/Button\";\n// // // // // import TextField from \"@mui/material/TextField\";\n// // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // import apiService from './services/api.service';  // Add this import\n// // // // // import { useFormik } from \"formik\";\n// // // // // import * as yup from \"yup\";\n// // // // // import {\n// // // // //   FormControl,\n// // // // //   InputLabel,\n// // // // //   MenuItem,\n// // // // //   Select,\n// // // // // } from \"@mui/material\";\n// // // // // import axios from \"axios\";\n\n\n// // // // // function AddMovie() {\n// // // // //   const navigate = useNavigate();\n// // // // //   const [actors, setactors] = useState([]);\n// // // // //   const [producer, setProducer] = useState('');\n// // // // //   const [producerArr,setProducerArr] = useState([]);\n// // // // //   const [actorNames,setActorNames] = useState([]);\n\n\n// // // // //   useEffect(()=>{\n// // // // //     getData();\n// // // // //   },[])\n\n// // // // //   const getData = async() => {\n// // // // //     const res = await axios.get(`${api.service}/producers`);\n// // // // //     const actorData = await axios.get(`${api.service}/actors`);\n// // // // //     setProducerArr(res.data);\n// // // // //     setActorNames(actorData.data);\n// // // // //   }\n\n// // // // //   const handleAgeChange = (e) => {\n// // // // //     const {value} = e.target;\n// // // // //     setProducer(value);\n// // // // //   };\n\n// // // // //   const handleChange = (e) => {\n// // // // //     const { value } = e.target;\n// // // // //     setactors(\n// // // // //       typeof value === \"string\" ? value.split(\",\") : value\n// // // // //     );\n// // // // //   };\n\n// // // // //   const movieValidationSchema = yup.object({\n// // // // //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// // // // //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// // // // //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// // // // //     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n// // // // //     yearOfRelease: yup\n// // // // //       .number()\n// // // // //       .required(\"*Year of release field is mandatory\")\n// // // // //       .min(5),\n// // // // //   });\n\n// // // // //   const formik = useFormik({\n// // // // //     initialValues: {\n// // // // //       name: \"\",\n// // // // //       desc: \"\",\n// // // // //       director: \"\",\n// // // // //       poster: \"\",\n// // // // //       yearOfRelease: \"\",\n      \n// // // // //     },\n// // // // //     validationSchema: movieValidationSchema,\n// // // // //     onSubmit: async(newMovie) => {\n// // // // //       console.log(\"onSubmit : \", {...newMovie,actors,producer});\n// // // // //       await axios.post(`${api.service}/movies/add-movie`,{...newMovie,actors,producer});\n// // // // //       navigate(\"/\");\n// // // // //     },\n// // // // //   });\n\n// // // // //   return (\n// // // // //     <>\n// // // // //       <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // // // //         <TextField\n// // // // //           label=\"Enter the name\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"name\"\n// // // // //           name=\"name\"\n// // // // //           value={formik.values.name}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.name && formik.errors.name}\n// // // // //           helperText={\n// // // // //             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the movie Description\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"desc\"\n// // // // //           name=\"desc\"\n// // // // //           value={formik.values.desc}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.desc && formik.errors.desc}\n// // // // //           helperText={\n// // // // //             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the poster link\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"poster\"\n// // // // //           name=\"poster\"\n// // // // //           value={formik.values.poster}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.poster && formik.errors.poster}\n// // // // //           helperText={\n// // // // //             formik.touched.poster && formik.errors.name\n// // // // //               ? formik.errors.poster\n// // // // //               : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the director name\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"director\"\n// // // // //           name=\"director\"\n// // // // //           value={formik.values.director}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.director && formik.errors.director}\n// // // // //           helperText={\n// // // // //             formik.touched.director && formik.errors.director\n// // // // //               ? formik.errors.director\n// // // // //               : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <TextField\n// // // // //           label=\"Enter the year of release\"\n// // // // //           variant=\"outlined\"\n// // // // //           id=\"yearOfRelease\"\n// // // // //           name=\"yearOfRelease\"\n// // // // //           value={formik.values.yearOfRelease}\n// // // // //           onChange={formik.handleChange}\n// // // // //           onBlur={formik.handleBlur}\n// // // // //           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // // // //           helperText={\n// // // // //             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n// // // // //               ? formik.errors.yearOfRelease\n// // // // //               : \"\"\n// // // // //           }\n// // // // //         />\n// // // // //         <FormControl fullWidth>\n// // // // //           <InputLabel id=\"producer\">Producer Name</InputLabel>\n// // // // //           <Select\n// // // // //             labelId=\"producer\"\n// // // // //             id=\"producer\"\n// // // // //             value={producer}\n// // // // //             label=\"producer\"\n// // // // //             onChange={handleAgeChange}\n// // // // //           >\n// // // // //             {\n// // // // //               producerArr.map((prodName)=>{\n// // // // //                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n// // // // //               })\n// // // // //             }\n            \n// // // // //           </Select>\n// // // // //         </FormControl>\n// // // // //         <FormControl fullWidth >\n// // // // //           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// // // // //           <Select\n// // // // //             labelId=\"actor\"\n// // // // //             id=\"actor\"\n// // // // //             multiple\n// // // // //             value={actors}\n// // // // //             onChange={handleChange}\n// // // // //           >\n// // // // //             {actorNames.map((actor) => (\n// // // // //               <MenuItem key={actor._id} value={actor._id}>\n// // // // //                 {actor.name}\n// // // // //               </MenuItem>\n// // // // //             ))}\n// // // // //           </Select>\n// // // // //         </FormControl>\n// // // // //         <Button variant=\"contained\" type=\"submit\">\n// // // // //           Add Movie\n// // // // //         </Button>\n// // // // //       </form>\n// // // // //     </>\n// // // // //   );\n// // // // // }\n\n// // // // // export default AddMovie;\n// // // // //addmovie.js\n// // // // import React, { useEffect, useState } from \"react\";\n// // // // import Button from \"@mui/material/Button\";\n// // // // import TextField from \"@mui/material/TextField\";\n// // // // import { useNavigate } from \"react-router-dom\";\n// // // // import { useFormik } from \"formik\";\n// // // // import * as yup from \"yup\";\n// // // // import {\n// // // //   FormControl,\n// // // //   InputLabel,\n// // // //   MenuItem,\n// // // //   Select,\n// // // // } from \"@mui/material\";\n// // // // import apiService from './services/api.service';  // Make sure this path is correct\n\n// // // // function AddMovie() {\n// // // //   const navigate = useNavigate();\n// // // //   const [actors, setActors] = useState([]);\n// // // //   const [producer, setProducer] = useState('');\n// // // //   const [producerArr, setProducerArr] = useState([]);\n// // // //   const [actorNames, setActorNames] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     getData();\n// // // //   }, []);\n\n// // // //   const getData = async () => {\n// // // //     try {\n// // // //       const producerResponse = await apiService.get('/producers');\n// // // //       const actorResponse = await apiService.get('/actors');\n// // // //       setProducerArr(producerResponse.data);\n// // // //       setActorNames(actorResponse.data);\n// // // //     } catch (error) {\n// // // //       console.error('Error fetching data:', error);\n// // // //     }\n// // // //   };\n\n// // // //   const handleProducerChange = (e) => {\n// // // //     const { value } = e.target;\n// // // //     setProducer(value);\n// // // //   };\n\n// // // //   const handleActorsChange = (e) => {\n// // // //     const { value } = e.target;\n// // // //     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n// // // //   };\n\n// // // //   const movieValidationSchema = yup.object({\n// // // //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// // // //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// // // //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// // // //     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n// // // //     yearOfRelease: yup\n// // // //       .number()\n// // // //       .required(\"*Year of release field is mandatory\")\n// // // //       .min(1900)\n// // // //       .max(new Date().getFullYear()),\n// // // //   });\n\n// // // //   const formik = useFormik({\n// // // //     initialValues: {\n// // // //       name: \"\",\n// // // //       desc: \"\",\n// // // //       director: \"\",\n// // // //       poster: \"\",\n// // // //       yearOfRelease: \"\",\n// // // //     },\n// // // //     validationSchema: movieValidationSchema,\n// // // //     onSubmit: async (newMovie) => {\n// // // //       try {\n// // // //         const movieData = { ...newMovie, actors, producer };\n// // // //         await apiService.post('/movies/add-movie', movieData);\n// // // //         navigate(\"/\");\n// // // //       } catch (error) {\n// // // //         console.error('Error adding movie:', error);\n// // // //       }\n// // // //     },\n// // // //   });\n\n// // // //   return (\n// // // //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// // // //       <TextField\n// // // //         label=\"Enter the name\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"name\"\n// // // //         name=\"name\"\n// // // //         value={formik.values.name}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.name && formik.errors.name}\n// // // //         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the movie Description\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"desc\"\n// // // //         name=\"desc\"\n// // // //         value={formik.values.desc}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.desc && formik.errors.desc}\n// // // //         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the poster link\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"poster\"\n// // // //         name=\"poster\"\n// // // //         value={formik.values.poster}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.poster && formik.errors.poster}\n// // // //         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the director name\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"director\"\n// // // //         name=\"director\"\n// // // //         value={formik.values.director}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.director && formik.errors.director}\n// // // //         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n// // // //       />\n// // // //       <TextField\n// // // //         label=\"Enter the year of release\"\n// // // //         variant=\"outlined\"\n// // // //         id=\"yearOfRelease\"\n// // // //         name=\"yearOfRelease\"\n// // // //         type=\"number\"\n// // // //         value={formik.values.yearOfRelease}\n// // // //         onChange={formik.handleChange}\n// // // //         onBlur={formik.handleBlur}\n// // // //         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // // //         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"}\n// // // //       />\n// // // //       <FormControl fullWidth>\n// // // //         <InputLabel id=\"producer\">Producer Name</InputLabel>\n// // // //         <Select\n// // // //           labelId=\"producer\"\n// // // //           id=\"producer\"\n// // // //           value={producer}\n// // // //           label=\"Producer Name\"\n// // // //           onChange={handleProducerChange}\n// // // //         >\n// // // //           {producerArr.map((prodName) => (\n// // // //             <MenuItem key={prodName._id} value={prodName._id}>\n// // // //               {prodName.name}\n// // // //             </MenuItem>\n// // // //           ))}\n// // // //         </Select>\n// // // //       </FormControl>\n// // // //       <FormControl fullWidth>\n// // // //         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// // // //         <Select\n// // // //           labelId=\"actor\"\n// // // //           id=\"actor\"\n// // // //           multiple\n// // // //           value={actors}\n// // // //           label=\"Select the Actor names\"\n// // // //           onChange={handleActorsChange}\n// // // //         >\n// // // //           {actorNames.map((actor) => (\n// // // //             <MenuItem key={actor._id} value={actor._id}>\n// // // //               {actor.name}\n// // // //             </MenuItem>\n// // // //           ))}\n// // // //         </Select>\n// // // //       </FormControl>\n// // // //       <Button variant=\"contained\" type=\"submit\">\n// // // //         Add Movie\n// // // //       </Button>\n// // // //     </form>\n// // // //   );\n// // // // }\n\n// // // // export default AddMovie;\n// // // // src/components/AddMovie.js\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import { useFormik } from \"formik\";\n// // // import * as yup from \"yup\";\n// // // import {\n// // //   Button,\n// // //   TextField,\n// // //   FormControl,\n// // //   InputLabel,\n// // //   MenuItem,\n// // //   Select,\n// // //   Box,\n// // //   Typography\n// // // } from \"@mui/material\";\n// // // import apiService from './services/api.service';\n\n// // // const validationSchema = yup.object({\n// // //   name: yup.string().required(\"Name field is mandatory\").min(3),\n// // //   desc: yup.string().required(\"Description is mandatory\").min(1),\n// // //   director: yup.string().required(\"Director field is mandatory\").min(5),\n// // //   poster: yup.string().required(\"Poster is mandatory\").min(5),\n// // //   yearOfRelease: yup\n// // //     .number()\n// // //     .required(\"Year of release field is mandatory\")\n// // //     .min(1900)\n// // //     .max(new Date().getFullYear()),\n// // // });\n\n// // // function AddMovie() {\n// // //   const navigate = useNavigate();\n// // //   const [actors, setActors] = useState([]);\n// // //   const [producer, setProducer] = useState('');\n// // //   const [producerList, setProducerList] = useState([]);\n// // //   const [actorList, setActorList] = useState([]);\n// // //   const [error, setError] = useState(\"\");\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const [producerData, actorData] = await Promise.all([\n// // //           apiService.get('/producers'),\n// // //           apiService.get('/actors')\n// // //         ]);\n// // //         setProducerList(producerData);\n// // //         setActorList(actorData);\n// // //       } catch (err) {\n// // //         setError(\"Failed to fetch required data\");\n// // //       }\n// // //     };\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const formik = useFormik({\n// // //     initialValues: {\n// // //       name: \"\",\n// // //       desc: \"\",\n// // //       director: \"\",\n// // //       poster: \"\",\n// // //       yearOfRelease: \"\",\n// // //     },\n// // //     validationSchema,\n// // //     onSubmit: async (values) => {\n// // //       try {\n// // //         await apiService.post('/movies/add-movie', {\n// // //           ...values,\n// // //           actors,\n// // //           producer\n// // //         });\n// // //         navigate(\"/\");\n// // //       } catch (err) {\n// // //         setError(err.message || \"Failed to add movie\");\n// // //       }\n// // //     },\n// // //   });\n\n// // //   return (\n// // //     <Box sx={{ maxWidth: 600, mx: 'auto', mt: 4 }}>\n// // //       <Typography variant=\"h4\" gutterBottom>\n// // //         Add Movie\n// // //       </Typography>\n\n// // //       <form onSubmit={formik.handleSubmit}>\n// // //         {error && (\n// // //           <Typography color=\"error\" sx={{ mb: 2 }}>\n// // //             {error}\n// // //           </Typography>\n// // //         )}\n\n// // //         <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Movie Name\"\n// // //             {...formik.getFieldProps('name')}\n// // //             error={formik.touched.name && Boolean(formik.errors.name)}\n// // //             helperText={formik.touched.name && formik.errors.name}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Description\"\n// // //             multiline\n// // //             rows={4}\n// // //             {...formik.getFieldProps('desc')}\n// // //             error={formik.touched.desc && Boolean(formik.errors.desc)}\n// // //             helperText={formik.touched.desc && formik.errors.desc}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Director\"\n// // //             {...formik.getFieldProps('director')}\n// // //             error={formik.touched.director && Boolean(formik.errors.director)}\n// // //             helperText={formik.touched.director && formik.errors.director}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Poster URL\"\n// // //             {...formik.getFieldProps('poster')}\n// // //             error={formik.touched.poster && Boolean(formik.errors.poster)}\n// // //             helperText={formik.touched.poster && formik.errors.poster}\n// // //           />\n\n// // //           <TextField\n// // //             fullWidth\n// // //             label=\"Year of Release\"\n// // //             type=\"number\"\n// // //             {...formik.getFieldProps('yearOfRelease')}\n// // //             error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n// // //             helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// // //           />\n\n// // //           <FormControl fullWidth>\n// // //             <InputLabel>Producer</InputLabel>\n// // //             <Select\n// // //               value={producer}\n// // //               label=\"Producer\"\n// // //               onChange={(e) => setProducer(e.target.value)}\n// // //             >\n// // //               {producerList.map((prod) => (\n// // //                 <MenuItem key={prod._id} value={prod._id}>\n// // //                   {prod.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //           </FormControl>\n\n// // //           <FormControl fullWidth>\n// // //             <InputLabel>Actors</InputLabel>\n// // //             <Select\n// // //               multiple\n// // //               value={actors}\n// // //               label=\"Actors\"\n// // //               onChange={(e) => setActors(e.target.value)}\n// // //             >\n// // //               {actorList.map((actor) => (\n// // //                 <MenuItem key={actor._id} value={actor._id}>\n// // //                   {actor.name}\n// // //                 </MenuItem>\n// // //               ))}\n// // //             </Select>\n// // //           </FormControl>\n\n// // //           <Button\n// // //             variant=\"contained\"\n// // //             type=\"submit\"\n// // //             size=\"large\"\n// // //             sx={{ mt: 2 }}\n// // //           >\n// // //             Add Movie\n// // //           </Button>\n// // //         </Box>\n// // //       </form>\n// // //     </Box>\n// // //   );\n// // // }\n\n// // // export default AddMovie;\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import {\n// //   Button,\n// //   TextField,\n// //   FormControl,\n// //   InputLabel,\n// //   MenuItem,\n// //   Select,\n// //   Box,\n// //   Typography\n// // } from \"@mui/material\";\n// // import apiService from \"./services/api.service\";\n\n// // const validationSchema = yup.object({\n// //   name: yup.string().required(\"Name field is mandatory\").min(3),\n// //   desc: yup.string().required(\"Description is mandatory\").min(1),\n// //   director: yup.string().required(\"Director field is mandatory\").min(5),\n// //   poster: yup.string().required(\"Poster is mandatory\").min(5),\n// //   yearOfRelease: yup\n// //     .number()\n// //     .required(\"Year of release field is mandatory\")\n// //     .min(1900)\n// //     .max(new Date().getFullYear()),\n// // });\n\n// // function AddMovie() {\n// //   const navigate = useNavigate();\n// //   const [actors, setActors] = useState([]);\n// //   const [producer, setProducer] = useState(\"\");\n// //   const [producerList, setProducerList] = useState([]);\n// //   const [actorList, setActorList] = useState([]);\n// //   const [error, setError] = useState(\"\");\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const [producerData, actorData] = await Promise.all([\n// //           apiService.get(\"/producers\"),\n// //           apiService.get(\"/actors\"),\n// //         ]);\n// //         setProducerList(producerData.data);\n// //         setActorList(actorData.data);\n// //       } catch (err) {\n// //         setError(\"Failed to fetch required data\");\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: \"\",\n// //       desc: \"\",\n// //       director: \"\",\n// //       poster: \"\",\n// //       yearOfRelease: \"\",\n// //     },\n// //     validationSchema,\n// //     onSubmit: async (values) => {\n// //       try {\n// //         await apiService.post(\"/movies/add-movie\", {\n// //           ...values,\n// //           actors,\n// //           producer,\n// //         });\n// //         navigate(\"/\");\n// //       } catch (err) {\n// //         setError(err.response?.data?.message || \"Failed to add movie\");\n// //       }\n// //     },\n// //   });\n\n// //   return (\n// //     <Box sx={{ maxWidth: 600, mx: \"auto\", mt: 4 }}>\n// //       <Typography variant=\"h4\" gutterBottom>\n// //         Add Movie\n// //       </Typography>\n// //       <form onSubmit={formik.handleSubmit}>\n// //         {error && <Typography color=\"error\">{error}</Typography>}\n// //         <TextField label=\"Movie Name\" {...formik.getFieldProps(\"name\")} fullWidth />\n// //         <TextField label=\"Description\" {...formik.getFieldProps(\"desc\")} fullWidth multiline rows={4} />\n// //         <TextField label=\"Director\" {...formik.getFieldProps(\"director\")} fullWidth />\n// //         <TextField label=\"Poster URL\" {...formik.getFieldProps(\"poster\")} fullWidth />\n// //         <TextField label=\"Year of Release\" type=\"number\" {...formik.getFieldProps(\"yearOfRelease\")} fullWidth />\n// //         <FormControl fullWidth>\n// //           <InputLabel>Producer</InputLabel>\n// //           <Select value={producer} onChange={(e) => setProducer(e.target.value)}>\n// //             {producerList.map((prod) => (\n// //               <MenuItem key={prod._id} value={prod._id}>{prod.name}</MenuItem>\n// //             ))}\n// //           </Select>\n// //         </FormControl>\n// //         <FormControl fullWidth>\n// //           <InputLabel>Actors</InputLabel>\n// //           <Select multiple value={actors} onChange={(e) => setActors(e.target.value)}>\n// //             {actorList.map((actor) => (\n// //               <MenuItem key={actor._id} value={actor._id}>{actor.name}</MenuItem>\n// //             ))}\n// //           </Select>\n// //         </FormControl>\n// //         <Button variant=\"contained\" type=\"submit\" fullWidth>\n// //           Add Movie\n// //         </Button>\n// //       </form>\n// //     </Box>\n// //   );\n// // }\n\n// // export default AddMovie;\n// import React, { useEffect, useState } from \"react\";\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   TextField,\n//   Button,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   MenuItem,\n//   CircularProgress,\n//   Box,\n// } from \"@mui/material\";\n// import apiService from \"./services/api.service\"; // Import apiService\n\n// function AddMovie() {\n//   const [actors, setActors] = useState([]);\n//   const [producers, setProducers] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true); // Add loading state\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const actorsData = await apiService.getActors(); // Fetch actors\n//       const producersData = await apiService.getProducers(); // Fetch producers\n//       setActors(actorsData);\n//       setProducers(producersData);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     } finally {\n//       setIsLoading(false); // Set loading to false after fetching\n//     }\n//   };\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(1900, \"*Year must be after 1900\"),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: \"\",\n//       producer: \"\",\n//       actors: [],\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         await apiService.addMovie(values); // Add movie using apiService\n//         alert(\"Movie added successfully!\");\n//         formik.resetForm();\n//       } catch (error) {\n//         console.error(\"Error adding movie:\", error);\n//         alert(\"Failed to add movie. Please try again.\");\n//       }\n//     },\n//   });\n\n//   if (isLoading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//       <TextField\n//         label=\"Enter the name\"\n//         variant=\"outlined\"\n//         id=\"name\"\n//         name=\"name\"\n//         value={formik.values.name}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.name && Boolean(formik.errors.name)}\n//         helperText={formik.touched.name && formik.errors.name}\n//       />\n//       <TextField\n//         label=\"Enter the movie Description\"\n//         variant=\"outlined\"\n//         id=\"desc\"\n//         name=\"desc\"\n//         value={formik.values.desc}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.desc && Boolean(formik.errors.desc)}\n//         helperText={formik.touched.desc && formik.errors.desc}\n//       />\n//       <TextField\n//         label=\"Enter the poster link\"\n//         variant=\"outlined\"\n//         id=\"poster\"\n//         name=\"poster\"\n//         value={formik.values.poster}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.poster && Boolean(formik.errors.poster)}\n//         helperText={formik.touched.poster && formik.errors.poster}\n//       />\n//       <TextField\n//         label=\"Enter the director name\"\n//         variant=\"outlined\"\n//         id=\"director\"\n//         name=\"director\"\n//         value={formik.values.director}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.director && Boolean(formik.errors.director)}\n//         helperText={formik.touched.director && formik.errors.director}\n//       />\n//       <TextField\n//         label=\"Enter the year of release\"\n//         variant=\"outlined\"\n//         id=\"yearOfRelease\"\n//         name=\"yearOfRelease\"\n//         value={formik.values.yearOfRelease}\n//         onChange={formik.handleChange}\n//         onBlur={formik.handleBlur}\n//         error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n//         helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//       />\n//       <FormControl fullWidth>\n//         <InputLabel id=\"producer\">Producer</InputLabel>\n//         <Select\n//           labelId=\"producer\"\n//           id=\"producer\"\n//           name=\"producer\"\n//           value={formik.values.producer}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.producer && Boolean(formik.errors.producer)}\n//         >\n//           {producers.map((producer) => (\n//             <MenuItem key={producer._id} value={producer._id}>\n//               {producer.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <FormControl fullWidth>\n//         <InputLabel id=\"actors\">Actors</InputLabel>\n//         <Select\n//           labelId=\"actors\"\n//           id=\"actors\"\n//           name=\"actors\"\n//           multiple\n//           value={formik.values.actors}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.actors && Boolean(formik.errors.actors)}\n//         >\n//           {actors.map((actor) => (\n//             <MenuItem key={actor._id} value={actor._id}>\n//               {actor.name}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       <Button variant=\"contained\" type=\"submit\">\n//         Add Movie\n//       </Button>\n//     </form>\n//   );\n// }\n\n// export default AddMovie;\nimport React, { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress,\n  Box,\n} from \"@mui/material\";\nimport apiService from \"./services/api.service\"; // Import apiService\n\nfunction AddMovie() {\n  const [actors, setActors] = useState([]);\n  const [producers, setProducers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const actorsData = await apiService.getActors(); // Fetch actors\n      const producersData = await apiService.getProducers(); // Fetch producers\n      setActors(actorsData);\n      setProducers(producersData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setIsLoading(false); // Set loading to false after fetching\n    }\n  };\n\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster is mandatory\").min(5),\n    yearOfRelease: yup\n      .number()\n      .required(\"*Year of release field is mandatory\")\n      .min(1900, \"*Year must be after 1900\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: \"\",\n      producer: \"\",\n      actors: [],\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (values) => {\n      try {\n        await apiService.addMovie(values); // Add movie using apiService\n        alert(\"Movie added successfully!\");\n        formik.resetForm();\n      } catch (error) {\n        console.error(\"Error adding movie:\", error);\n        alert(\"Failed to add movie. Please try again.\");\n      }\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n      <TextField\n        label=\"Enter the name\"\n        variant=\"outlined\"\n        id=\"name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        label=\"Enter the movie Description\"\n        variant=\"outlined\"\n        id=\"desc\"\n        name=\"desc\"\n        value={formik.values.desc}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.desc && Boolean(formik.errors.desc)}\n        helperText={formik.touched.desc && formik.errors.desc}\n      />\n      <TextField\n        label=\"Enter the poster link\"\n        variant=\"outlined\"\n        id=\"poster\"\n        name=\"poster\"\n        value={formik.values.poster}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.poster && Boolean(formik.errors.poster)}\n        helperText={formik.touched.poster && formik.errors.poster}\n      />\n      <TextField\n        label=\"Enter the director name\"\n        variant=\"outlined\"\n        id=\"director\"\n        name=\"director\"\n        value={formik.values.director}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.director && Boolean(formik.errors.director)}\n        helperText={formik.touched.director && formik.errors.director}\n      />\n      <TextField\n        label=\"Enter the year of release\"\n        variant=\"outlined\"\n        id=\"yearOfRelease\"\n        name=\"yearOfRelease\"\n        value={formik.values.yearOfRelease}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.yearOfRelease && Boolean(formik.errors.yearOfRelease)}\n        helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"producer\">Producer</InputLabel>\n        <Select\n          labelId=\"producer\"\n          id=\"producer\"\n          name=\"producer\"\n          value={formik.values.producer}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.producer && Boolean(formik.errors.producer)}\n        >\n          {producers.map((producer) => (\n            <MenuItem key={producer._id} value={producer._id}>\n              {producer.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl fullWidth>\n        <InputLabel id=\"actors\">Actors</InputLabel>\n        <Select\n          labelId=\"actors\"\n          id=\"actors\"\n          name=\"actors\"\n          multiple\n          value={formik.values.actors}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.touched.actors && Boolean(formik.errors.actors)}\n        >\n          {actors.map((actor) => (\n            <MenuItem key={actor._id} value={actor._id}>\n              {actor.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Button variant=\"contained\" type=\"submit\">\n        Add Movie\n      </Button>\n    </form>\n  );\n}\n\nexport default AddMovie;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}