{"ast":null,"code":"// // // // // // // // // //App.js\n// // // import './App.css';\n// // // import { ThemeProvider } from '@emotion/react';\n// // // import { AppBar, Button, Paper, Toolbar, createTheme, Box } from '@mui/material';\n// // // import { useState, useEffect } from 'react';\n// // // import { Route, Routes, useNavigate } from 'react-router-dom';\n// // // import Brightness7Icon from '@mui/icons-material/Brightness7';\n// // // import Brightness4Icon from '@mui/icons-material/Brightness4';\n// // // import CheckCircleIcon from '@mui/icons-material/CheckCircle';\n// // // import CancelIcon from '@mui/icons-material/Cancel';\n// // // import RefreshIcon from '@mui/icons-material/Refresh';\n// // // import AddMovie from './AddMovie';\n// // // import Movie from './Movie';\n// // // import AddActor from './AddActor';\n// // // import AddProducer from './AddProducer';\n// // // import EditMovies from './EditMovies';\n\n// // // const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // // function App() {\n// // //   const [mode, setMode] = useState(\"dark\");\n// // //   const navigate = useNavigate();\n// // //   const [statuses, setStatuses] = useState({\n// // //     backend: false,\n// // //     database: false,\n// // //     actorApi: false,\n// // //     movieApi: false,\n// // //     producerApi: false\n// // //   });\n\n// // //   const theme = createTheme({\n// // //     palette: {\n// // //       mode: mode,\n// // //     },\n// // //   });\n\n// // //   const checkApiStatus = async (endpoint) => {\n// // //     try {\n// // //       const response = await fetch(`${API_BASE_URL}${endpoint}`);\n// // //       return response.ok;\n// // //     } catch (error) {\n// // //       console.error(`Error checking ${endpoint}:`, error);\n// // //       return false;\n// // //     }\n// // //   };\n\n// // //   const checkAllStatuses = async () => {\n// // //     try {\n// // //       // Check backend health and database status\n// // //       const healthResponse = await fetch(`${API_BASE_URL}/health`);\n// // //       const healthData = await healthResponse.json();\n\n// // //       // Check individual API endpoints\n// // //       const [actorStatus, movieStatus, producerStatus] = await Promise.all([\n// // //         checkApiStatus('/api-status/actor'),\n// // //         checkApiStatus('/api-status/movie'),\n// // //         checkApiStatus('/api-status/producer')\n// // //       ]);\n\n// // //       setStatuses({\n// // //         backend: healthResponse.ok,\n// // //         database: healthData.database === \"connected\",\n// // //         actorApi: actorStatus,\n// // //         movieApi: movieStatus,\n// // //         producerApi: producerStatus\n// // //       });\n// // //     } catch (error) {\n// // //       console.error(\"Status check failed:\", error);\n// // //       setStatuses({\n// // //         backend: false,\n// // //         database: false,\n// // //         actorApi: false,\n// // //         movieApi: false,\n// // //         producerApi: false\n// // //       });\n// // //     }\n// // //   };\n\n// // //   useEffect(() => {\n// // //     checkAllStatuses();\n// // //     const interval = setInterval(checkAllStatuses, 30000);\n// // //     return () => clearInterval(interval);\n// // //   }, []);\n\n// // //   const StatusIndicator = ({ isOnline, label }) => (\n// // //     <Box \n// // //       sx={{ \n// // //         display: 'flex', \n// // //         alignItems: 'center', \n// // //         bgcolor: isOnline ? 'rgba(46, 125, 50, 0.1)' : 'rgba(211, 47, 47, 0.1)',\n// // //         color: isOnline ? '#2e7d32' : '#d32f2f',\n// // //         py: 0.5,\n// // //         px: 2,\n// // //         borderRadius: 1,\n// // //         mr: 1\n// // //       }}\n// // //     >\n// // //       {isOnline ? (\n// // //         <CheckCircleIcon sx={{ fontSize: 20, mr: 1 }} />\n// // //       ) : (\n// // //         <CancelIcon sx={{ fontSize: 20, mr: 1 }} />\n// // //       )}\n// // //       {`${label} ${isOnline ? 'ONLINE' : 'OFFLINE'}`}\n// // //     </Box>\n// // //   );\n\n// // //   return (\n// // //     <ThemeProvider theme={theme}>\n// // //       <Paper className=\"paper\" elevation={5} style={{ borderRadius: \"0px\", minHeight: \"100vh\" }}>\n// // //         <AppBar className=\"nav-bar\" position=\"static\">\n// // //           <Toolbar>\n// // //             <Button\n// // //               onClick={() => navigate(\"/\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               <span className='logo'>IMDB</span>\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ALL MOVIES\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/add-movies\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ADD MOVIES\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/add-actor\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ADD ACTOR\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/add-producer\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ADD PRODUCER\n// // //             </Button>\n\n// // //             <Box sx={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\n// // //               <Box sx={{ display: 'flex', alignItems: 'center', mr: 2 }}>\n// // //                 <StatusIndicator isOnline={statuses.backend} label=\"BACKEND\" />\n// // //                 <StatusIndicator isOnline={statuses.database} label=\"DB\" />\n// // //                 <StatusIndicator isOnline={statuses.actorApi} label=\"ACTOR\" />\n// // //                 <StatusIndicator isOnline={statuses.movieApi} label=\"MOVIE\" />\n// // //                 <StatusIndicator isOnline={statuses.producerApi} label=\"PRODUCER\" />\n// // //                 <Button\n// // //                   onClick={checkAllStatuses}\n// // //                   color=\"inherit\"\n// // //                   size=\"small\"\n// // //                   startIcon={<RefreshIcon />}\n// // //                 >\n// // //                   Refresh\n// // //                 </Button>\n// // //               </Box>\n\n// // //               <Button\n// // //                 onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n// // //                 color=\"inherit\"\n// // //                 startIcon={mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n// // //               >\n// // //                 {mode === \"light\" ? \"DARK\" : \"LIGHT\"} MODE\n// // //               </Button>\n// // //             </Box>\n// // //           </Toolbar>\n// // //         </AppBar>\n\n// // //         <Routes>\n// // //           <Route exact path=\"/\" element={<Movie />} />\n// // //           <Route path=\"/add-movies\" element={<AddMovie />} />\n// // //           <Route path=\"/add-actor\" element={<AddActor />} />\n// // //           <Route path=\"/add-producer\" element={<AddProducer />} />\n// // //           <Route path=\"movies/edit/:id\" element={<EditMovies />} />\n// // //         </Routes>\n// // //       </Paper>\n// // //     </ThemeProvider>\n// // //   );\n// // // }\n\n// // // export default App;\n// // // App.js\n// // import { useState, useEffect, useCallback } from 'react';\n// // import { ThemeProvider } from '@emotion/react';\n// // import { \n// //   AppBar, \n// //   Button, \n// //   Paper, \n// //   Toolbar, \n// //   createTheme, \n// //   Box,\n// //   CircularProgress \n// // } from '@mui/material';\n// // import { Route, Routes, useNavigate } from 'react-router-dom';\n// // import { \n// //   Brightness7 as Brightness7Icon,\n// //   Brightness4 as Brightness4Icon,\n// //   CheckCircle as CheckCircleIcon,\n// //   Cancel as CancelIcon,\n// //   Refresh as RefreshIcon\n// // } from '@mui/icons-material';\n// // import { apiService } from './services/api.service';\n// // import AddMovie from './AddMovie';\n// // import Movie from './Movie';\n// // import AddActor from './AddActor';\n// // import AddProducer from './AddProducer';\n// // import EditMovies from './EditMovies';\n// // import './App.css';\n\n// // function App() {\n// //   const [mode, setMode] = useState(() => \n// //     localStorage.getItem('theme') || 'dark'\n// //   );\n// //   const navigate = useNavigate();\n// //   const [loading, setLoading] = useState(true);\n// //   const [statuses, setStatuses] = useState({\n// //     backend: false,\n// //     database: false,\n// //     actorApi: false,\n// //     movieApi: false,\n// //     producerApi: false\n// //   });\n\n// //   const theme = createTheme({\n// //     palette: {\n// //       mode: mode,\n// //       primary: {\n// //         main: mode === 'dark' ? '#90caf9' : '#1976d2',\n// //       },\n// //       background: {\n// //         default: mode === 'dark' ? '#121212' : '#ffffff',\n// //         paper: mode === 'dark' ? '#1e1e1e' : '#ffffff',\n// //       },\n// //     },\n// //   });\n\n// //   const checkAllStatuses = useCallback(async () => {\n// //     try {\n// //       setLoading(true);\n// //       const healthData = await apiService.checkHealth();\n\n// //       const [actorStatus, movieStatus, producerStatus] = await Promise.all([\n// //         apiService.checkApiStatus(apiService.endpoints.API_STATUS.ACTOR),\n// //         apiService.checkApiStatus(apiService.endpoints.API_STATUS.MOVIE),\n// //         apiService.checkApiStatus(apiService.endpoints.API_STATUS.PRODUCER)\n// //       ]);\n\n// //       setStatuses({\n// //         backend: true,\n// //         database: healthData.database === \"connected\",\n// //         actorApi: actorStatus.status === \"success\",\n// //         movieApi: movieStatus.status === \"success\",\n// //         producerApi: producerStatus.status === \"success\"\n// //       });\n// //     } catch (error) {\n// //       console.error(\"Status check failed:\", error);\n// //       setStatuses({\n// //         backend: false,\n// //         database: false,\n// //         actorApi: false,\n// //         movieApi: false,\n// //         producerApi: false\n// //       });\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     checkAllStatuses();\n// //     const interval = setInterval(checkAllStatuses, 30000);\n// //     return () => clearInterval(interval);\n// //   }, [checkAllStatuses]);\n\n// //   useEffect(() => {\n// //     localStorage.setItem('theme', mode);\n// //   }, [mode]);\n\n// //   const StatusIndicator = ({ isOnline, label }) => (\n// //     <Box \n// //       sx={{ \n// //         display: 'flex', \n// //         alignItems: 'center', \n// //         bgcolor: isOnline ? 'success.main' : 'error.main',\n// //         opacity: 0.8,\n// //         py: 0.5,\n// //         px: 2,\n// //         borderRadius: 1,\n// //         mr: 1\n// //       }}\n// //     >\n// //       {isOnline ? (\n// //         <CheckCircleIcon sx={{ fontSize: 20, mr: 1 }} />\n// //       ) : (\n// //         <CancelIcon sx={{ fontSize: 20, mr: 1 }} />\n// //       )}\n// //       {`${label} ${isOnline ? 'ONLINE' : 'OFFLINE'}`}\n// //     </Box>\n// //   );\n\n// //   const NavButton = ({ to, children }) => (\n// //     <Button\n// //       onClick={() => navigate(to)}\n// //       color=\"inherit\"\n// //       sx={{ \n// //         mx: 1,\n// //         '&:hover': {\n// //           backgroundColor: 'rgba(255, 255, 255, 0.1)'\n// //         }\n// //       }}\n// //     >\n// //       {children}\n// //     </Button>\n// //   );\n\n// //   return (\n// //     <ThemeProvider theme={theme}>\n// //       <Paper \n// //         elevation={0} \n// //         sx={{ \n// //           minHeight: '100vh',\n// //           borderRadius: 0,\n// //           transition: 'background-color 0.3s ease'\n// //         }}\n// //       >\n// //         <AppBar position=\"static\" color=\"primary\">\n// //           <Toolbar>\n// //             <NavButton to=\"/\">\n// //               <span className='logo'>IMDB</span>\n// //             </NavButton>\n\n// //             <Box sx={{ flexGrow: 1, display: 'flex' }}>\n// //               <NavButton to=\"/\">ALL MOVIES</NavButton>\n// //               <NavButton to=\"/add-movies\">ADD MOVIES</NavButton>\n// //               <NavButton to=\"/add-actor\">ADD ACTOR</NavButton>\n// //               <NavButton to=\"/add-producer\">ADD PRODUCER</NavButton>\n// //             </Box>\n\n// //             <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n// //               {loading ? (\n// //                 <CircularProgress size={20} color=\"inherit\" />\n// //               ) : (\n// //                 <>\n// //                   <StatusIndicator isOnline={statuses.backend} label=\"BACKEND\" />\n// //                   <StatusIndicator isOnline={statuses.database} label=\"DB\" />\n// //                   <StatusIndicator isOnline={statuses.actorApi} label=\"ACTOR\" />\n// //                   <StatusIndicator isOnline={statuses.movieApi} label=\"MOVIE\" />\n// //                   <StatusIndicator isOnline={statuses.producerApi} label=\"PRODUCER\" />\n// //                 </>\n// //               )}\n\n// //               <Button\n// //                 onClick={checkAllStatuses}\n// //                 color=\"inherit\"\n// //                 disabled={loading}\n// //                 startIcon={<RefreshIcon />}\n// //               >\n// //                 Refresh\n// //               </Button>\n\n// //               <Button\n// //                 onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n// //                 color=\"inherit\"\n// //                 startIcon={mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n// //               >\n// //                 {mode === \"light\" ? \"DARK\" : \"LIGHT\"}\n// //               </Button>\n// //             </Box>\n// //           </Toolbar>\n// //         </AppBar>\n\n// //         <Box sx={{ p: 3 }}>\n// //           <Routes>\n// //             <Route path=\"/\" element={<Movie />} />\n// //             <Route path=\"/add-movies\" element={<AddMovie />} />\n// //             <Route path=\"/add-actor\" element={<AddActor />} />\n// //             <Route path=\"/add-producer\" element={<AddProducer />} />\n// //             <Route path=\"movies/edit/:id\" element={<EditMovies />} />\n// //           </Routes>\n// //         </Box>\n// //       </Paper>\n// //     </ThemeProvider>\n// //   );\n// // }\n\n// // export default App;\n// import { useState, useEffect, useCallback } from \"react\";\n// import { ThemeProvider } from \"@emotion/react\";\n// import {\n//   AppBar,\n//   Button,\n//   Paper,\n//   Toolbar,\n//   createTheme,\n//   Box,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import { Route, Routes, useNavigate } from \"react-router-dom\";\n// import {\n//   Brightness7 as Brightness7Icon,\n//   Brightness4 as Brightness4Icon,\n//   CheckCircle as CheckCircleIcon,\n//   Cancel as CancelIcon,\n//   Refresh as RefreshIcon,\n// } from \"@mui/icons-material\";\n// import apiService from \"./services/api.service\"; // Import as default\n// import AddMovie from \"./AddMovie\";\n// import Movie from \"./Movie\";\n// import AddActor from \"./AddActor\";\n// import AddProducer from \"./AddProducer\";\n// import EditMovies from \"./EditMovies\";\n// import \"./App.css\";\n\n// function App() {\n//   const [mode, setMode] = useState(() => localStorage.getItem(\"theme\") || \"dark\");\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [statuses, setStatuses] = useState({\n//     backend: false,\n//     database: false,\n//     actorApi: false,\n//     movieApi: false,\n//     producerApi: false,\n//   });\n\n//   const theme = createTheme({\n//     palette: {\n//       mode: mode,\n//       primary: {\n//         main: mode === \"dark\" ? \"#90caf9\" : \"#1976d2\",\n//       },\n//       background: {\n//         default: mode === \"dark\" ? \"#121212\" : \"#ffffff\",\n//         paper: mode === \"dark\" ? \"#1e1e1e\" : \"#ffffff\",\n//       },\n//     },\n//   });\n\n//   const checkAllStatuses = useCallback(async () => {\n//     try {\n//       setLoading(true);\n//       const healthData = await apiService.checkHealth();\n\n//       const [actorStatus, movieStatus, producerStatus] = await Promise.all([\n//         apiService.checkApiStatus(API_CONFIG.ENDPOINTS.API_STATUS.ACTOR),\n//         apiService.checkApiStatus(API_CONFIG.ENDPOINTS.API_STATUS.MOVIE),\n//         apiService.checkApiStatus(API_CONFIG.ENDPOINTS.API_STATUS.PRODUCER),\n//       ]);\n\n//       setStatuses({\n//         backend: true,\n//         database: healthData.database === \"connected\",\n//         actorApi: actorStatus.status === \"success\",\n//         movieApi: movieStatus.status === \"success\",\n//         producerApi: producerStatus.status === \"success\",\n//       });\n//     } catch (error) {\n//       console.error(\"Status check failed:\", error);\n//       setStatuses({\n//         backend: false,\n//         database: false,\n//         actorApi: false,\n//         movieApi: false,\n//         producerApi: false,\n//       });\n//     } finally {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     checkAllStatuses();\n//     const interval = setInterval(checkAllStatuses, 30000);\n//     return () => clearInterval(interval);\n//   }, [checkAllStatuses]);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"theme\", mode);\n//   }, [mode]);\n\n//   const StatusIndicator = ({ isOnline, label }) => (\n//     <Box\n//       sx={{\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         bgcolor: isOnline ? \"success.main\" : \"error.main\",\n//         opacity: 0.8,\n//         py: 0.5,\n//         px: 2,\n//         borderRadius: 1,\n//         mr: 1,\n//       }}\n//     >\n//       {isOnline ? (\n//         <CheckCircleIcon sx={{ fontSize: 20, mr: 1 }} />\n//       ) : (\n//         <CancelIcon sx={{ fontSize: 20, mr: 1 }} />\n//       )}\n//       {`${label} ${isOnline ? \"ONLINE\" : \"OFFLINE\"}`}\n//     </Box>\n//   );\n\n//   const NavButton = ({ to, children }) => (\n//     <Button\n//       onClick={() => navigate(to)}\n//       color=\"inherit\"\n//       sx={{\n//         mx: 1,\n//         \"&:hover\": {\n//           backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n//         },\n//       }}\n//     >\n//       {children}\n//     </Button>\n//   );\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Paper\n//         elevation={0}\n//         sx={{\n//           minHeight: \"100vh\",\n//           borderRadius: 0,\n//           transition: \"background-color 0.3s ease\",\n//         }}\n//       >\n//         <AppBar position=\"static\" color=\"primary\">\n//           <Toolbar>\n//             <NavButton to=\"/\">\n//               <span className=\"logo\">IMDB</span>\n//             </NavButton>\n\n//             <Box sx={{ flexGrow: 1, display: \"flex\" }}>\n//               <NavButton to=\"/\">ALL MOVIES</NavButton>\n//               <NavButton to=\"/add-movies\">ADD MOVIES</NavButton>\n//               <NavButton to=\"/add-actor\">ADD ACTOR</NavButton>\n//               <NavButton to=\"/add-producer\">ADD PRODUCER</NavButton>\n//             </Box>\n\n//             <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//               {loading ? (\n//                 <CircularProgress size={20} color=\"inherit\" />\n//               ) : (\n//                 <>\n//                   <StatusIndicator isOnline={statuses.backend} label=\"BACKEND\" />\n//                   <StatusIndicator isOnline={statuses.database} label=\"DB\" />\n//                   <StatusIndicator isOnline={statuses.actorApi} label=\"ACTOR\" />\n//                   <StatusIndicator isOnline={statuses.movieApi} label=\"MOVIE\" />\n//                   <StatusIndicator isOnline={statuses.producerApi} label=\"PRODUCER\" />\n//                 </>\n//               )}\n\n//               <Button\n//                 onClick={checkAllStatuses}\n//                 color=\"inherit\"\n//                 disabled={loading}\n//                 startIcon={<RefreshIcon />}\n//               >\n//                 Refresh\n//               </Button>\n\n//               <Button\n//                 onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n//                 color=\"inherit\"\n//                 startIcon={mode === \"dark\" ? <Brightness7Icon /> : <Brightness4Icon />}\n//               >\n//                 {mode === \"light\" ? \"DARK\" : \"LIGHT\"}\n//               </Button>\n//             </Box>\n//           </Toolbar>\n//         </AppBar>\n\n//         <Box sx={{ p: 3 }}>\n//           <Routes>\n//             <Route path=\"/\" element={<Movie />} />\n//             <Route path=\"/add-movies\" element={<AddMovie />} />\n//             <Route path=\"/add-actor\" element={<AddActor />} />\n//             <Route path=\"/add-producer\" element={<AddProducer />} />\n//             <Route path=\"movies/edit/:id\" element={<EditMovies />} />\n//           </Routes>\n//         </Box>\n//       </Paper>\n//     </ThemeProvider>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/App.js"],"sourcesContent":["// // // // // // // // // //App.js\n// // // import './App.css';\n// // // import { ThemeProvider } from '@emotion/react';\n// // // import { AppBar, Button, Paper, Toolbar, createTheme, Box } from '@mui/material';\n// // // import { useState, useEffect } from 'react';\n// // // import { Route, Routes, useNavigate } from 'react-router-dom';\n// // // import Brightness7Icon from '@mui/icons-material/Brightness7';\n// // // import Brightness4Icon from '@mui/icons-material/Brightness4';\n// // // import CheckCircleIcon from '@mui/icons-material/CheckCircle';\n// // // import CancelIcon from '@mui/icons-material/Cancel';\n// // // import RefreshIcon from '@mui/icons-material/Refresh';\n// // // import AddMovie from './AddMovie';\n// // // import Movie from './Movie';\n// // // import AddActor from './AddActor';\n// // // import AddProducer from './AddProducer';\n// // // import EditMovies from './EditMovies';\n\n// // // const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// // // function App() {\n// // //   const [mode, setMode] = useState(\"dark\");\n// // //   const navigate = useNavigate();\n// // //   const [statuses, setStatuses] = useState({\n// // //     backend: false,\n// // //     database: false,\n// // //     actorApi: false,\n// // //     movieApi: false,\n// // //     producerApi: false\n// // //   });\n\n// // //   const theme = createTheme({\n// // //     palette: {\n// // //       mode: mode,\n// // //     },\n// // //   });\n\n// // //   const checkApiStatus = async (endpoint) => {\n// // //     try {\n// // //       const response = await fetch(`${API_BASE_URL}${endpoint}`);\n// // //       return response.ok;\n// // //     } catch (error) {\n// // //       console.error(`Error checking ${endpoint}:`, error);\n// // //       return false;\n// // //     }\n// // //   };\n\n// // //   const checkAllStatuses = async () => {\n// // //     try {\n// // //       // Check backend health and database status\n// // //       const healthResponse = await fetch(`${API_BASE_URL}/health`);\n// // //       const healthData = await healthResponse.json();\n\n// // //       // Check individual API endpoints\n// // //       const [actorStatus, movieStatus, producerStatus] = await Promise.all([\n// // //         checkApiStatus('/api-status/actor'),\n// // //         checkApiStatus('/api-status/movie'),\n// // //         checkApiStatus('/api-status/producer')\n// // //       ]);\n\n// // //       setStatuses({\n// // //         backend: healthResponse.ok,\n// // //         database: healthData.database === \"connected\",\n// // //         actorApi: actorStatus,\n// // //         movieApi: movieStatus,\n// // //         producerApi: producerStatus\n// // //       });\n// // //     } catch (error) {\n// // //       console.error(\"Status check failed:\", error);\n// // //       setStatuses({\n// // //         backend: false,\n// // //         database: false,\n// // //         actorApi: false,\n// // //         movieApi: false,\n// // //         producerApi: false\n// // //       });\n// // //     }\n// // //   };\n\n// // //   useEffect(() => {\n// // //     checkAllStatuses();\n// // //     const interval = setInterval(checkAllStatuses, 30000);\n// // //     return () => clearInterval(interval);\n// // //   }, []);\n\n// // //   const StatusIndicator = ({ isOnline, label }) => (\n// // //     <Box \n// // //       sx={{ \n// // //         display: 'flex', \n// // //         alignItems: 'center', \n// // //         bgcolor: isOnline ? 'rgba(46, 125, 50, 0.1)' : 'rgba(211, 47, 47, 0.1)',\n// // //         color: isOnline ? '#2e7d32' : '#d32f2f',\n// // //         py: 0.5,\n// // //         px: 2,\n// // //         borderRadius: 1,\n// // //         mr: 1\n// // //       }}\n// // //     >\n// // //       {isOnline ? (\n// // //         <CheckCircleIcon sx={{ fontSize: 20, mr: 1 }} />\n// // //       ) : (\n// // //         <CancelIcon sx={{ fontSize: 20, mr: 1 }} />\n// // //       )}\n// // //       {`${label} ${isOnline ? 'ONLINE' : 'OFFLINE'}`}\n// // //     </Box>\n// // //   );\n\n// // //   return (\n// // //     <ThemeProvider theme={theme}>\n// // //       <Paper className=\"paper\" elevation={5} style={{ borderRadius: \"0px\", minHeight: \"100vh\" }}>\n// // //         <AppBar className=\"nav-bar\" position=\"static\">\n// // //           <Toolbar>\n// // //             <Button\n// // //               onClick={() => navigate(\"/\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               <span className='logo'>IMDB</span>\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ALL MOVIES\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/add-movies\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ADD MOVIES\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/add-actor\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ADD ACTOR\n// // //             </Button>\n// // //             <Button\n// // //               onClick={() => navigate(\"/add-producer\")}\n// // //               color=\"inherit\"\n// // //             >\n// // //               ADD PRODUCER\n// // //             </Button>\n\n// // //             <Box sx={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\n// // //               <Box sx={{ display: 'flex', alignItems: 'center', mr: 2 }}>\n// // //                 <StatusIndicator isOnline={statuses.backend} label=\"BACKEND\" />\n// // //                 <StatusIndicator isOnline={statuses.database} label=\"DB\" />\n// // //                 <StatusIndicator isOnline={statuses.actorApi} label=\"ACTOR\" />\n// // //                 <StatusIndicator isOnline={statuses.movieApi} label=\"MOVIE\" />\n// // //                 <StatusIndicator isOnline={statuses.producerApi} label=\"PRODUCER\" />\n// // //                 <Button\n// // //                   onClick={checkAllStatuses}\n// // //                   color=\"inherit\"\n// // //                   size=\"small\"\n// // //                   startIcon={<RefreshIcon />}\n// // //                 >\n// // //                   Refresh\n// // //                 </Button>\n// // //               </Box>\n              \n// // //               <Button\n// // //                 onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n// // //                 color=\"inherit\"\n// // //                 startIcon={mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n// // //               >\n// // //                 {mode === \"light\" ? \"DARK\" : \"LIGHT\"} MODE\n// // //               </Button>\n// // //             </Box>\n// // //           </Toolbar>\n// // //         </AppBar>\n\n// // //         <Routes>\n// // //           <Route exact path=\"/\" element={<Movie />} />\n// // //           <Route path=\"/add-movies\" element={<AddMovie />} />\n// // //           <Route path=\"/add-actor\" element={<AddActor />} />\n// // //           <Route path=\"/add-producer\" element={<AddProducer />} />\n// // //           <Route path=\"movies/edit/:id\" element={<EditMovies />} />\n// // //         </Routes>\n// // //       </Paper>\n// // //     </ThemeProvider>\n// // //   );\n// // // }\n\n// // // export default App;\n// // // App.js\n// // import { useState, useEffect, useCallback } from 'react';\n// // import { ThemeProvider } from '@emotion/react';\n// // import { \n// //   AppBar, \n// //   Button, \n// //   Paper, \n// //   Toolbar, \n// //   createTheme, \n// //   Box,\n// //   CircularProgress \n// // } from '@mui/material';\n// // import { Route, Routes, useNavigate } from 'react-router-dom';\n// // import { \n// //   Brightness7 as Brightness7Icon,\n// //   Brightness4 as Brightness4Icon,\n// //   CheckCircle as CheckCircleIcon,\n// //   Cancel as CancelIcon,\n// //   Refresh as RefreshIcon\n// // } from '@mui/icons-material';\n// // import { apiService } from './services/api.service';\n// // import AddMovie from './AddMovie';\n// // import Movie from './Movie';\n// // import AddActor from './AddActor';\n// // import AddProducer from './AddProducer';\n// // import EditMovies from './EditMovies';\n// // import './App.css';\n\n// // function App() {\n// //   const [mode, setMode] = useState(() => \n// //     localStorage.getItem('theme') || 'dark'\n// //   );\n// //   const navigate = useNavigate();\n// //   const [loading, setLoading] = useState(true);\n// //   const [statuses, setStatuses] = useState({\n// //     backend: false,\n// //     database: false,\n// //     actorApi: false,\n// //     movieApi: false,\n// //     producerApi: false\n// //   });\n\n// //   const theme = createTheme({\n// //     palette: {\n// //       mode: mode,\n// //       primary: {\n// //         main: mode === 'dark' ? '#90caf9' : '#1976d2',\n// //       },\n// //       background: {\n// //         default: mode === 'dark' ? '#121212' : '#ffffff',\n// //         paper: mode === 'dark' ? '#1e1e1e' : '#ffffff',\n// //       },\n// //     },\n// //   });\n\n// //   const checkAllStatuses = useCallback(async () => {\n// //     try {\n// //       setLoading(true);\n// //       const healthData = await apiService.checkHealth();\n      \n// //       const [actorStatus, movieStatus, producerStatus] = await Promise.all([\n// //         apiService.checkApiStatus(apiService.endpoints.API_STATUS.ACTOR),\n// //         apiService.checkApiStatus(apiService.endpoints.API_STATUS.MOVIE),\n// //         apiService.checkApiStatus(apiService.endpoints.API_STATUS.PRODUCER)\n// //       ]);\n\n// //       setStatuses({\n// //         backend: true,\n// //         database: healthData.database === \"connected\",\n// //         actorApi: actorStatus.status === \"success\",\n// //         movieApi: movieStatus.status === \"success\",\n// //         producerApi: producerStatus.status === \"success\"\n// //       });\n// //     } catch (error) {\n// //       console.error(\"Status check failed:\", error);\n// //       setStatuses({\n// //         backend: false,\n// //         database: false,\n// //         actorApi: false,\n// //         movieApi: false,\n// //         producerApi: false\n// //       });\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     checkAllStatuses();\n// //     const interval = setInterval(checkAllStatuses, 30000);\n// //     return () => clearInterval(interval);\n// //   }, [checkAllStatuses]);\n\n// //   useEffect(() => {\n// //     localStorage.setItem('theme', mode);\n// //   }, [mode]);\n\n// //   const StatusIndicator = ({ isOnline, label }) => (\n// //     <Box \n// //       sx={{ \n// //         display: 'flex', \n// //         alignItems: 'center', \n// //         bgcolor: isOnline ? 'success.main' : 'error.main',\n// //         opacity: 0.8,\n// //         py: 0.5,\n// //         px: 2,\n// //         borderRadius: 1,\n// //         mr: 1\n// //       }}\n// //     >\n// //       {isOnline ? (\n// //         <CheckCircleIcon sx={{ fontSize: 20, mr: 1 }} />\n// //       ) : (\n// //         <CancelIcon sx={{ fontSize: 20, mr: 1 }} />\n// //       )}\n// //       {`${label} ${isOnline ? 'ONLINE' : 'OFFLINE'}`}\n// //     </Box>\n// //   );\n\n// //   const NavButton = ({ to, children }) => (\n// //     <Button\n// //       onClick={() => navigate(to)}\n// //       color=\"inherit\"\n// //       sx={{ \n// //         mx: 1,\n// //         '&:hover': {\n// //           backgroundColor: 'rgba(255, 255, 255, 0.1)'\n// //         }\n// //       }}\n// //     >\n// //       {children}\n// //     </Button>\n// //   );\n\n// //   return (\n// //     <ThemeProvider theme={theme}>\n// //       <Paper \n// //         elevation={0} \n// //         sx={{ \n// //           minHeight: '100vh',\n// //           borderRadius: 0,\n// //           transition: 'background-color 0.3s ease'\n// //         }}\n// //       >\n// //         <AppBar position=\"static\" color=\"primary\">\n// //           <Toolbar>\n// //             <NavButton to=\"/\">\n// //               <span className='logo'>IMDB</span>\n// //             </NavButton>\n            \n// //             <Box sx={{ flexGrow: 1, display: 'flex' }}>\n// //               <NavButton to=\"/\">ALL MOVIES</NavButton>\n// //               <NavButton to=\"/add-movies\">ADD MOVIES</NavButton>\n// //               <NavButton to=\"/add-actor\">ADD ACTOR</NavButton>\n// //               <NavButton to=\"/add-producer\">ADD PRODUCER</NavButton>\n// //             </Box>\n\n// //             <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n// //               {loading ? (\n// //                 <CircularProgress size={20} color=\"inherit\" />\n// //               ) : (\n// //                 <>\n// //                   <StatusIndicator isOnline={statuses.backend} label=\"BACKEND\" />\n// //                   <StatusIndicator isOnline={statuses.database} label=\"DB\" />\n// //                   <StatusIndicator isOnline={statuses.actorApi} label=\"ACTOR\" />\n// //                   <StatusIndicator isOnline={statuses.movieApi} label=\"MOVIE\" />\n// //                   <StatusIndicator isOnline={statuses.producerApi} label=\"PRODUCER\" />\n// //                 </>\n// //               )}\n              \n// //               <Button\n// //                 onClick={checkAllStatuses}\n// //                 color=\"inherit\"\n// //                 disabled={loading}\n// //                 startIcon={<RefreshIcon />}\n// //               >\n// //                 Refresh\n// //               </Button>\n\n// //               <Button\n// //                 onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n// //                 color=\"inherit\"\n// //                 startIcon={mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n// //               >\n// //                 {mode === \"light\" ? \"DARK\" : \"LIGHT\"}\n// //               </Button>\n// //             </Box>\n// //           </Toolbar>\n// //         </AppBar>\n\n// //         <Box sx={{ p: 3 }}>\n// //           <Routes>\n// //             <Route path=\"/\" element={<Movie />} />\n// //             <Route path=\"/add-movies\" element={<AddMovie />} />\n// //             <Route path=\"/add-actor\" element={<AddActor />} />\n// //             <Route path=\"/add-producer\" element={<AddProducer />} />\n// //             <Route path=\"movies/edit/:id\" element={<EditMovies />} />\n// //           </Routes>\n// //         </Box>\n// //       </Paper>\n// //     </ThemeProvider>\n// //   );\n// // }\n\n// // export default App;\n// import { useState, useEffect, useCallback } from \"react\";\n// import { ThemeProvider } from \"@emotion/react\";\n// import {\n//   AppBar,\n//   Button,\n//   Paper,\n//   Toolbar,\n//   createTheme,\n//   Box,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import { Route, Routes, useNavigate } from \"react-router-dom\";\n// import {\n//   Brightness7 as Brightness7Icon,\n//   Brightness4 as Brightness4Icon,\n//   CheckCircle as CheckCircleIcon,\n//   Cancel as CancelIcon,\n//   Refresh as RefreshIcon,\n// } from \"@mui/icons-material\";\n// import apiService from \"./services/api.service\"; // Import as default\n// import AddMovie from \"./AddMovie\";\n// import Movie from \"./Movie\";\n// import AddActor from \"./AddActor\";\n// import AddProducer from \"./AddProducer\";\n// import EditMovies from \"./EditMovies\";\n// import \"./App.css\";\n\n// function App() {\n//   const [mode, setMode] = useState(() => localStorage.getItem(\"theme\") || \"dark\");\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [statuses, setStatuses] = useState({\n//     backend: false,\n//     database: false,\n//     actorApi: false,\n//     movieApi: false,\n//     producerApi: false,\n//   });\n\n//   const theme = createTheme({\n//     palette: {\n//       mode: mode,\n//       primary: {\n//         main: mode === \"dark\" ? \"#90caf9\" : \"#1976d2\",\n//       },\n//       background: {\n//         default: mode === \"dark\" ? \"#121212\" : \"#ffffff\",\n//         paper: mode === \"dark\" ? \"#1e1e1e\" : \"#ffffff\",\n//       },\n//     },\n//   });\n\n//   const checkAllStatuses = useCallback(async () => {\n//     try {\n//       setLoading(true);\n//       const healthData = await apiService.checkHealth();\n\n//       const [actorStatus, movieStatus, producerStatus] = await Promise.all([\n//         apiService.checkApiStatus(API_CONFIG.ENDPOINTS.API_STATUS.ACTOR),\n//         apiService.checkApiStatus(API_CONFIG.ENDPOINTS.API_STATUS.MOVIE),\n//         apiService.checkApiStatus(API_CONFIG.ENDPOINTS.API_STATUS.PRODUCER),\n//       ]);\n\n//       setStatuses({\n//         backend: true,\n//         database: healthData.database === \"connected\",\n//         actorApi: actorStatus.status === \"success\",\n//         movieApi: movieStatus.status === \"success\",\n//         producerApi: producerStatus.status === \"success\",\n//       });\n//     } catch (error) {\n//       console.error(\"Status check failed:\", error);\n//       setStatuses({\n//         backend: false,\n//         database: false,\n//         actorApi: false,\n//         movieApi: false,\n//         producerApi: false,\n//       });\n//     } finally {\n//       setLoading(false);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     checkAllStatuses();\n//     const interval = setInterval(checkAllStatuses, 30000);\n//     return () => clearInterval(interval);\n//   }, [checkAllStatuses]);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"theme\", mode);\n//   }, [mode]);\n\n//   const StatusIndicator = ({ isOnline, label }) => (\n//     <Box\n//       sx={{\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         bgcolor: isOnline ? \"success.main\" : \"error.main\",\n//         opacity: 0.8,\n//         py: 0.5,\n//         px: 2,\n//         borderRadius: 1,\n//         mr: 1,\n//       }}\n//     >\n//       {isOnline ? (\n//         <CheckCircleIcon sx={{ fontSize: 20, mr: 1 }} />\n//       ) : (\n//         <CancelIcon sx={{ fontSize: 20, mr: 1 }} />\n//       )}\n//       {`${label} ${isOnline ? \"ONLINE\" : \"OFFLINE\"}`}\n//     </Box>\n//   );\n\n//   const NavButton = ({ to, children }) => (\n//     <Button\n//       onClick={() => navigate(to)}\n//       color=\"inherit\"\n//       sx={{\n//         mx: 1,\n//         \"&:hover\": {\n//           backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n//         },\n//       }}\n//     >\n//       {children}\n//     </Button>\n//   );\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Paper\n//         elevation={0}\n//         sx={{\n//           minHeight: \"100vh\",\n//           borderRadius: 0,\n//           transition: \"background-color 0.3s ease\",\n//         }}\n//       >\n//         <AppBar position=\"static\" color=\"primary\">\n//           <Toolbar>\n//             <NavButton to=\"/\">\n//               <span className=\"logo\">IMDB</span>\n//             </NavButton>\n\n//             <Box sx={{ flexGrow: 1, display: \"flex\" }}>\n//               <NavButton to=\"/\">ALL MOVIES</NavButton>\n//               <NavButton to=\"/add-movies\">ADD MOVIES</NavButton>\n//               <NavButton to=\"/add-actor\">ADD ACTOR</NavButton>\n//               <NavButton to=\"/add-producer\">ADD PRODUCER</NavButton>\n//             </Box>\n\n//             <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//               {loading ? (\n//                 <CircularProgress size={20} color=\"inherit\" />\n//               ) : (\n//                 <>\n//                   <StatusIndicator isOnline={statuses.backend} label=\"BACKEND\" />\n//                   <StatusIndicator isOnline={statuses.database} label=\"DB\" />\n//                   <StatusIndicator isOnline={statuses.actorApi} label=\"ACTOR\" />\n//                   <StatusIndicator isOnline={statuses.movieApi} label=\"MOVIE\" />\n//                   <StatusIndicator isOnline={statuses.producerApi} label=\"PRODUCER\" />\n//                 </>\n//               )}\n\n//               <Button\n//                 onClick={checkAllStatuses}\n//                 color=\"inherit\"\n//                 disabled={loading}\n//                 startIcon={<RefreshIcon />}\n//               >\n//                 Refresh\n//               </Button>\n\n//               <Button\n//                 onClick={() => setMode(mode === \"light\" ? \"dark\" : \"light\")}\n//                 color=\"inherit\"\n//                 startIcon={mode === \"dark\" ? <Brightness7Icon /> : <Brightness4Icon />}\n//               >\n//                 {mode === \"light\" ? \"DARK\" : \"LIGHT\"}\n//               </Button>\n//             </Box>\n//           </Toolbar>\n//         </AppBar>\n\n//         <Box sx={{ p: 3 }}>\n//           <Routes>\n//             <Route path=\"/\" element={<Movie />} />\n//             <Route path=\"/add-movies\" element={<AddMovie />} />\n//             <Route path=\"/add-actor\" element={<AddActor />} />\n//             <Route path=\"/add-producer\" element={<AddProducer />} />\n//             <Route path=\"movies/edit/:id\" element={<EditMovies />} />\n//           </Routes>\n//         </Box>\n//       </Paper>\n//     </ThemeProvider>\n//   );\n// }\n\n// export default App;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}