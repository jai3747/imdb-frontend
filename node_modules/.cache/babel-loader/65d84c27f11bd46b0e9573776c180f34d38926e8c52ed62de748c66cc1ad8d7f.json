{"ast":null,"code":"//api.services.js\nimport axios from 'axios';\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  TIMEOUT: 10000,\n  RETRY_DELAY: 1000,\n  ENDPOINTS: {\n    HEALTH: '/health',\n    MOVIES: '/movies',\n    ACTORS: '/actors',\n    PRODUCERS: '/producers'\n  }\n};\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst apiService = {\n  getMovies: async () => {\n    try {\n      const response = await apiClient.get('/movies');\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch movies');\n    }\n  },\n  addMovie: async movieData => {\n    try {\n      const response = await apiClient.post('/movies/add-movie', movieData);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to add movie');\n    }\n  },\n  deleteMovie: async id => {\n    try {\n      const response = await apiClient.delete(`/movies/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to delete movie');\n    }\n  },\n  get: async endpoint => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch data');\n    }\n  },\n  post: async (endpoint, data) => {\n    try {\n      const response = await apiClient.post(endpoint, data);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to post data');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","BASE_URL","process","env","REACT_APP_API_URL","TIMEOUT","RETRY_DELAY","ENDPOINTS","HEALTH","MOVIES","ACTORS","PRODUCERS","apiClient","create","baseURL","timeout","headers","apiService","getMovies","response","get","data","error","_error$response","_error$response$data","Error","message","addMovie","movieData","post","_error$response2","_error$response2$data","deleteMovie","id","delete","_error$response3","_error$response3$data","endpoint","_error$response4","_error$response4$data","_error$response5","_error$response5$data"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["\n//api.services.js\nimport axios from 'axios';\n\nconst API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  TIMEOUT: 10000,\n  RETRY_DELAY: 1000,\n  ENDPOINTS: {\n    HEALTH: '/health',\n    MOVIES: '/movies',\n    ACTORS: '/actors',\n    PRODUCERS: '/producers'\n  }\n};\n\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst apiService = {\n  getMovies: async () => {\n    try {\n      const response = await apiClient.get('/movies');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n    }\n  },\n\n  addMovie: async (movieData) => {\n    try {\n      const response = await apiClient.post('/movies/add-movie', movieData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to add movie');\n    }\n  },\n\n  deleteMovie: async (id) => {\n    try {\n      const response = await apiClient.delete(`/movies/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to delete movie');\n    }\n  },\n\n  get: async (endpoint) => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch data');\n    }\n  },\n\n  post: async (endpoint, data) => {\n    try {\n      const response = await apiClient.post(endpoint, data);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to post data');\n    }\n  }\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}