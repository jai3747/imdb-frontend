{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport apiService from \"./services/api.service\"; // Import apiService\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EditMovies() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [movie, setMovie] = useState(null);\n  useEffect(() => {\n    getMovie();\n  }, []);\n  const getMovie = async () => {\n    const moviesData = await apiService.getMovie(id); // Use apiService\n    setMovie(moviesData);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movie ? /*#__PURE__*/_jsxDEV(EditFunction, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(EditMovies, \"2DI+WM1NP8orkt5lpnG0LvHIzCE=\", false, function () {\n  return [useParams];\n});\n_c = EditMovies;\nconst EditFunction = ({\n  movie\n}) => {\n  _s2();\n  const navigate = useNavigate();\n  const [actors, setActors] = useState([]);\n  const [producer, setProducer] = useState(\"\");\n  const [producerArr, setProducerArr] = useState([]);\n  const [actorNames, setActorNames] = useState([]);\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    const producers = await apiService.getProducers(); // Use apiService\n    const actors = await apiService.getActors(); // Use apiService\n    setProducerArr(producers);\n    setActorNames(actors);\n  };\n  const handleProducerChange = e => {\n    const {\n      value\n    } = e.target;\n    setProducer(value);\n  };\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setActors(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster is mandatory\").min(5),\n    yearOfRelease: yup.number().required(\"*Year of release field is mandatory\").min(5)\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: movie.name,\n      desc: movie.desc,\n      director: movie.director,\n      poster: movie.poster,\n      yearOfRelease: movie.yearOfRelease\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async newMovie => {\n      await apiService.updateMovie(movie._id, {\n        ...newMovie,\n        actors,\n        producer\n      }); // Use apiService\n      navigate(\"/\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    className: \"formGroup\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the name\",\n      variant: \"outlined\",\n      id: \"name\",\n      name: \"name\",\n      value: formik.values.name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.name && formik.errors.name,\n      helperText: formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the movie Description\",\n      variant: \"outlined\",\n      id: \"desc\",\n      name: \"desc\",\n      value: formik.values.desc,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.desc && formik.errors.desc,\n      helperText: formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the poster link\",\n      variant: \"outlined\",\n      id: \"poster\",\n      name: \"poster\",\n      value: formik.values.poster,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.poster && formik.errors.poster,\n      helperText: formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the director name\",\n      variant: \"outlined\",\n      id: \"director\",\n      name: \"director\",\n      value: formik.values.director,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.director && formik.errors.director,\n      helperText: formik.touched.director && formik.errors.director ? formik.errors.director : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the year of release\",\n      variant: \"outlined\",\n      id: \"yearOfRelease\",\n      name: \"yearOfRelease\",\n      value: formik.values.yearOfRelease,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.yearOfRelease && formik.errors.yearOfRelease,\n      helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"producer\",\n        children: \"Producer Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"producer\",\n        id: \"producer\",\n        value: producer,\n        label: \"producer\",\n        onChange: handleProducerChange,\n        children: producerArr.map(prodName => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: prodName._id,\n          children: prodName.name\n        }, prodName._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"actor\",\n        children: \"Select the Actor names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"actor\",\n        id: \"actor\",\n        multiple: true,\n        value: actors,\n        onChange: handleChange,\n        children: actorNames.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: actor._id,\n          children: actor.name\n        }, actor._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      children: \"Update Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(EditFunction, \"0kBMbt9GSKnHlmL5YPUNcpa5HOw=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c2 = EditFunction;\nexport default EditMovies;\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useNavigate, useParams } from \"react-router-dom\";\n// // // import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// // // import { Button } from \"@/components/ui/button\";\n// // // import { Input } from \"@/components/ui/input\";\n// // // import { Label } from \"@/components/ui/label\";\n// // // import {\n// // //   Select,\n// // //   SelectContent,\n// // //   SelectItem,\n// // //   SelectTrigger,\n// // //   SelectValue,\n// // // } from \"@/components/ui/select\";\n// // // import {\n// // //   Form,\n// // //   FormControl,\n// // //   FormField,\n// // //   FormItem,\n// // //   FormLabel,\n// // //   FormMessage,\n// // // } from \"@/components/ui/form\";\n// // // import { Loader2 } from \"lucide-react\";\n// // // import { zodResolver } from \"@hookform/resolve\";\n// // // import { useForm } from \"react-hook-form\";\n// // // import * as z from \"zod\";\n// // // import apiService from \"./services/api.service\";\n// // // // import apiService from \"./services/api.service\"; // Import apiService\n// // // // import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\n// // // const movieSchema = z.object({\n// // //   name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n// // //   desc: z.string().min(1, { message: \"Description is required\" }),\n// // //   director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n// // //   poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n// // //   yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n// // //   producer: z.string().min(1, { message: \"Producer is required\" }),\n// // //   actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n// // // });\n\n// // // function EditMovies() {\n// // //   const { id } = useParams();\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [movie, setMovie] = useState(null);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     fetchMovie();\n// // //   }, [id]);\n\n// // //   const fetchMovie = async () => {\n// // //     try {\n// // //       const response = await apiService.get(`/movies/${id}`);\n// // //       setMovie(response);\n// // //       setLoading(false);\n// // //     } catch (err) {\n// // //       setError(\"Failed to fetch movie details\");\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   if (loading) {\n// // //     return (\n// // //       <div className=\"flex justify-center items-center h-64\">\n// // //         <Loader2 className=\"h-8 w-8 animate-spin\" />\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   if (error) {\n// // //     return <div className=\"text-red-500 text-center\">{error}</div>;\n// // //   }\n\n// // //   return movie ? <EditMovieForm movie={movie} /> : null;\n// // // }\n\n// // // function EditMovieForm({ movie }) {\n// // //   const navigate = useNavigate();\n// // //   const [producers, setProducers] = useState([]);\n// // //   const [actors, setActors] = useState([]);\n// // //   const [submitting, setSubmitting] = useState(false);\n\n// // //   const form = useForm({\n// // //     resolver: zodResolver(movieSchema),\n// // //     defaultValues: {\n// // //       name: movie.name,\n// // //       desc: movie.desc,\n// // //       director: movie.director,\n// // //       poster: movie.poster,\n// // //       yearOfRelease: movie.yearOfRelease,\n// // //       producer: movie.producer,\n// // //       actors: movie.actors\n// // //     }\n// // //   });\n\n// // //   useEffect(() => {\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const fetchData = async () => {\n// // //     try {\n// // //       const [producersData, actorsData] = await Promise.all([\n// // //         apiService.get('/producers'),\n// // //         apiService.get('/actors')\n// // //       ]);\n// // //       setProducers(producersData);\n// // //       setActors(actorsData);\n// // //     } catch (error) {\n// // //       console.error('Failed to fetch data:', error);\n// // //     }\n// // //   };\n\n// // //   const onSubmit = async (data) => {\n// // //     try {\n// // //       setSubmitting(true);\n// // //       await apiService.post(`/movies/${movie._id}`, data);\n// // //       navigate('/');\n// // //     } catch (error) {\n// // //       console.error('Failed to update movie:', error);\n// // //     } finally {\n// // //       setSubmitting(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n// // //       <CardHeader>\n// // //         <CardTitle>Edit Movie</CardTitle>\n// // //       </CardHeader>\n// // //       <CardContent>\n// // //         <Form {...form}>\n// // //           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"name\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Movie Name</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"desc\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Description</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"director\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Director</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"poster\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Poster URL</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"yearOfRelease\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Year of Release</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"producer\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Producer</FormLabel>\n// // //                   <Select onValueChange={field.onChange} defaultValue={field.value}>\n// // //                     <FormControl>\n// // //                       <SelectTrigger>\n// // //                         <SelectValue placeholder=\"Select a producer\" />\n// // //                       </SelectTrigger>\n// // //                     </FormControl>\n// // //                     <SelectContent>\n// // //                       {producers.map((producer) => (\n// // //                         <SelectItem key={producer._id} value={producer._id}>\n// // //                           {producer.name}\n// // //                         </SelectItem>\n// // //                       ))}\n// // //                     </SelectContent>\n// // //                   </Select>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"actors\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Actors</FormLabel>\n// // //                   <Select\n// // //                     onValueChange={(value) => field.onChange([...field.value, value])}\n// // //                     value={field.value}\n// // //                     multiple\n// // //                   >\n// // //                     <FormControl>\n// // //                       <SelectTrigger>\n// // //                         <SelectValue placeholder=\"Select actors\" />\n// // //                       </SelectTrigger>\n// // //                     </FormControl>\n// // //                     <SelectContent>\n// // //                       {actors.map((actor) => (\n// // //                         <SelectItem key={actor._id} value={actor._id}>\n// // //                           {actor.name}\n// // //                         </SelectItem>\n// // //                       ))}\n// // //                     </SelectContent>\n// // //                   </Select>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <Button type=\"submit\" disabled={submitting}>\n// // //               {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n// // //               Update Movie\n// // //             </Button>\n// // //           </form>\n// // //         </Form>\n// // //       </CardContent>\n// // //     </Card>\n// // //   );\n// // // }\n\n// // // export default EditMovies;\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate, useParams } from \"react-router-dom\";\n// // import CircularProgress from \"@mui/material/CircularProgress\";\n// // import Box from \"@mui/material/Box\";\n// // import Card from \"@mui/material/Card\";\n// // import CardContent from \"@mui/material/CardContent\";\n// // import CardHeader from \"@mui/material/CardHeader\";\n// // import Button from \"@mui/material/Button\";\n// // import TextField from \"@mui/material/TextField\";\n// // import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// // import apiService from \"./services/api.service\";\n\n// // function EditMovies() {\n// //   const { id } = useParams();\n// //   const [loading, setLoading] = useState(true);\n// //   const [movie, setMovie] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     fetchMovie();\n// //   }, []);\n\n// //   const fetchMovie = async () => {\n// //     try {\n// //       const response = await apiService.get(`/movies/${id}`);\n// //       setMovie(response);\n// //       setLoading(false);\n// //     } catch (err) {\n// //       setError(\"Failed to fetch movie details\");\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   if (error) {\n// //     return <Box sx={{ color: \"error.main\", textAlign: \"center\" }}>{error}</Box>;\n// //   }\n\n// //   return movie ? <EditMovieForm movie={movie} /> : null;\n// // }\n\n// // function EditMovieForm({ movie }) {\n// //   const navigate = useNavigate();\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [formData, setFormData] = useState({\n// //     name: movie.name,\n// //     desc: movie.desc,\n// //     director: movie.director,\n// //     poster: movie.poster,\n// //     yearOfRelease: movie.yearOfRelease,\n// //     producer: movie.producer || \"\",\n// //     actors: movie.actors || []\n// //   });\n// //   const [submitting, setSubmitting] = useState(false);\n// //   const [errors, setErrors] = useState({});\n\n// //   useEffect(() => {\n// //     fetchData();\n// //   }, []);\n\n// //   const fetchData = async () => {\n// //     try {\n// //       const [producersData, actorsData] = await Promise.all([\n// //         apiService.get('/producers'),\n// //         apiService.get('/actors')\n// //       ]);\n// //       setProducers(producersData);\n// //       setActors(actorsData);\n// //     } catch (error) {\n// //       console.error('Failed to fetch data:', error);\n// //     }\n// //   };\n\n// //   const validateForm = () => {\n// //     const newErrors = {};\n// //     if (!formData.name || formData.name.length < 3) {\n// //       newErrors.name = \"Name must be at least 3 characters\";\n// //     }\n// //     if (!formData.desc) {\n// //       newErrors.desc = \"Description is required\";\n// //     }\n// //     if (!formData.director || formData.director.length < 5) {\n// //       newErrors.director = \"Director name must be at least 5 characters\";\n// //     }\n// //     if (!formData.poster || formData.poster.length < 5) {\n// //       newErrors.poster = \"Poster URL must be at least 5 characters\";\n// //     }\n// //     if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n// //       newErrors.yearOfRelease = \"Invalid year\";\n// //     }\n// //     if (!formData.producer) {\n// //       newErrors.producer = \"Producer is required\";\n// //     }\n// //     if (!formData.actors || formData.actors.length === 0) {\n// //       newErrors.actors = \"At least one actor must be selected\";\n// //     }\n// //     setErrors(newErrors);\n// //     return Object.keys(newErrors).length === 0;\n// //   };\n\n// //   const handleChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setFormData(prev => ({\n// //       ...prev,\n// //       [name]: value\n// //     }));\n// //   };\n\n// //   const handleActorsChange = (event) => {\n// //     setFormData(prev => ({\n// //       ...prev,\n// //       actors: event.target.value\n// //     }));\n// //   };\n\n// //   const onSubmit = async (e) => {\n// //     e.preventDefault();\n// //     if (!validateForm()) return;\n\n// //     try {\n// //       setSubmitting(true);\n// //       await apiService.post(`/movies/${movie._id}`, formData);\n// //       navigate('/');\n// //     } catch (error) {\n// //       console.error('Failed to update movie:', error);\n// //     } finally {\n// //       setSubmitting(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n// //       <CardHeader title=\"Edit Movie\" />\n// //       <CardContent>\n// //         <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n// //           <TextField\n// //             label=\"Movie Name\"\n// //             name=\"name\"\n// //             value={formData.name}\n// //             onChange={handleChange}\n// //             error={!!errors.name}\n// //             helperText={errors.name}\n// //             fullWidth\n// //           />\n\n// //           <TextField\n// //             label=\"Description\"\n// //             name=\"desc\"\n// //             value={formData.desc}\n// //             onChange={handleChange}\n// //             error={!!errors.desc}\n// //             helperText={errors.desc}\n// //             fullWidth\n// //             multiline\n// //             rows={3}\n// //           />\n\n// //           <TextField\n// //             label=\"Director\"\n// //             name=\"director\"\n// //             value={formData.director}\n// //             onChange={handleChange}\n// //             error={!!errors.director}\n// //             helperText={errors.director}\n// //             fullWidth\n// //           />\n\n// //           <TextField\n// //             label=\"Poster URL\"\n// //             name=\"poster\"\n// //             value={formData.poster}\n// //             onChange={handleChange}\n// //             error={!!errors.poster}\n// //             helperText={errors.poster}\n// //             fullWidth\n// //           />\n\n// //           <TextField\n// //             label=\"Year of Release\"\n// //             name=\"yearOfRelease\"\n// //             type=\"number\"\n// //             value={formData.yearOfRelease}\n// //             onChange={handleChange}\n// //             error={!!errors.yearOfRelease}\n// //             helperText={errors.yearOfRelease}\n// //             fullWidth\n// //           />\n\n// //           <FormControl fullWidth error={!!errors.producer}>\n// //             <InputLabel>Producer</InputLabel>\n// //             <Select\n// //               name=\"producer\"\n// //               value={formData.producer}\n// //               onChange={handleChange}\n// //               label=\"Producer\"\n// //             >\n// //               {producers.map((producer) => (\n// //                 <MenuItem key={producer._id} value={producer._id}>\n// //                   {producer.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //           </FormControl>\n\n// //           <FormControl fullWidth error={!!errors.actors}>\n// //             <InputLabel>Actors</InputLabel>\n// //             <Select\n// //               multiple\n// //               name=\"actors\"\n// //               value={formData.actors}\n// //               onChange={handleActorsChange}\n// //               label=\"Actors\"\n// //             >\n// //               {actors.map((actor) => (\n// //                 <MenuItem key={actor._id} value={actor._id}>\n// //                   {actor.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //           </FormControl>\n\n// //           <Button \n// //             type=\"submit\" \n// //             variant=\"contained\" \n// //             disabled={submitting}\n// //             sx={{ mt: 2 }}\n// //           >\n// //             {submitting ? \"Updating...\" : \"Update Movie\"}\n// //           </Button>\n// //         </form>\n// //       </CardContent>\n// //     </Card>\n// //   );\n// // }\n\n// // export default EditMovies;\n// // EditMovies.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import Card from \"@mui/material/Card\";\n// import CardContent from \"@mui/material/CardContent\";\n// import CardHeader from \"@mui/material/CardHeader\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { FormControl, InputLabel, MenuItem, Select, FormHelperText } from \"@mui/material\";\n// import Snackbar from '@mui/material/Snackbar';\n// import Alert from '@mui/material/Alert';\n// import apiService from \"./services/api.service\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [movie, setMovie] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     desc: '',\n//     director: '',\n//     poster: '',\n//     yearOfRelease: '',\n//     producer: '',\n//     actors: []\n//   });\n//   const [submitting, setSubmitting] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [snackbar, setSnackbar] = useState({\n//     open: false,\n//     message: '',\n//     severity: 'success'\n//   });\n\n//   useEffect(() => {\n//     fetchInitialData();\n//   }, [id]);\n\n//   const fetchInitialData = async () => {\n//     try {\n//       const [movieData, producersData, actorsData] = await Promise.all([\n//         apiService.getMovie(id),\n//         apiService.getProducers(),\n//         apiService.getActors()\n//       ]);\n\n//       setMovie(movieData);\n//       setProducers(producersData);\n//       setActors(actorsData);\n//       setFormData({\n//         name: movieData.name || '',\n//         desc: movieData.desc || '',\n//         director: movieData.director || '',\n//         poster: movieData.poster || '',\n//         yearOfRelease: movieData.yearOfRelease || '',\n//         producer: movieData.producer || '',\n//         actors: movieData.actors || []\n//       });\n//     } catch (error) {\n//       setSnackbar({\n//         open: true,\n//         message: error.message || 'Failed to load data',\n//         severity: 'error'\n//       });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     if (!formData.name || formData.name.length < 3) {\n//       newErrors.name = \"Name must be at least 3 characters\";\n//     }\n//     if (!formData.desc) {\n//       newErrors.desc = \"Description is required\";\n//     }\n//     if (!formData.director || formData.director.length < 5) {\n//       newErrors.director = \"Director name must be at least 5 characters\";\n//     }\n//     if (!formData.poster || formData.poster.length < 5) {\n//       newErrors.poster = \"Poster URL must be at least 5 characters\";\n//     }\n//     if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n//       newErrors.yearOfRelease = \"Invalid year\";\n//     }\n//     if (!formData.producer) {\n//       newErrors.producer = \"Producer is required\";\n//     }\n//     if (!formData.actors || formData.actors.length === 0) {\n//       newErrors.actors = \"At least one actor must be selected\";\n//     }\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleActorsChange = (event) => {\n//     setFormData(prev => ({\n//       ...prev,\n//       actors: event.target.value\n//     }));\n//   };\n\n//   const handleCloseSnackbar = () => {\n//     setSnackbar(prev => ({ ...prev, open: false }));\n//   };\n\n//   const onSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n\n//     try {\n//       setSubmitting(true);\n//       await apiService.updateMovie(id, formData);\n//       setSnackbar({\n//         open: true,\n//         message: 'Movie updated successfully!',\n//         severity: 'success'\n//       });\n//       setTimeout(() => navigate('/'), 1500);\n//     } catch (error) {\n//       setSnackbar({\n//         open: true,\n//         message: error.message || 'Failed to update movie',\n//         severity: 'error'\n//       });\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <>\n//       <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n//         <CardHeader title=\"Edit Movie\" />\n//         <CardContent>\n//           <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n//             <TextField\n//               label=\"Movie Name\"\n//               name=\"name\"\n//               value={formData.name}\n//               onChange={handleChange}\n//               error={!!errors.name}\n//               helperText={errors.name}\n//               fullWidth\n//             />\n\n//             <TextField\n//               label=\"Description\"\n//               name=\"desc\"\n//               value={formData.desc}\n//               onChange={handleChange}\n//               error={!!errors.desc}\n//               helperText={errors.desc}\n//               fullWidth\n//               multiline\n//               rows={3}\n//             />\n\n//             <TextField\n//               label=\"Director\"\n//               name=\"director\"\n//               value={formData.director}\n//               onChange={handleChange}\n//               error={!!errors.director}\n//               helperText={errors.director}\n//               fullWidth\n//             />\n\n//             <TextField\n//               label=\"Poster URL\"\n//               name=\"poster\"\n//               value={formData.poster}\n//               onChange={handleChange}\n//               error={!!errors.poster}\n//               helperText={errors.poster}\n//               fullWidth\n//             />\n\n//             <TextField\n//               label=\"Year of Release\"\n//               name=\"yearOfRelease\"\n//               type=\"number\"\n//               value={formData.yearOfRelease}\n//               onChange={handleChange}\n//               error={!!errors.yearOfRelease}\n//               helperText={errors.yearOfRelease}\n//               fullWidth\n//             />\n\n//             <FormControl fullWidth error={!!errors.producer}>\n//               <InputLabel>Producer</InputLabel>\n//               <Select\n//                 name=\"producer\"\n//                 value={formData.producer}\n//                 onChange={handleChange}\n//                 label=\"Producer\"\n//               >\n//                 {producers.map((producer) => (\n//                   <MenuItem key={producer._id} value={producer._id}>\n//                     {producer.name}\n//                   </MenuItem>\n//                 ))}\n//               </Select>\n//               {errors.producer && <FormHelperText>{errors.producer}</FormHelperText>}\n//             </FormControl>\n\n//             <FormControl fullWidth error={!!errors.actors}>\n//               <InputLabel>Actors</InputLabel>\n//               <Select\n//                 multiple\n//                 name=\"actors\"\n//                 value={formData.actors}\n//                 onChange={handleActorsChange}\n//                 label=\"Actors\"\n//               >\n//                 {actors.map((actor) => (\n//                   <MenuItem key={actor._id} value={actor._id}>\n//                     {actor.name}\n//                   </MenuItem>\n//                 ))}\n//               </Select>\n//               {errors.actors && <FormHelperText>{errors.actors}</FormHelperText>}\n//             </FormControl>\n\n//             <Button \n//               type=\"submit\" \n//               variant=\"contained\" \n//               disabled={submitting}\n//               sx={{ mt: 2 }}\n//             >\n//               {submitting ? \"Updating...\" : \"Update Movie\"}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n\n//       <Snackbar \n//         open={snackbar.open} \n//         autoHideDuration={6000} \n//         onClose={handleCloseSnackbar}\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//       >\n//         <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\n//           {snackbar.message}\n//         </Alert>\n//       </Snackbar>\n//     </>\n//   );\n// }\n\n// export default EditMovies;\nvar _c, _c2;\n$RefreshReg$(_c, \"EditMovies\");\n$RefreshReg$(_c2, \"EditFunction\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","useNavigate","useParams","CircularProgress","Box","useFormik","yup","FormControl","InputLabel","MenuItem","Select","apiService","jsxDEV","_jsxDEV","Fragment","_Fragment","EditMovies","_s","id","movie","setMovie","getMovie","moviesData","children","EditFunction","fileName","_jsxFileName","lineNumber","columnNumber","sx","display","justifyContent","_c","_s2","navigate","actors","setActors","producer","setProducer","producerArr","setProducerArr","actorNames","setActorNames","getData","producers","getProducers","getActors","handleProducerChange","e","value","target","handleChange","split","movieValidationSchema","object","name","string","required","min","desc","director","poster","yearOfRelease","number","formik","initialValues","validationSchema","onSubmit","newMovie","updateMovie","_id","handleSubmit","className","label","variant","values","onChange","onBlur","handleBlur","error","touched","errors","helperText","fullWidth","labelId","map","prodName","multiple","actor","type","_c2","$RefreshReg$"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport apiService from \"./services/api.service\"; // Import apiService\n\nfunction EditMovies() {\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    getMovie();\n  }, []);\n\n  const getMovie = async () => {\n    const moviesData = await apiService.getMovie(id); // Use apiService\n    setMovie(moviesData);\n  };\n\n  return (\n    <>\n      {movie ? (\n        <EditFunction movie={movie} />\n      ) : (\n        <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n          <CircularProgress />\n        </Box>\n      )}\n    </>\n  );\n}\n\nconst EditFunction = ({ movie }) => {\n  const navigate = useNavigate();\n  const [actors, setActors] = useState([]);\n  const [producer, setProducer] = useState(\"\");\n  const [producerArr, setProducerArr] = useState([]);\n  const [actorNames, setActorNames] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    const producers = await apiService.getProducers(); // Use apiService\n    const actors = await apiService.getActors(); // Use apiService\n    setProducerArr(producers);\n    setActorNames(actors);\n  };\n\n  const handleProducerChange = (e) => {\n    const { value } = e.target;\n    setProducer(value);\n  };\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setActors(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster is mandatory\").min(5),\n    yearOfRelease: yup\n      .number()\n      .required(\"*Year of release field is mandatory\")\n      .min(5),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: movie.name,\n      desc: movie.desc,\n      director: movie.director,\n      poster: movie.poster,\n      yearOfRelease: movie.yearOfRelease,\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (newMovie) => {\n      await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n      navigate(\"/\");\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n      <TextField\n        label=\"Enter the name\"\n        variant=\"outlined\"\n        id=\"name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && formik.errors.name}\n        helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n      />\n      <TextField\n        label=\"Enter the movie Description\"\n        variant=\"outlined\"\n        id=\"desc\"\n        name=\"desc\"\n        value={formik.values.desc}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.desc && formik.errors.desc}\n        helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n      />\n      <TextField\n        label=\"Enter the poster link\"\n        variant=\"outlined\"\n        id=\"poster\"\n        name=\"poster\"\n        value={formik.values.poster}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.poster && formik.errors.poster}\n        helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n      />\n      <TextField\n        label=\"Enter the director name\"\n        variant=\"outlined\"\n        id=\"director\"\n        name=\"director\"\n        value={formik.values.director}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.director && formik.errors.director}\n        helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n      />\n      <TextField\n        label=\"Enter the year of release\"\n        variant=\"outlined\"\n        id=\"yearOfRelease\"\n        name=\"yearOfRelease\"\n        value={formik.values.yearOfRelease}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n        helperText={\n          formik.touched.yearOfRelease && formik.errors.yearOfRelease\n            ? formik.errors.yearOfRelease\n            : \"\"\n        }\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"producer\">Producer Name</InputLabel>\n        <Select\n          labelId=\"producer\"\n          id=\"producer\"\n          value={producer}\n          label=\"producer\"\n          onChange={handleProducerChange}\n        >\n          {producerArr.map((prodName) => (\n            <MenuItem key={prodName._id} value={prodName._id}>\n              {prodName.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl fullWidth>\n        <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n        <Select\n          labelId=\"actor\"\n          id=\"actor\"\n          multiple\n          value={actors}\n          onChange={handleChange}\n        >\n          {actorNames.map((actor) => (\n            <MenuItem key={actor._id} value={actor._id}>\n              {actor.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Button variant=\"contained\" type=\"submit\">\n        Update Movie\n      </Button>\n    </form>\n  );\n};\n\nexport default EditMovies;\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useNavigate, useParams } from \"react-router-dom\";\n// // // import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// // // import { Button } from \"@/components/ui/button\";\n// // // import { Input } from \"@/components/ui/input\";\n// // // import { Label } from \"@/components/ui/label\";\n// // // import {\n// // //   Select,\n// // //   SelectContent,\n// // //   SelectItem,\n// // //   SelectTrigger,\n// // //   SelectValue,\n// // // } from \"@/components/ui/select\";\n// // // import {\n// // //   Form,\n// // //   FormControl,\n// // //   FormField,\n// // //   FormItem,\n// // //   FormLabel,\n// // //   FormMessage,\n// // // } from \"@/components/ui/form\";\n// // // import { Loader2 } from \"lucide-react\";\n// // // import { zodResolver } from \"@hookform/resolve\";\n// // // import { useForm } from \"react-hook-form\";\n// // // import * as z from \"zod\";\n// // // import apiService from \"./services/api.service\";\n// // // // import apiService from \"./services/api.service\"; // Import apiService\n// // // // import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\n// // // const movieSchema = z.object({\n// // //   name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n// // //   desc: z.string().min(1, { message: \"Description is required\" }),\n// // //   director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n// // //   poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n// // //   yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n// // //   producer: z.string().min(1, { message: \"Producer is required\" }),\n// // //   actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n// // // });\n\n// // // function EditMovies() {\n// // //   const { id } = useParams();\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [movie, setMovie] = useState(null);\n// // //   const [error, setError] = useState(null);\n\n// // //   useEffect(() => {\n// // //     fetchMovie();\n// // //   }, [id]);\n\n// // //   const fetchMovie = async () => {\n// // //     try {\n// // //       const response = await apiService.get(`/movies/${id}`);\n// // //       setMovie(response);\n// // //       setLoading(false);\n// // //     } catch (err) {\n// // //       setError(\"Failed to fetch movie details\");\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   if (loading) {\n// // //     return (\n// // //       <div className=\"flex justify-center items-center h-64\">\n// // //         <Loader2 className=\"h-8 w-8 animate-spin\" />\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   if (error) {\n// // //     return <div className=\"text-red-500 text-center\">{error}</div>;\n// // //   }\n\n// // //   return movie ? <EditMovieForm movie={movie} /> : null;\n// // // }\n\n// // // function EditMovieForm({ movie }) {\n// // //   const navigate = useNavigate();\n// // //   const [producers, setProducers] = useState([]);\n// // //   const [actors, setActors] = useState([]);\n// // //   const [submitting, setSubmitting] = useState(false);\n\n// // //   const form = useForm({\n// // //     resolver: zodResolver(movieSchema),\n// // //     defaultValues: {\n// // //       name: movie.name,\n// // //       desc: movie.desc,\n// // //       director: movie.director,\n// // //       poster: movie.poster,\n// // //       yearOfRelease: movie.yearOfRelease,\n// // //       producer: movie.producer,\n// // //       actors: movie.actors\n// // //     }\n// // //   });\n\n// // //   useEffect(() => {\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const fetchData = async () => {\n// // //     try {\n// // //       const [producersData, actorsData] = await Promise.all([\n// // //         apiService.get('/producers'),\n// // //         apiService.get('/actors')\n// // //       ]);\n// // //       setProducers(producersData);\n// // //       setActors(actorsData);\n// // //     } catch (error) {\n// // //       console.error('Failed to fetch data:', error);\n// // //     }\n// // //   };\n\n// // //   const onSubmit = async (data) => {\n// // //     try {\n// // //       setSubmitting(true);\n// // //       await apiService.post(`/movies/${movie._id}`, data);\n// // //       navigate('/');\n// // //     } catch (error) {\n// // //       console.error('Failed to update movie:', error);\n// // //     } finally {\n// // //       setSubmitting(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n// // //       <CardHeader>\n// // //         <CardTitle>Edit Movie</CardTitle>\n// // //       </CardHeader>\n// // //       <CardContent>\n// // //         <Form {...form}>\n// // //           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"name\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Movie Name</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"desc\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Description</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"director\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Director</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"poster\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Poster URL</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input {...field} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"yearOfRelease\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Year of Release</FormLabel>\n// // //                   <FormControl>\n// // //                     <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n// // //                   </FormControl>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"producer\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Producer</FormLabel>\n// // //                   <Select onValueChange={field.onChange} defaultValue={field.value}>\n// // //                     <FormControl>\n// // //                       <SelectTrigger>\n// // //                         <SelectValue placeholder=\"Select a producer\" />\n// // //                       </SelectTrigger>\n// // //                     </FormControl>\n// // //                     <SelectContent>\n// // //                       {producers.map((producer) => (\n// // //                         <SelectItem key={producer._id} value={producer._id}>\n// // //                           {producer.name}\n// // //                         </SelectItem>\n// // //                       ))}\n// // //                     </SelectContent>\n// // //                   </Select>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <FormField\n// // //               control={form.control}\n// // //               name=\"actors\"\n// // //               render={({ field }) => (\n// // //                 <FormItem>\n// // //                   <FormLabel>Actors</FormLabel>\n// // //                   <Select\n// // //                     onValueChange={(value) => field.onChange([...field.value, value])}\n// // //                     value={field.value}\n// // //                     multiple\n// // //                   >\n// // //                     <FormControl>\n// // //                       <SelectTrigger>\n// // //                         <SelectValue placeholder=\"Select actors\" />\n// // //                       </SelectTrigger>\n// // //                     </FormControl>\n// // //                     <SelectContent>\n// // //                       {actors.map((actor) => (\n// // //                         <SelectItem key={actor._id} value={actor._id}>\n// // //                           {actor.name}\n// // //                         </SelectItem>\n// // //                       ))}\n// // //                     </SelectContent>\n// // //                   </Select>\n// // //                   <FormMessage />\n// // //                 </FormItem>\n// // //               )}\n// // //             />\n\n// // //             <Button type=\"submit\" disabled={submitting}>\n// // //               {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n// // //               Update Movie\n// // //             </Button>\n// // //           </form>\n// // //         </Form>\n// // //       </CardContent>\n// // //     </Card>\n// // //   );\n// // // }\n\n// // // export default EditMovies;\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate, useParams } from \"react-router-dom\";\n// // import CircularProgress from \"@mui/material/CircularProgress\";\n// // import Box from \"@mui/material/Box\";\n// // import Card from \"@mui/material/Card\";\n// // import CardContent from \"@mui/material/CardContent\";\n// // import CardHeader from \"@mui/material/CardHeader\";\n// // import Button from \"@mui/material/Button\";\n// // import TextField from \"@mui/material/TextField\";\n// // import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// // import apiService from \"./services/api.service\";\n\n// // function EditMovies() {\n// //   const { id } = useParams();\n// //   const [loading, setLoading] = useState(true);\n// //   const [movie, setMovie] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     fetchMovie();\n// //   }, []);\n\n// //   const fetchMovie = async () => {\n// //     try {\n// //       const response = await apiService.get(`/movies/${id}`);\n// //       setMovie(response);\n// //       setLoading(false);\n// //     } catch (err) {\n// //       setError(\"Failed to fetch movie details\");\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   if (loading) {\n// //     return (\n// //       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n// //         <CircularProgress />\n// //       </Box>\n// //     );\n// //   }\n\n// //   if (error) {\n// //     return <Box sx={{ color: \"error.main\", textAlign: \"center\" }}>{error}</Box>;\n// //   }\n\n// //   return movie ? <EditMovieForm movie={movie} /> : null;\n// // }\n\n// // function EditMovieForm({ movie }) {\n// //   const navigate = useNavigate();\n// //   const [producers, setProducers] = useState([]);\n// //   const [actors, setActors] = useState([]);\n// //   const [formData, setFormData] = useState({\n// //     name: movie.name,\n// //     desc: movie.desc,\n// //     director: movie.director,\n// //     poster: movie.poster,\n// //     yearOfRelease: movie.yearOfRelease,\n// //     producer: movie.producer || \"\",\n// //     actors: movie.actors || []\n// //   });\n// //   const [submitting, setSubmitting] = useState(false);\n// //   const [errors, setErrors] = useState({});\n\n// //   useEffect(() => {\n// //     fetchData();\n// //   }, []);\n\n// //   const fetchData = async () => {\n// //     try {\n// //       const [producersData, actorsData] = await Promise.all([\n// //         apiService.get('/producers'),\n// //         apiService.get('/actors')\n// //       ]);\n// //       setProducers(producersData);\n// //       setActors(actorsData);\n// //     } catch (error) {\n// //       console.error('Failed to fetch data:', error);\n// //     }\n// //   };\n\n// //   const validateForm = () => {\n// //     const newErrors = {};\n// //     if (!formData.name || formData.name.length < 3) {\n// //       newErrors.name = \"Name must be at least 3 characters\";\n// //     }\n// //     if (!formData.desc) {\n// //       newErrors.desc = \"Description is required\";\n// //     }\n// //     if (!formData.director || formData.director.length < 5) {\n// //       newErrors.director = \"Director name must be at least 5 characters\";\n// //     }\n// //     if (!formData.poster || formData.poster.length < 5) {\n// //       newErrors.poster = \"Poster URL must be at least 5 characters\";\n// //     }\n// //     if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n// //       newErrors.yearOfRelease = \"Invalid year\";\n// //     }\n// //     if (!formData.producer) {\n// //       newErrors.producer = \"Producer is required\";\n// //     }\n// //     if (!formData.actors || formData.actors.length === 0) {\n// //       newErrors.actors = \"At least one actor must be selected\";\n// //     }\n// //     setErrors(newErrors);\n// //     return Object.keys(newErrors).length === 0;\n// //   };\n\n// //   const handleChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setFormData(prev => ({\n// //       ...prev,\n// //       [name]: value\n// //     }));\n// //   };\n\n// //   const handleActorsChange = (event) => {\n// //     setFormData(prev => ({\n// //       ...prev,\n// //       actors: event.target.value\n// //     }));\n// //   };\n\n// //   const onSubmit = async (e) => {\n// //     e.preventDefault();\n// //     if (!validateForm()) return;\n\n// //     try {\n// //       setSubmitting(true);\n// //       await apiService.post(`/movies/${movie._id}`, formData);\n// //       navigate('/');\n// //     } catch (error) {\n// //       console.error('Failed to update movie:', error);\n// //     } finally {\n// //       setSubmitting(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n// //       <CardHeader title=\"Edit Movie\" />\n// //       <CardContent>\n// //         <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n// //           <TextField\n// //             label=\"Movie Name\"\n// //             name=\"name\"\n// //             value={formData.name}\n// //             onChange={handleChange}\n// //             error={!!errors.name}\n// //             helperText={errors.name}\n// //             fullWidth\n// //           />\n\n// //           <TextField\n// //             label=\"Description\"\n// //             name=\"desc\"\n// //             value={formData.desc}\n// //             onChange={handleChange}\n// //             error={!!errors.desc}\n// //             helperText={errors.desc}\n// //             fullWidth\n// //             multiline\n// //             rows={3}\n// //           />\n\n// //           <TextField\n// //             label=\"Director\"\n// //             name=\"director\"\n// //             value={formData.director}\n// //             onChange={handleChange}\n// //             error={!!errors.director}\n// //             helperText={errors.director}\n// //             fullWidth\n// //           />\n\n// //           <TextField\n// //             label=\"Poster URL\"\n// //             name=\"poster\"\n// //             value={formData.poster}\n// //             onChange={handleChange}\n// //             error={!!errors.poster}\n// //             helperText={errors.poster}\n// //             fullWidth\n// //           />\n\n// //           <TextField\n// //             label=\"Year of Release\"\n// //             name=\"yearOfRelease\"\n// //             type=\"number\"\n// //             value={formData.yearOfRelease}\n// //             onChange={handleChange}\n// //             error={!!errors.yearOfRelease}\n// //             helperText={errors.yearOfRelease}\n// //             fullWidth\n// //           />\n\n// //           <FormControl fullWidth error={!!errors.producer}>\n// //             <InputLabel>Producer</InputLabel>\n// //             <Select\n// //               name=\"producer\"\n// //               value={formData.producer}\n// //               onChange={handleChange}\n// //               label=\"Producer\"\n// //             >\n// //               {producers.map((producer) => (\n// //                 <MenuItem key={producer._id} value={producer._id}>\n// //                   {producer.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //           </FormControl>\n\n// //           <FormControl fullWidth error={!!errors.actors}>\n// //             <InputLabel>Actors</InputLabel>\n// //             <Select\n// //               multiple\n// //               name=\"actors\"\n// //               value={formData.actors}\n// //               onChange={handleActorsChange}\n// //               label=\"Actors\"\n// //             >\n// //               {actors.map((actor) => (\n// //                 <MenuItem key={actor._id} value={actor._id}>\n// //                   {actor.name}\n// //                 </MenuItem>\n// //               ))}\n// //             </Select>\n// //           </FormControl>\n\n// //           <Button \n// //             type=\"submit\" \n// //             variant=\"contained\" \n// //             disabled={submitting}\n// //             sx={{ mt: 2 }}\n// //           >\n// //             {submitting ? \"Updating...\" : \"Update Movie\"}\n// //           </Button>\n// //         </form>\n// //       </CardContent>\n// //     </Card>\n// //   );\n// // }\n\n// // export default EditMovies;\n// // EditMovies.js\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\n// import Box from \"@mui/material/Box\";\n// import Card from \"@mui/material/Card\";\n// import CardContent from \"@mui/material/CardContent\";\n// import CardHeader from \"@mui/material/CardHeader\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { FormControl, InputLabel, MenuItem, Select, FormHelperText } from \"@mui/material\";\n// import Snackbar from '@mui/material/Snackbar';\n// import Alert from '@mui/material/Alert';\n// import apiService from \"./services/api.service\";\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [loading, setLoading] = useState(true);\n//   const [movie, setMovie] = useState(null);\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     desc: '',\n//     director: '',\n//     poster: '',\n//     yearOfRelease: '',\n//     producer: '',\n//     actors: []\n//   });\n//   const [submitting, setSubmitting] = useState(false);\n//   const [errors, setErrors] = useState({});\n//   const [snackbar, setSnackbar] = useState({\n//     open: false,\n//     message: '',\n//     severity: 'success'\n//   });\n\n//   useEffect(() => {\n//     fetchInitialData();\n//   }, [id]);\n\n//   const fetchInitialData = async () => {\n//     try {\n//       const [movieData, producersData, actorsData] = await Promise.all([\n//         apiService.getMovie(id),\n//         apiService.getProducers(),\n//         apiService.getActors()\n//       ]);\n\n//       setMovie(movieData);\n//       setProducers(producersData);\n//       setActors(actorsData);\n//       setFormData({\n//         name: movieData.name || '',\n//         desc: movieData.desc || '',\n//         director: movieData.director || '',\n//         poster: movieData.poster || '',\n//         yearOfRelease: movieData.yearOfRelease || '',\n//         producer: movieData.producer || '',\n//         actors: movieData.actors || []\n//       });\n//     } catch (error) {\n//       setSnackbar({\n//         open: true,\n//         message: error.message || 'Failed to load data',\n//         severity: 'error'\n//       });\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     if (!formData.name || formData.name.length < 3) {\n//       newErrors.name = \"Name must be at least 3 characters\";\n//     }\n//     if (!formData.desc) {\n//       newErrors.desc = \"Description is required\";\n//     }\n//     if (!formData.director || formData.director.length < 5) {\n//       newErrors.director = \"Director name must be at least 5 characters\";\n//     }\n//     if (!formData.poster || formData.poster.length < 5) {\n//       newErrors.poster = \"Poster URL must be at least 5 characters\";\n//     }\n//     if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n//       newErrors.yearOfRelease = \"Invalid year\";\n//     }\n//     if (!formData.producer) {\n//       newErrors.producer = \"Producer is required\";\n//     }\n//     if (!formData.actors || formData.actors.length === 0) {\n//       newErrors.actors = \"At least one actor must be selected\";\n//     }\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleActorsChange = (event) => {\n//     setFormData(prev => ({\n//       ...prev,\n//       actors: event.target.value\n//     }));\n//   };\n\n//   const handleCloseSnackbar = () => {\n//     setSnackbar(prev => ({ ...prev, open: false }));\n//   };\n\n//   const onSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n\n//     try {\n//       setSubmitting(true);\n//       await apiService.updateMovie(id, formData);\n//       setSnackbar({\n//         open: true,\n//         message: 'Movie updated successfully!',\n//         severity: 'success'\n//       });\n//       setTimeout(() => navigate('/'), 1500);\n//     } catch (error) {\n//       setSnackbar({\n//         open: true,\n//         message: error.message || 'Failed to update movie',\n//         severity: 'error'\n//       });\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <>\n//       <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n//         <CardHeader title=\"Edit Movie\" />\n//         <CardContent>\n//           <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n//             <TextField\n//               label=\"Movie Name\"\n//               name=\"name\"\n//               value={formData.name}\n//               onChange={handleChange}\n//               error={!!errors.name}\n//               helperText={errors.name}\n//               fullWidth\n//             />\n\n//             <TextField\n//               label=\"Description\"\n//               name=\"desc\"\n//               value={formData.desc}\n//               onChange={handleChange}\n//               error={!!errors.desc}\n//               helperText={errors.desc}\n//               fullWidth\n//               multiline\n//               rows={3}\n//             />\n\n//             <TextField\n//               label=\"Director\"\n//               name=\"director\"\n//               value={formData.director}\n//               onChange={handleChange}\n//               error={!!errors.director}\n//               helperText={errors.director}\n//               fullWidth\n//             />\n\n//             <TextField\n//               label=\"Poster URL\"\n//               name=\"poster\"\n//               value={formData.poster}\n//               onChange={handleChange}\n//               error={!!errors.poster}\n//               helperText={errors.poster}\n//               fullWidth\n//             />\n\n//             <TextField\n//               label=\"Year of Release\"\n//               name=\"yearOfRelease\"\n//               type=\"number\"\n//               value={formData.yearOfRelease}\n//               onChange={handleChange}\n//               error={!!errors.yearOfRelease}\n//               helperText={errors.yearOfRelease}\n//               fullWidth\n//             />\n\n//             <FormControl fullWidth error={!!errors.producer}>\n//               <InputLabel>Producer</InputLabel>\n//               <Select\n//                 name=\"producer\"\n//                 value={formData.producer}\n//                 onChange={handleChange}\n//                 label=\"Producer\"\n//               >\n//                 {producers.map((producer) => (\n//                   <MenuItem key={producer._id} value={producer._id}>\n//                     {producer.name}\n//                   </MenuItem>\n//                 ))}\n//               </Select>\n//               {errors.producer && <FormHelperText>{errors.producer}</FormHelperText>}\n//             </FormControl>\n\n//             <FormControl fullWidth error={!!errors.actors}>\n//               <InputLabel>Actors</InputLabel>\n//               <Select\n//                 multiple\n//                 name=\"actors\"\n//                 value={formData.actors}\n//                 onChange={handleActorsChange}\n//                 label=\"Actors\"\n//               >\n//                 {actors.map((actor) => (\n//                   <MenuItem key={actor._id} value={actor._id}>\n//                     {actor.name}\n//                   </MenuItem>\n//                 ))}\n//               </Select>\n//               {errors.actors && <FormHelperText>{errors.actors}</FormHelperText>}\n//             </FormControl>\n\n//             <Button \n//               type=\"submit\" \n//               variant=\"contained\" \n//               disabled={submitting}\n//               sx={{ mt: 2 }}\n//             >\n//               {submitting ? \"Updating...\" : \"Update Movie\"}\n//             </Button>\n//           </form>\n//         </CardContent>\n//       </Card>\n\n//       <Snackbar \n//         open={snackbar.open} \n//         autoHideDuration={6000} \n//         onClose={handleCloseSnackbar}\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//       >\n//         <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>\n//           {snackbar.message}\n//         </Alert>\n//       </Snackbar>\n//     </>\n//   );\n// }\n\n// export default EditMovies;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}