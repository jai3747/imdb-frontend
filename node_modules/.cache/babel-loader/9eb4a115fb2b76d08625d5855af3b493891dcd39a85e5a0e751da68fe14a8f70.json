{"ast":null,"code":"\n// // src/services/api.service.js\n\n// import axios from 'axios';\n// import { API_CONFIG } from '../config/api.config';\n// // Create axios instance with default config\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// });\n\n// // Response interceptor for handling errors\n// apiClient.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     // Don't retry if we've already retried or if it's not an error we want to retry\n//     if (originalRequest._retry || !shouldRetryError(error)) {\n//       throw handleApiError(error);\n//     }\n\n//     originalRequest._retry = true;\n\n//     // Implement exponential backoff\n//     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n//     return apiClient(originalRequest);\n//   }\n// );\n\n// // Error handler utility\n// export const handleApiError = (error) => {\n//   if (error.response) {\n//     // Server responded with error status\n//     const errorMessage = error.response.data?.message || 'An error occurred with the server';\n//     return new Error(errorMessage);\n//   } else if (error.request) {\n//     // Request made but no response\n//     return new Error('Unable to connect to the server');\n//   } else {\n//     // Error in request setup\n//     return new Error('Error setting up the request');\n//   }\n// };\n\n// // Utility to determine if we should retry the request\n// const shouldRetryError = (error) => {\n//   // Retry on network errors or 5xx server errors\n//   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// };\n\n// // Delay utility for retries\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// // API service methods\n// export const apiService = {\n//   // Health check\n//   checkHealth: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   // Check specific API status\n//   checkApiStatus: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   // Movies\n//   movies: {\n//     getAll: async () => {\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     },\n//     add: async (movieData) => {\n//       try {\n//         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     }\n//   },\n\n//   // Actors\n//   actors: {\n//     getAll: async () => {\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     },\n//     add: async (actorData) => {\n//       try {\n//         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     }\n//   },\n\n//   // Producers\n//   producers: {\n//     getAll: async () => {\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     },\n//     add: async (producerData) => {\n//       try {\n//         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     }\n//   }\n// };\n\n// export default apiService;","map":{"version":3,"names":[],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["\n  // // src/services/api.service.js\n  \n  // import axios from 'axios';\n  // import { API_CONFIG } from '../config/api.config';\n  // // Create axios instance with default config\n  // const apiClient = axios.create({\n  //   baseURL: API_CONFIG.BASE_URL,\n  //   timeout: API_CONFIG.TIMEOUT,\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   }\n  // });\n  \n  // // Response interceptor for handling errors\n  // apiClient.interceptors.response.use(\n  //   (response) => response,\n  //   async (error) => {\n  //     const originalRequest = error.config;\n      \n  //     // Don't retry if we've already retried or if it's not an error we want to retry\n  //     if (originalRequest._retry || !shouldRetryError(error)) {\n  //       throw handleApiError(error);\n  //     }\n  \n  //     originalRequest._retry = true;\n      \n  //     // Implement exponential backoff\n  //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n      \n  //     return apiClient(originalRequest);\n  //   }\n  // );\n  \n  // // Error handler utility\n  // export const handleApiError = (error) => {\n  //   if (error.response) {\n  //     // Server responded with error status\n  //     const errorMessage = error.response.data?.message || 'An error occurred with the server';\n  //     return new Error(errorMessage);\n  //   } else if (error.request) {\n  //     // Request made but no response\n  //     return new Error('Unable to connect to the server');\n  //   } else {\n  //     // Error in request setup\n  //     return new Error('Error setting up the request');\n  //   }\n  // };\n  \n  // // Utility to determine if we should retry the request\n  // const shouldRetryError = (error) => {\n  //   // Retry on network errors or 5xx server errors\n  //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n  // };\n  \n  // // Delay utility for retries\n  // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n  \n  // // API service methods\n  // export const apiService = {\n  //   // Health check\n  //   checkHealth: async () => {\n  //     try {\n  //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n  //       return response.data;\n  //     } catch (error) {\n  //       throw handleApiError(error);\n  //     }\n  //   },\n  \n  //   // Check specific API status\n  //   checkApiStatus: async (endpoint) => {\n  //     try {\n  //       const response = await apiClient.get(endpoint);\n  //       return response.data;\n  //     } catch (error) {\n  //       throw handleApiError(error);\n  //     }\n  //   },\n  \n  //   // Movies\n  //   movies: {\n  //     getAll: async () => {\n  //       try {\n  //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     },\n  //     add: async (movieData) => {\n  //       try {\n  //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     }\n  //   },\n  \n  //   // Actors\n  //   actors: {\n  //     getAll: async () => {\n  //       try {\n  //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     },\n  //     add: async (actorData) => {\n  //       try {\n  //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     }\n  //   },\n  \n  //   // Producers\n  //   producers: {\n  //     getAll: async () => {\n  //       try {\n  //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     },\n  //     add: async (producerData) => {\n  //       try {\n  //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     }\n  //   }\n  // };\n  \n  // export default apiService;\n  "],"mappings":";AACE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}