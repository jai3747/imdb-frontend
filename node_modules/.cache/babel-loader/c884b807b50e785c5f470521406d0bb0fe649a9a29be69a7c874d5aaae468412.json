{"ast":null,"code":"// // src/services/api.service.js\n\n// import axios from 'axios';\n// import { API_CONFIG } from '../config/api.config';\n// // Create axios instance with default config\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// });\n\n// // Response interceptor for handling errors\n// apiClient.interceptors.response.use(\n//   (response) => response,\n//   async (error) => {\n//     const originalRequest = error.config;\n\n//     // Don't retry if we've already retried or if it's not an error we want to retry\n//     if (originalRequest._retry || !shouldRetryError(error)) {\n//       throw handleApiError(error);\n//     }\n\n//     originalRequest._retry = true;\n\n//     // Implement exponential backoff\n//     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n\n//     return apiClient(originalRequest);\n//   }\n// );\n\n// // Error handler utility\n// export const handleApiError = (error) => {\n//   if (error.response) {\n//     // Server responded with error status\n//     const errorMessage = error.response.data?.message || 'An error occurred with the server';\n//     return new Error(errorMessage);\n//   } else if (error.request) {\n//     // Request made but no response\n//     return new Error('Unable to connect to the server');\n//   } else {\n//     // Error in request setup\n//     return new Error('Error setting up the request');\n//   }\n// };\n\n// // Utility to determine if we should retry the request\n// const shouldRetryError = (error) => {\n//   // Retry on network errors or 5xx server errors\n//   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n// };\n\n// // Delay utility for retries\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// // API service methods\n// export const apiService = {\n//   // Health check\n//   checkHealth: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   // Check specific API status\n//   checkApiStatus: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       throw handleApiError(error);\n//     }\n//   },\n\n//   // Movies\n//   movies: {\n//     getAll: async () => {\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     },\n//     add: async (movieData) => {\n//       try {\n//         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     }\n//   },\n\n//   // Actors\n//   actors: {\n//     getAll: async () => {\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     },\n//     add: async (actorData) => {\n//       try {\n//         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     }\n//   },\n\n//   // Producers\n//   producers: {\n//     getAll: async () => {\n//       try {\n//         const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     },\n//     add: async (producerData) => {\n//       try {\n//         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n//         return response.data;\n//       } catch (error) {\n//         throw handleApiError(error);\n//       }\n//     }\n//   }\n// };\n\n// export default apiService;\n// src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from '../config/api.config';\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (originalRequest._retry || !shouldRetryError(error)) {\n    throw handleApiError(error);\n  }\n  originalRequest._retry = true;\n  await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n  return apiClient(originalRequest);\n});\nconst handleApiError = error => {\n  if (error.response) {\n    var _error$response$data;\n    return new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred with the server');\n  } else if (error.request) {\n    return new Error('Unable to connect to the server');\n  }\n  return new Error('Error setting up the request');\n};\nconst shouldRetryError = error => {\n  return !error.response || error.response.status >= 500 && error.response.status <= 599;\n};\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const apiService = {\n  checkHealth: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n  checkApiStatus: async endpoint => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n  get: async endpoint => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n  post: async (endpoint, data) => {\n    try {\n      const response = await apiClient.post(endpoint, data);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","apiClient","create","baseURL","BASE_URL","timeout","TIMEOUT","headers","interceptors","response","use","error","originalRequest","config","_retry","shouldRetryError","handleApiError","delay","RETRY_DELAY","_retryCount","_error$response$data","Error","data","message","request","status","ms","Promise","resolve","setTimeout","apiService","checkHealth","get","ENDPOINTS","HEALTH","checkApiStatus","endpoint","post"],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["\n  // // src/services/api.service.js\n  \n  // import axios from 'axios';\n  // import { API_CONFIG } from '../config/api.config';\n  // // Create axios instance with default config\n  // const apiClient = axios.create({\n  //   baseURL: API_CONFIG.BASE_URL,\n  //   timeout: API_CONFIG.TIMEOUT,\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   }\n  // });\n  \n  // // Response interceptor for handling errors\n  // apiClient.interceptors.response.use(\n  //   (response) => response,\n  //   async (error) => {\n  //     const originalRequest = error.config;\n      \n  //     // Don't retry if we've already retried or if it's not an error we want to retry\n  //     if (originalRequest._retry || !shouldRetryError(error)) {\n  //       throw handleApiError(error);\n  //     }\n  \n  //     originalRequest._retry = true;\n      \n  //     // Implement exponential backoff\n  //     await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n      \n  //     return apiClient(originalRequest);\n  //   }\n  // );\n  \n  // // Error handler utility\n  // export const handleApiError = (error) => {\n  //   if (error.response) {\n  //     // Server responded with error status\n  //     const errorMessage = error.response.data?.message || 'An error occurred with the server';\n  //     return new Error(errorMessage);\n  //   } else if (error.request) {\n  //     // Request made but no response\n  //     return new Error('Unable to connect to the server');\n  //   } else {\n  //     // Error in request setup\n  //     return new Error('Error setting up the request');\n  //   }\n  // };\n  \n  // // Utility to determine if we should retry the request\n  // const shouldRetryError = (error) => {\n  //   // Retry on network errors or 5xx server errors\n  //   return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n  // };\n  \n  // // Delay utility for retries\n  // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n  \n  // // API service methods\n  // export const apiService = {\n  //   // Health check\n  //   checkHealth: async () => {\n  //     try {\n  //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n  //       return response.data;\n  //     } catch (error) {\n  //       throw handleApiError(error);\n  //     }\n  //   },\n  \n  //   // Check specific API status\n  //   checkApiStatus: async (endpoint) => {\n  //     try {\n  //       const response = await apiClient.get(endpoint);\n  //       return response.data;\n  //     } catch (error) {\n  //       throw handleApiError(error);\n  //     }\n  //   },\n  \n  //   // Movies\n  //   movies: {\n  //     getAll: async () => {\n  //       try {\n  //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     },\n  //     add: async (movieData) => {\n  //       try {\n  //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     }\n  //   },\n  \n  //   // Actors\n  //   actors: {\n  //     getAll: async () => {\n  //       try {\n  //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     },\n  //     add: async (actorData) => {\n  //       try {\n  //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     }\n  //   },\n  \n  //   // Producers\n  //   producers: {\n  //     getAll: async () => {\n  //       try {\n  //         const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     },\n  //     add: async (producerData) => {\n  //       try {\n  //         const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n  //         return response.data;\n  //       } catch (error) {\n  //         throw handleApiError(error);\n  //       }\n  //     }\n  //   }\n  // };\n  \n  // export default apiService;\n  // src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from '../config/api.config';\n\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\napiClient.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    if (originalRequest._retry || !shouldRetryError(error)) {\n      throw handleApiError(error);\n    }\n\n    originalRequest._retry = true;\n    await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n    \n    return apiClient(originalRequest);\n  }\n);\n\nconst handleApiError = (error) => {\n  if (error.response) {\n    return new Error(error.response.data?.message || 'An error occurred with the server');\n  } else if (error.request) {\n    return new Error('Unable to connect to the server');\n  }\n  return new Error('Error setting up the request');\n};\n\nconst shouldRetryError = (error) => {\n  return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n};\n\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const apiService = {\n  checkHealth: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  checkApiStatus: async (endpoint) => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  get: async (endpoint) => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  post: async (endpoint, data) => {\n    try {\n      const response = await apiClient.post(endpoint, data);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  }\n};\n\nexport default apiService;"],"mappings":"AACE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACF,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,UAAU,CAACI,QAAQ;EAC5BC,OAAO,EAAEL,UAAU,CAACM,OAAO;EAC3BC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFN,SAAS,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EACf,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;EAEpC,IAAID,eAAe,CAACE,MAAM,IAAI,CAACC,gBAAgB,CAACJ,KAAK,CAAC,EAAE;IACtD,MAAMK,cAAc,CAACL,KAAK,CAAC;EAC7B;EAEAC,eAAe,CAACE,MAAM,GAAG,IAAI;EAC7B,MAAMG,KAAK,CAACjB,UAAU,CAACkB,WAAW,IAAIN,eAAe,CAACO,WAAW,IAAI,CAAC,CAAC,CAAC;EAExE,OAAOlB,SAAS,CAACW,eAAe,CAAC;AACnC,CACF,CAAC;AAED,MAAMI,cAAc,GAAIL,KAAK,IAAK;EAChC,IAAIA,KAAK,CAACF,QAAQ,EAAE;IAAA,IAAAW,oBAAA;IAClB,OAAO,IAAIC,KAAK,CAAC,EAAAD,oBAAA,GAAAT,KAAK,CAACF,QAAQ,CAACa,IAAI,cAAAF,oBAAA,uBAAnBA,oBAAA,CAAqBG,OAAO,KAAI,mCAAmC,CAAC;EACvF,CAAC,MAAM,IAAIZ,KAAK,CAACa,OAAO,EAAE;IACxB,OAAO,IAAIH,KAAK,CAAC,iCAAiC,CAAC;EACrD;EACA,OAAO,IAAIA,KAAK,CAAC,8BAA8B,CAAC;AAClD,CAAC;AAED,MAAMN,gBAAgB,GAAIJ,KAAK,IAAK;EAClC,OAAO,CAACA,KAAK,CAACF,QAAQ,IAAKE,KAAK,CAACF,QAAQ,CAACgB,MAAM,IAAI,GAAG,IAAId,KAAK,CAACF,QAAQ,CAACgB,MAAM,IAAI,GAAI;AAC1F,CAAC;AAED,MAAMR,KAAK,GAAIS,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAErE,OAAO,MAAMI,UAAU,GAAG;EACxBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMR,SAAS,CAAC+B,GAAG,CAAChC,UAAU,CAACiC,SAAS,CAACC,MAAM,CAAC;MACjE,OAAOzB,QAAQ,CAACa,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACd,MAAMK,cAAc,CAACL,KAAK,CAAC;IAC7B;EACF,CAAC;EAEDwB,cAAc,EAAE,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMR,SAAS,CAAC+B,GAAG,CAACI,QAAQ,CAAC;MAC9C,OAAO3B,QAAQ,CAACa,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACd,MAAMK,cAAc,CAACL,KAAK,CAAC;IAC7B;EACF,CAAC;EAEDqB,GAAG,EAAE,MAAOI,QAAQ,IAAK;IACvB,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMR,SAAS,CAAC+B,GAAG,CAACI,QAAQ,CAAC;MAC9C,OAAO3B,QAAQ,CAACa,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACd,MAAMK,cAAc,CAACL,KAAK,CAAC;IAC7B;EACF,CAAC;EAED0B,IAAI,EAAE,MAAAA,CAAOD,QAAQ,EAAEd,IAAI,KAAK;IAC9B,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMR,SAAS,CAACoC,IAAI,CAACD,QAAQ,EAAEd,IAAI,CAAC;MACrD,OAAOb,QAAQ,CAACa,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACd,MAAMK,cAAc,CAACL,KAAK,CAAC;IAC7B;EACF;AACF,CAAC;AAED,eAAemB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}