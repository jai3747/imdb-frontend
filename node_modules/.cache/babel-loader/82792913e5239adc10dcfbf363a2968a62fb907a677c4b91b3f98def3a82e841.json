{"ast":null,"code":"// // // import axios from 'axios';\n\n// // // const API_CONFIG = {\n// // //   BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n// // //   TIMEOUT: 10000,\n// // //   RETRY_DELAY: 1000,\n// // //   ENDPOINTS: {\n// // //     HEALTH: '/health',\n// // //     MOVIES: '/movies',\n// // //     ACTORS: '/actors',\n// // //     PRODUCERS: '/producers'\n// // //   }\n// // // };\n\n// // // const apiClient = axios.create({\n// // //   baseURL: API_CONFIG.BASE_URL,\n// // //   timeout: API_CONFIG.TIMEOUT,\n// // //   headers: {\n// // //     'Content-Type': 'application/json'\n// // //   }\n// // // });\n\n// // // const apiService = {\n// // //   getMovies: async () => {\n// // //     try {\n// // //       const response = await apiClient.get('/movies');\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n// // //     }\n// // //   },\n\n// // //   addMovie: async (movieData) => {\n// // //     try {\n// // //       const response = await apiClient.post('/movies/add-movie', movieData);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to add movie');\n// // //     }\n// // //   },\n\n// // //   deleteMovie: async (id) => {\n// // //     try {\n// // //       const response = await apiClient.delete(`/movies/${id}`);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n// // //     }\n// // //   },\n\n// // //   get: async (endpoint) => {\n// // //     try {\n// // //       const response = await apiClient.get(endpoint);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n// // //     }\n// // //   },\n\n// // //   post: async (endpoint, data) => {\n// // //     try {\n// // //       const response = await apiClient.post(endpoint, data);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to post data');\n// // //     }\n// // //   }\n// // // };\n\n// // // export default apiService;\n// // // services/api.service.js\n// // import axios from 'axios';\n\n// // const API_CONFIG = {\n// //   BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n// //   TIMEOUT: 10000,\n// //   RETRY_DELAY: 1000,\n// //   ENDPOINTS: {\n// //     HEALTH: '/health',\n// //     MOVIES: '/movies',\n// //     ACTORS: '/actors',\n// //     PRODUCERS: '/producers'\n// //   }\n// // };\n\n// // const apiClient = axios.create({\n// //   baseURL: API_CONFIG.BASE_URL,\n// //   timeout: API_CONFIG.TIMEOUT,\n// //   headers: {\n// //     'Content-Type': 'application/json'\n// //   }\n// // });\n\n// // const apiService = {\n// //   // Movies\n// //   getMovies: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n// //     }\n// //   },\n\n// //   getMovie: async (id) => {\n// //     try {\n// //       const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch movie');\n// //     }\n// //   },\n\n// //   addMovie: async (movieData) => {\n// //     try {\n// //       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to add movie');\n// //     }\n// //   },\n\n// //   updateMovie: async (id, movieData) => {\n// //     try {\n// //       const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/update-movie/${id}`, movieData);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to update movie');\n// //     }\n// //   },\n\n// //   deleteMovie: async (id) => {\n// //     try {\n// //       const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n// //     }\n// //   },\n\n// //   // Actors\n// //   getActors: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n// //     }\n// //   },\n\n// //   // Producers\n// //   getProducers: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n// //     }\n// //   },\n\n// //   // Generic methods\n// //   get: async (endpoint) => {\n// //     try {\n// //       const response = await apiClient.get(endpoint);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n// //     }\n// //   },\n\n// //   post: async (endpoint, data) => {\n// //     try {\n// //       const response = await apiClient.post(endpoint, data);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to post data');\n// //     }\n// //   }\n// // };\n\n// // export default apiService;\n// // services/api.service.js\n// import axios from 'axios';\n// import { API_CONFIG } from '../config/api.config';\n\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// });\n\n// const apiService = {\n//   // Health Check\n//   checkHealth: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Health check failed');\n//     }\n//   },\n\n//   checkApiStatus: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       return { status: 'error' };\n//     }\n//   },\n\n//   // Movies\n//   getMovies: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n//     }\n//   },\n\n//   getMovie: async (id) => {\n//     try {\n//       const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movie');\n//     }\n//   },\n\n//   addMovie: async (movieData) => {\n//     try {\n//       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add movie');\n//     }\n//   },\n\n//   updateMovie: async (id, movieData) => {\n//     try {\n//       const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/update-movie/${id}`, movieData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to update movie');\n//     }\n//   },\n\n//   deleteMovie: async (id) => {\n//     try {\n//       const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n//     }\n//   },\n\n//   // Actors\n//   getActors: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n//     }\n//   },\n\n//   addActor: async (actorData) => {\n//     try {\n//       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add actor');\n//     }\n//   },\n\n//   // Producers\n//   getProducers: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n//     }\n//   },\n\n//   addProducer: async (producerData) => {\n//     try {\n//       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add producer');\n//     }\n//   },\n\n//   // Generic methods\n//   get: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n//     }\n//   },\n\n//   post: async (endpoint, data) => {\n//     try {\n//       const response = await apiClient.post(endpoint, data);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to post data');\n//     }\n//   }\n// };\n\n// export default apiService;\n// services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from '../config/api.config';\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst apiService = {\n  // Health Check\n  checkHealth: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Health check failed');\n    }\n  },\n  checkApiStatus: async endpoint => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      return {\n        status: 'error'\n      };\n    }\n  },\n  // Movies\n  getMovies: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch movies');\n    }\n  },\n  getMovie: async id => {\n    try {\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch movie');\n    }\n  },\n  addMovie: async movieData => {\n    try {\n      const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, movieData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to add movie');\n    }\n  },\n  updateMovie: async (id, movieData) => {\n    try {\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`, movieData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update movie');\n    }\n  },\n  deleteMovie: async id => {\n    try {\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to delete movie');\n    }\n  },\n  // Actors\n  getActors: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to fetch actors');\n    }\n  },\n  addActor: async actorData => {\n    try {\n      const response = await apiClient.post(API_CONFIG.ENDPOINTS.ACTORS, actorData);\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to add actor');\n    }\n  },\n  // Producers\n  getProducers: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to fetch producers');\n    }\n  },\n  addProducer: async producerData => {\n    try {\n      const response = await apiClient.post(API_CONFIG.ENDPOINTS.PRODUCERS, producerData);\n      return response.data;\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to add producer');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","apiClient","create","baseURL","BASE_URL","timeout","TIMEOUT","headers","apiService","checkHealth","response","get","ENDPOINTS","HEALTH","data","error","_error$response","_error$response$data","Error","message","checkApiStatus","endpoint","status","getMovies","MOVIES","_error$response2","_error$response2$data","getMovie","id","_error$response3","_error$response3$data","addMovie","movieData","post","_error$response4","_error$response4$data","updateMovie","put","_error$response5","_error$response5$data","deleteMovie","delete","_error$response6","_error$response6$data","getActors","ACTORS","_error$response7","_error$response7$data","addActor","actorData","_error$response8","_error$response8$data","getProducers","PRODUCERS","_error$response9","_error$response9$data","addProducer","producerData","_error$response10","_error$response10$dat"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["// // // import axios from 'axios';\n\n// // // const API_CONFIG = {\n// // //   BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n// // //   TIMEOUT: 10000,\n// // //   RETRY_DELAY: 1000,\n// // //   ENDPOINTS: {\n// // //     HEALTH: '/health',\n// // //     MOVIES: '/movies',\n// // //     ACTORS: '/actors',\n// // //     PRODUCERS: '/producers'\n// // //   }\n// // // };\n\n// // // const apiClient = axios.create({\n// // //   baseURL: API_CONFIG.BASE_URL,\n// // //   timeout: API_CONFIG.TIMEOUT,\n// // //   headers: {\n// // //     'Content-Type': 'application/json'\n// // //   }\n// // // });\n\n// // // const apiService = {\n// // //   getMovies: async () => {\n// // //     try {\n// // //       const response = await apiClient.get('/movies');\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n// // //     }\n// // //   },\n\n// // //   addMovie: async (movieData) => {\n// // //     try {\n// // //       const response = await apiClient.post('/movies/add-movie', movieData);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to add movie');\n// // //     }\n// // //   },\n\n// // //   deleteMovie: async (id) => {\n// // //     try {\n// // //       const response = await apiClient.delete(`/movies/${id}`);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n// // //     }\n// // //   },\n\n// // //   get: async (endpoint) => {\n// // //     try {\n// // //       const response = await apiClient.get(endpoint);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n// // //     }\n// // //   },\n\n// // //   post: async (endpoint, data) => {\n// // //     try {\n// // //       const response = await apiClient.post(endpoint, data);\n// // //       return response.data;\n// // //     } catch (error) {\n// // //       throw new Error(error.response?.data?.message || 'Failed to post data');\n// // //     }\n// // //   }\n// // // };\n\n// // // export default apiService;\n// // // services/api.service.js\n// // import axios from 'axios';\n\n// // const API_CONFIG = {\n// //   BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n// //   TIMEOUT: 10000,\n// //   RETRY_DELAY: 1000,\n// //   ENDPOINTS: {\n// //     HEALTH: '/health',\n// //     MOVIES: '/movies',\n// //     ACTORS: '/actors',\n// //     PRODUCERS: '/producers'\n// //   }\n// // };\n\n// // const apiClient = axios.create({\n// //   baseURL: API_CONFIG.BASE_URL,\n// //   timeout: API_CONFIG.TIMEOUT,\n// //   headers: {\n// //     'Content-Type': 'application/json'\n// //   }\n// // });\n\n// // const apiService = {\n// //   // Movies\n// //   getMovies: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n// //     }\n// //   },\n\n// //   getMovie: async (id) => {\n// //     try {\n// //       const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch movie');\n// //     }\n// //   },\n\n// //   addMovie: async (movieData) => {\n// //     try {\n// //       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to add movie');\n// //     }\n// //   },\n\n// //   updateMovie: async (id, movieData) => {\n// //     try {\n// //       const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/update-movie/${id}`, movieData);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to update movie');\n// //     }\n// //   },\n\n// //   deleteMovie: async (id) => {\n// //     try {\n// //       const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n// //     }\n// //   },\n\n// //   // Actors\n// //   getActors: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n// //     }\n// //   },\n\n// //   // Producers\n// //   getProducers: async () => {\n// //     try {\n// //       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n// //     }\n// //   },\n\n// //   // Generic methods\n// //   get: async (endpoint) => {\n// //     try {\n// //       const response = await apiClient.get(endpoint);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n// //     }\n// //   },\n\n// //   post: async (endpoint, data) => {\n// //     try {\n// //       const response = await apiClient.post(endpoint, data);\n// //       return response.data;\n// //     } catch (error) {\n// //       throw new Error(error.response?.data?.message || 'Failed to post data');\n// //     }\n// //   }\n// // };\n\n// // export default apiService;\n// // services/api.service.js\n// import axios from 'axios';\n// import { API_CONFIG } from '../config/api.config';\n\n// const apiClient = axios.create({\n//   baseURL: API_CONFIG.BASE_URL,\n//   timeout: API_CONFIG.TIMEOUT,\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// });\n\n// const apiService = {\n//   // Health Check\n//   checkHealth: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Health check failed');\n//     }\n//   },\n\n//   checkApiStatus: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       return { status: 'error' };\n//     }\n//   },\n\n//   // Movies\n//   getMovies: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n//     }\n//   },\n\n//   getMovie: async (id) => {\n//     try {\n//       const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch movie');\n//     }\n//   },\n\n//   addMovie: async (movieData) => {\n//     try {\n//       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add movie');\n//     }\n//   },\n\n//   updateMovie: async (id, movieData) => {\n//     try {\n//       const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/update-movie/${id}`, movieData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to update movie');\n//     }\n//   },\n\n//   deleteMovie: async (id) => {\n//     try {\n//       const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to delete movie');\n//     }\n//   },\n\n//   // Actors\n//   getActors: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n//     }\n//   },\n\n//   addActor: async (actorData) => {\n//     try {\n//       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add actor');\n//     }\n//   },\n\n//   // Producers\n//   getProducers: async () => {\n//     try {\n//       const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n//     }\n//   },\n\n//   addProducer: async (producerData) => {\n//     try {\n//       const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to add producer');\n//     }\n//   },\n\n//   // Generic methods\n//   get: async (endpoint) => {\n//     try {\n//       const response = await apiClient.get(endpoint);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to fetch data');\n//     }\n//   },\n\n//   post: async (endpoint, data) => {\n//     try {\n//       const response = await apiClient.post(endpoint, data);\n//       return response.data;\n//     } catch (error) {\n//       throw new Error(error.response?.data?.message || 'Failed to post data');\n//     }\n//   }\n// };\n\n// export default apiService;\n// services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from '../config/api.config';\n\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst apiService = {\n  // Health Check\n  checkHealth: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Health check failed');\n    }\n  },\n\n  checkApiStatus: async (endpoint) => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      return { status: 'error' };\n    }\n  },\n\n  // Movies\n  getMovies: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n    }\n  },\n\n  getMovie: async (id) => {\n    try {\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch movie');\n    }\n  },\n\n  addMovie: async (movieData) => {\n    try {\n      const response = await apiClient.post(API_CONFIG.ENDPOINTS.MOVIES, movieData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to add movie');\n    }\n  },\n\n  updateMovie: async (id, movieData) => {\n    try {\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`, movieData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to update movie');\n    }\n  },\n\n  deleteMovie: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to delete movie');\n    }\n  },\n\n  // Actors\n  getActors: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n    }\n  },\n\n  addActor: async (actorData) => {\n    try {\n      const response = await apiClient.post(API_CONFIG.ENDPOINTS.ACTORS, actorData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to add actor');\n    }\n  },\n\n  // Producers\n  getProducers: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n    }\n  },\n\n  addProducer: async (producerData) => {\n    try {\n      const response = await apiClient.post(API_CONFIG.ENDPOINTS.PRODUCERS, producerData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Failed to add producer');\n    }\n  }\n};\n\nexport default apiService;"],"mappingszB,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,UAAU,CAACI,QAAQ;EAC5BC,OAAO,EAAEL,UAAU,CAACM,OAAO;EAC3BC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAG;EACjB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAACX,UAAU,CAACY,SAAS,CAACC,MAAM,CAAC;MACjE,OAAOH,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,qBAAqB,CAAC;IACzE;EACF,CAAC;EAEDC,cAAc,EAAE,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAACU,QAAQ,CAAC;MAC9C,OAAOX,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEO,MAAM,EAAE;MAAQ,CAAC;IAC5B;EACF,CAAC;EAED;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAACX,UAAU,CAACY,SAAS,CAACY,MAAM,CAAC;MACjE,OAAOd,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAU,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIR,KAAK,CAAC,EAAAO,gBAAA,GAAAV,KAAK,CAACL,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBP,OAAO,KAAI,wBAAwB,CAAC;IAC5E;EACF,CAAC;EAEDQ,QAAQ,EAAE,MAAOC,EAAE,IAAK;IACtB,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAAE,GAAEX,UAAU,CAACY,SAAS,CAACY,MAAO,IAAGI,EAAG,EAAC,CAAC;MAC5E,OAAOlB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAc,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIZ,KAAK,CAAC,EAAAW,gBAAA,GAAAd,KAAK,CAACL,QAAQ,cAAAmB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBX,OAAO,KAAI,uBAAuB,CAAC;IAC3E;EACF,CAAC;EAEDY,QAAQ,EAAE,MAAOC,SAAS,IAAK;IAC7B,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMT,SAAS,CAACgC,IAAI,CAACjC,UAAU,CAACY,SAAS,CAACY,MAAM,EAAEQ,SAAS,CAAC;MAC7E,OAAOtB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAmB,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIjB,KAAK,CAAC,EAAAgB,gBAAA,GAAAnB,KAAK,CAACL,QAAQ,cAAAwB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpB,IAAI,cAAAqB,qBAAA,uBAApBA,qBAAA,CAAsBhB,OAAO,KAAI,qBAAqB,CAAC;IACzE;EACF,CAAC;EAEDiB,WAAW,EAAE,MAAAA,CAAOR,EAAE,EAAEI,SAAS,KAAK;IACpC,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMT,SAAS,CAACoC,GAAG,CAAE,GAAErC,UAAU,CAACY,SAAS,CAACY,MAAO,IAAGI,EAAG,EAAC,EAAEI,SAAS,CAAC;MACvF,OAAOtB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAuB,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIrB,KAAK,CAAC,EAAAoB,gBAAA,GAAAvB,KAAK,CAACL,QAAQ,cAAA4B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBxB,IAAI,cAAAyB,qBAAA,uBAApBA,qBAAA,CAAsBpB,OAAO,KAAI,wBAAwB,CAAC;IAC5E;EACF,CAAC;EAEDqB,WAAW,EAAE,MAAOZ,EAAE,IAAK;IACzB,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMT,SAAS,CAACwC,MAAM,CAAE,GAAEzC,UAAU,CAACY,SAAS,CAACY,MAAO,IAAGI,EAAG,EAAC,CAAC;MAC/E,OAAOlB,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAA2B,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIzB,KAAK,CAAC,EAAAwB,gBAAA,GAAA3B,KAAK,CAACL,QAAQ,cAAAgC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB5B,IAAI,cAAA6B,qBAAA,uBAApBA,qBAAA,CAAsBxB,OAAO,KAAI,wBAAwB,CAAC;IAC5E;EACF,CAAC;EAED;EACAyB,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACF,MAAMlC,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAACX,UAAU,CAACY,SAAS,CAACiC,MAAM,CAAC;MACjE,OAAOnC,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAA+B,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAI7B,KAAK,CAAC,EAAA4B,gBAAA,GAAA/B,KAAK,CAACL,QAAQ,cAAAoC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBhC,IAAI,cAAAiC,qBAAA,uBAApBA,qBAAA,CAAsB5B,OAAO,KAAI,wBAAwB,CAAC;IAC5E;EACF,CAAC;EAED6B,QAAQ,EAAE,MAAOC,SAAS,IAAK;IAC7B,IAAI;MACF,MAAMvC,QAAQ,GAAG,MAAMT,SAAS,CAACgC,IAAI,CAACjC,UAAU,CAACY,SAAS,CAACiC,MAAM,EAAEI,SAAS,CAAC;MAC7E,OAAOvC,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAmC,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIjC,KAAK,CAAC,EAAAgC,gBAAA,GAAAnC,KAAK,CAACL,QAAQ,cAAAwC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpC,IAAI,cAAAqC,qBAAA,uBAApBA,qBAAA,CAAsBhC,OAAO,KAAI,qBAAqB,CAAC;IACzE;EACF,CAAC;EAED;EACAiC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMT,SAAS,CAACU,GAAG,CAACX,UAAU,CAACY,SAAS,CAACyC,SAAS,CAAC;MACpE,OAAO3C,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAuC,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIrC,KAAK,CAAC,EAAAoC,gBAAA,GAAAvC,KAAK,CAACL,QAAQ,cAAA4C,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBxC,IAAI,cAAAyC,qBAAA,uBAApBA,qBAAA,CAAsBpC,OAAO,KAAI,2BAA2B,CAAC;IAC/E;EACF,CAAC;EAEDqC,WAAW,EAAE,MAAOC,YAAY,IAAK;IACnC,IAAI;MACF,MAAM/C,QAAQ,GAAG,MAAMT,SAAS,CAACgC,IAAI,CAACjC,UAAU,CAACY,SAAS,CAACyC,SAAS,EAAEI,YAAY,CAAC;MACnF,OAAO/C,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAA2C,iBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIzC,KAAK,CAAC,EAAAwC,iBAAA,GAAA3C,KAAK,CAACL,QAAQ,cAAAgD,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgB5C,IAAI,cAAA6C,qBAAA,uBAApBA,qBAAA,CAAsBxC,OAAO,KAAI,wBAAwB,CAAC;IAC5E;EACF;AACF,CAAC;AAED,eAAeX,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}