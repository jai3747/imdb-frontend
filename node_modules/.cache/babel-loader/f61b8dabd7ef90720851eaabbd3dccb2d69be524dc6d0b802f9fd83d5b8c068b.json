{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// // import Button from \"@mui/material/Button\";\n// // import TextField from \"@mui/material/TextField\";\n// // import { useNavigate, useParams } from \"react-router-dom\";\n// // import CircularProgress from \"@mui/material/CircularProgress\";\n// // import Box from \"@mui/material/Box\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// // import apiService from \"./services/api.service\"; // Import apiService\n\n// // function EditMovies() {\n// //   const { id } = useParams();\n// //   const [movie, setMovie] = useState(null);\n\n// //   useEffect(() => {\n// //     getMovie();\n// //   }, []);\n\n// //   const getMovie = async () => {\n// //     const moviesData = await apiService.getMovie(id); // Use apiService\n// //     setMovie(moviesData);\n// //   };\n\n// //   return (\n// //     <>\n// //       {movie ? (\n// //         <EditFunction movie={movie} />\n// //       ) : (\n// //         <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n// //           <CircularProgress />\n// //         </Box>\n// //       )}\n// //     </>\n// //   );\n// // }\n\n// // const EditFunction = ({ movie }) => {\n// //   const navigate = useNavigate();\n// //   const [actors, setActors] = useState([]);\n// //   const [producer, setProducer] = useState(\"\");\n// //   const [producerArr, setProducerArr] = useState([]);\n// //   const [actorNames, setActorNames] = useState([]);\n\n// //   useEffect(() => {\n// //     getData();\n// //   }, []);\n\n// //   const getData = async () => {\n// //     const producers = await apiService.getProducers(); // Use apiService\n// //     const actors = await apiService.getActors(); // Use apiService\n// //     setProducerArr(producers);\n// //     setActorNames(actors);\n// //   };\n\n// //   const handleProducerChange = (e) => {\n// //     const { value } = e.target;\n// //     setProducer(value);\n// //   };\n\n// //   const handleChange = (e) => {\n// //     const { value } = e.target;\n// //     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n// //   };\n\n// //   const movieValidationSchema = yup.object({\n// //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// //     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n// //     yearOfRelease: yup\n// //       .number()\n// //       .required(\"*Year of release field is mandatory\")\n// //       .min(5),\n// //   });\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: movie.name,\n// //       desc: movie.desc,\n// //       director: movie.director,\n// //       poster: movie.poster,\n// //       yearOfRelease: movie.yearOfRelease,\n// //     },\n// //     validationSchema: movieValidationSchema,\n// //     onSubmit: async (newMovie) => {\n// //       await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n// //       navigate(\"/\");\n// //     },\n// //   });\n\n// //   return (\n// //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// //       <TextField\n// //         label=\"Enter the name\"\n// //         variant=\"outlined\"\n// //         id=\"name\"\n// //         name=\"name\"\n// //         value={formik.values.name}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.name && formik.errors.name}\n// //         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the movie Description\"\n// //         variant=\"outlined\"\n// //         id=\"desc\"\n// //         name=\"desc\"\n// //         value={formik.values.desc}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.desc && formik.errors.desc}\n// //         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the poster link\"\n// //         variant=\"outlined\"\n// //         id=\"poster\"\n// //         name=\"poster\"\n// //         value={formik.values.poster}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.poster && formik.errors.poster}\n// //         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the director name\"\n// //         variant=\"outlined\"\n// //         id=\"director\"\n// //         name=\"director\"\n// //         value={formik.values.director}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.director && formik.errors.director}\n// //         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the year of release\"\n// //         variant=\"outlined\"\n// //         id=\"yearOfRelease\"\n// //         name=\"yearOfRelease\"\n// //         value={formik.values.yearOfRelease}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// //         helperText={\n// //           formik.touched.yearOfRelease && formik.errors.yearOfRelease\n// //             ? formik.errors.yearOfRelease\n// //             : \"\"\n// //         }\n// //       />\n// //       <FormControl fullWidth>\n// //         <InputLabel id=\"producer\">Producer Name</InputLabel>\n// //         <Select\n// //           labelId=\"producer\"\n// //           id=\"producer\"\n// //           value={producer}\n// //           label=\"producer\"\n// //           onChange={handleProducerChange}\n// //         >\n// //           {producerArr.map((prodName) => (\n// //             <MenuItem key={prodName._id} value={prodName._id}>\n// //               {prodName.name}\n// //             </MenuItem>\n// //           ))}\n// //         </Select>\n// //       </FormControl>\n// //       <FormControl fullWidth>\n// //         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// //         <Select\n// //           labelId=\"actor\"\n// //           id=\"actor\"\n// //           multiple\n// //           value={actors}\n// //           onChange={handleChange}\n// //         >\n// //           {actorNames.map((actor) => (\n// //             <MenuItem key={actor._id} value={actor._id}>\n// //               {actor.name}\n// //             </MenuItem>\n// //           ))}\n// //         </Select>\n// //       </FormControl>\n// //       <Button variant=\"contained\" type=\"submit\">\n// //         Update Movie\n// //       </Button>\n// //     </form>\n// //   );\n// // };\n\n// // export default EditMovies;\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Button } from \"@/components/ui/button\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"@/components/ui/select\";\n// import {\n//   Form,\n//   FormControl,\n//   FormField,\n//   FormItem,\n//   FormLabel,\n//   FormMessage,\n// } from \"@/components/ui/form\";\n// import { Loader2 } from \"lucide-react\";\n// import { zodResolver } from \"@hookform/resolve\";\n// import { useForm } from \"react-hook-form\";\n// import * as z from \"zod\";\n// import apiService from \"./services/api.service\";\n// // import apiService from \"./services/api.service\"; // Import apiService\n// // import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\n// const movieSchema = z.object({\n//   name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n//   desc: z.string().min(1, { message: \"Description is required\" }),\n//   director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n//   poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n//   yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n//   producer: z.string().min(1, { message: \"Producer is required\" }),\n//   actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n// });\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const [loading, setLoading] = useState(true);\n//   const [movie, setMovie] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetchMovie();\n//   }, [id]);\n\n//   const fetchMovie = async () => {\n//     try {\n//       const response = await apiService.get(`/movies/${id}`);\n//       setMovie(response);\n//       setLoading(false);\n//     } catch (err) {\n//       setError(\"Failed to fetch movie details\");\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"flex justify-center items-center h-64\">\n//         <Loader2 className=\"h-8 w-8 animate-spin\" />\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return <div className=\"text-red-500 text-center\">{error}</div>;\n//   }\n\n//   return movie ? <EditMovieForm movie={movie} /> : null;\n// }\n\n// function EditMovieForm({ movie }) {\n//   const navigate = useNavigate();\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [submitting, setSubmitting] = useState(false);\n\n//   const form = useForm({\n//     resolver: zodResolver(movieSchema),\n//     defaultValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n//       producer: movie.producer,\n//       actors: movie.actors\n//     }\n//   });\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [producersData, actorsData] = await Promise.all([\n//         apiService.get('/producers'),\n//         apiService.get('/actors')\n//       ]);\n//       setProducers(producersData);\n//       setActors(actorsData);\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//     }\n//   };\n\n//   const onSubmit = async (data) => {\n//     try {\n//       setSubmitting(true);\n//       await apiService.post(`/movies/${movie._id}`, data);\n//       navigate('/');\n//     } catch (error) {\n//       console.error('Failed to update movie:', error);\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n//       <CardHeader>\n//         <CardTitle>Edit Movie</CardTitle>\n//       </CardHeader>\n//       <CardContent>\n//         <Form {...form}>\n//           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n//             <FormField\n//               control={form.control}\n//               name=\"name\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Movie Name</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"desc\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Description</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"director\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Director</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"poster\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Poster URL</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"yearOfRelease\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Year of Release</FormLabel>\n//                   <FormControl>\n//                     <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"producer\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Producer</FormLabel>\n//                   <Select onValueChange={field.onChange} defaultValue={field.value}>\n//                     <FormControl>\n//                       <SelectTrigger>\n//                         <SelectValue placeholder=\"Select a producer\" />\n//                       </SelectTrigger>\n//                     </FormControl>\n//                     <SelectContent>\n//                       {producers.map((producer) => (\n//                         <SelectItem key={producer._id} value={producer._id}>\n//                           {producer.name}\n//                         </SelectItem>\n//                       ))}\n//                     </SelectContent>\n//                   </Select>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"actors\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Actors</FormLabel>\n//                   <Select\n//                     onValueChange={(value) => field.onChange([...field.value, value])}\n//                     value={field.value}\n//                     multiple\n//                   >\n//                     <FormControl>\n//                       <SelectTrigger>\n//                         <SelectValue placeholder=\"Select actors\" />\n//                       </SelectTrigger>\n//                     </FormControl>\n//                     <SelectContent>\n//                       {actors.map((actor) => (\n//                         <SelectItem key={actor._id} value={actor._id}>\n//                           {actor.name}\n//                         </SelectItem>\n//                       ))}\n//                     </SelectContent>\n//                   </Select>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <Button type=\"submit\" disabled={submitting}>\n//               {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n//               Update Movie\n//             </Button>\n//           </form>\n//         </Form>\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default EditMovies;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport apiService from \"./services/api.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditMovies() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMovie();\n  }, []);\n  const fetchMovie = async () => {\n    try {\n      const response = await apiService.get(`/movies/${id}`);\n      setMovie(response);\n      setLoading(false);\n    } catch (err) {\n      setError(\"Failed to fetch movie details\");\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"64vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        color: \"error.main\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 12\n    }, this);\n  }\n  return movie ? /*#__PURE__*/_jsxDEV(EditMovieForm, {\n    movie: movie\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 504,\n    columnNumber: 18\n  }, this) : null;\n}\n_s(EditMovies, \"DqEGB/FfHLNyOINua3CQQpdYJX8=\", false, function () {\n  return [useParams];\n});\n_c = EditMovies;\nfunction EditMovieForm({\n  movie\n}) {\n  _s2();\n  const navigate = useNavigate();\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [formData, setFormData] = useState({\n    name: movie.name,\n    desc: movie.desc,\n    director: movie.director,\n    poster: movie.poster,\n    yearOfRelease: movie.yearOfRelease,\n    producer: movie.producer || \"\",\n    actors: movie.actors || []\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const [producersData, actorsData] = await Promise.all([apiService.get('/producers'), apiService.get('/actors')]);\n      setProducers(producersData);\n      setActors(actorsData);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.name || formData.name.length < 3) {\n      newErrors.name = \"Name must be at least 3 characters\";\n    }\n    if (!formData.desc) {\n      newErrors.desc = \"Description is required\";\n    }\n    if (!formData.director || formData.director.length < 5) {\n      newErrors.director = \"Director name must be at least 5 characters\";\n    }\n    if (!formData.poster || formData.poster.length < 5) {\n      newErrors.poster = \"Poster URL must be at least 5 characters\";\n    }\n    if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n      newErrors.yearOfRelease = \"Invalid year\";\n    }\n    if (!formData.producer) {\n      newErrors.producer = \"Producer is required\";\n    }\n    if (!formData.actors || formData.actors.length === 0) {\n      newErrors.actors = \"At least one actor must be selected\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleActorsChange = event => {\n    setFormData(prev => ({\n      ...prev,\n      actors: event.target.value\n    }));\n  };\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    try {\n      setSubmitting(true);\n      await apiService.post(`/movies/${movie._id}`, formData);\n      navigate('/');\n    } catch (error) {\n      console.error('Failed to update movie:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 800,\n      margin: \"2rem auto\",\n      padding: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Edit Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Movie Name\",\n          name: \"name\",\n          value: formData.name,\n          onChange: handleChange,\n          error: !!errors.name,\n          helperText: errors.name,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Description\",\n          name: \"desc\",\n          value: formData.desc,\n          onChange: handleChange,\n          error: !!errors.desc,\n          helperText: errors.desc,\n          fullWidth: true,\n          multiline: true,\n          rows: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Director\",\n          name: \"director\",\n          value: formData.director,\n          onChange: handleChange,\n          error: !!errors.director,\n          helperText: errors.director,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Poster URL\",\n          name: \"poster\",\n          value: formData.poster,\n          onChange: handleChange,\n          error: !!errors.poster,\n          helperText: errors.poster,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Year of Release\",\n          name: \"yearOfRelease\",\n          type: \"number\",\n          value: formData.yearOfRelease,\n          onChange: handleChange,\n          error: !!errors.yearOfRelease,\n          helperText: errors.yearOfRelease,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: !!errors.producer,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"producer\",\n            value: formData.producer,\n            onChange: handleChange,\n            label: \"Producer\",\n            children: producers.map(producer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: producer._id,\n              children: producer.name\n            }, producer._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          error: !!errors.actors,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Actors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            multiple: true,\n            name: \"actors\",\n            value: formData.actors,\n            onChange: handleActorsChange,\n            label: \"Actors\",\n            children: actors.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: actor._id,\n              children: actor.name\n            }, actor._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          disabled: submitting,\n          sx: {\n            mt: 2\n          },\n          children: submitting ? \"Updating...\" : \"Update Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 598,\n    columnNumber: 5\n  }, this);\n}\n_s2(EditMovieForm, \"Yf1nCAQQoLstICdE2zmKwCQRbtQ=\", false, function () {\n  return [useNavigate];\n});\n_c2 = EditMovieForm;\nexport default EditMovies;\nvar _c, _c2;\n$RefreshReg$(_c, \"EditMovies\");\n$RefreshReg$(_c2, \"EditMovieForm\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","CircularProgress","Box","Card","CardContent","CardHeader","Button","TextField","FormControl","InputLabel","MenuItem","Select","apiService","jsxDEV","_jsxDEV","EditMovies","_s","id","loading","setLoading","movie","setMovie","error","setError","fetchMovie","response","get","err","sx","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","color","textAlign","EditMovieForm","_c","_s2","navigate","producers","setProducers","actors","setActors","formData","setFormData","name","desc","director","poster","yearOfRelease","producer","submitting","setSubmitting","errors","setErrors","fetchData","producersData","actorsData","Promise","all","console","validateForm","newErrors","length","Object","keys","handleChange","e","value","target","prev","handleActorsChange","event","onSubmit","preventDefault","post","_id","maxWidth","margin","padding","title","style","flexDirection","gap","label","onChange","helperText","fullWidth","multiline","rows","type","map","multiple","actor","variant","disabled","mt","_c2","$RefreshReg$"],"sources":["/Users/jayachandran/Downloads/imdb-wroking-with-api/imdb-clone-client/src/EditMovies.js"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\n// // import Button from \"@mui/material/Button\";\n// // import TextField from \"@mui/material/TextField\";\n// // import { useNavigate, useParams } from \"react-router-dom\";\n// // import CircularProgress from \"@mui/material/CircularProgress\";\n// // import Box from \"@mui/material/Box\";\n// // import { useFormik } from \"formik\";\n// // import * as yup from \"yup\";\n// // import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n// // import apiService from \"./services/api.service\"; // Import apiService\n\n// // function EditMovies() {\n// //   const { id } = useParams();\n// //   const [movie, setMovie] = useState(null);\n\n// //   useEffect(() => {\n// //     getMovie();\n// //   }, []);\n\n// //   const getMovie = async () => {\n// //     const moviesData = await apiService.getMovie(id); // Use apiService\n// //     setMovie(moviesData);\n// //   };\n\n// //   return (\n// //     <>\n// //       {movie ? (\n// //         <EditFunction movie={movie} />\n// //       ) : (\n// //         <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n// //           <CircularProgress />\n// //         </Box>\n// //       )}\n// //     </>\n// //   );\n// // }\n\n// // const EditFunction = ({ movie }) => {\n// //   const navigate = useNavigate();\n// //   const [actors, setActors] = useState([]);\n// //   const [producer, setProducer] = useState(\"\");\n// //   const [producerArr, setProducerArr] = useState([]);\n// //   const [actorNames, setActorNames] = useState([]);\n\n// //   useEffect(() => {\n// //     getData();\n// //   }, []);\n\n// //   const getData = async () => {\n// //     const producers = await apiService.getProducers(); // Use apiService\n// //     const actors = await apiService.getActors(); // Use apiService\n// //     setProducerArr(producers);\n// //     setActorNames(actors);\n// //   };\n\n// //   const handleProducerChange = (e) => {\n// //     const { value } = e.target;\n// //     setProducer(value);\n// //   };\n\n// //   const handleChange = (e) => {\n// //     const { value } = e.target;\n// //     setActors(typeof value === \"string\" ? value.split(\",\") : value);\n// //   };\n\n// //   const movieValidationSchema = yup.object({\n// //     name: yup.string().required(\"*Name field is mandatory\").min(3),\n// //     desc: yup.string().required(\"*Description is mandatory\").min(1),\n// //     director: yup.string().required(\"*Director field is mandatory\").min(5),\n// //     poster: yup.string().required(\"*Poster is mandatory\").min(5),\n// //     yearOfRelease: yup\n// //       .number()\n// //       .required(\"*Year of release field is mandatory\")\n// //       .min(5),\n// //   });\n\n// //   const formik = useFormik({\n// //     initialValues: {\n// //       name: movie.name,\n// //       desc: movie.desc,\n// //       director: movie.director,\n// //       poster: movie.poster,\n// //       yearOfRelease: movie.yearOfRelease,\n// //     },\n// //     validationSchema: movieValidationSchema,\n// //     onSubmit: async (newMovie) => {\n// //       await apiService.updateMovie(movie._id, { ...newMovie, actors, producer }); // Use apiService\n// //       navigate(\"/\");\n// //     },\n// //   });\n\n// //   return (\n// //     <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n// //       <TextField\n// //         label=\"Enter the name\"\n// //         variant=\"outlined\"\n// //         id=\"name\"\n// //         name=\"name\"\n// //         value={formik.values.name}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.name && formik.errors.name}\n// //         helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the movie Description\"\n// //         variant=\"outlined\"\n// //         id=\"desc\"\n// //         name=\"desc\"\n// //         value={formik.values.desc}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.desc && formik.errors.desc}\n// //         helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the poster link\"\n// //         variant=\"outlined\"\n// //         id=\"poster\"\n// //         name=\"poster\"\n// //         value={formik.values.poster}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.poster && formik.errors.poster}\n// //         helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the director name\"\n// //         variant=\"outlined\"\n// //         id=\"director\"\n// //         name=\"director\"\n// //         value={formik.values.director}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.director && formik.errors.director}\n// //         helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n// //       />\n// //       <TextField\n// //         label=\"Enter the year of release\"\n// //         variant=\"outlined\"\n// //         id=\"yearOfRelease\"\n// //         name=\"yearOfRelease\"\n// //         value={formik.values.yearOfRelease}\n// //         onChange={formik.handleChange}\n// //         onBlur={formik.handleBlur}\n// //         error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n// //         helperText={\n// //           formik.touched.yearOfRelease && formik.errors.yearOfRelease\n// //             ? formik.errors.yearOfRelease\n// //             : \"\"\n// //         }\n// //       />\n// //       <FormControl fullWidth>\n// //         <InputLabel id=\"producer\">Producer Name</InputLabel>\n// //         <Select\n// //           labelId=\"producer\"\n// //           id=\"producer\"\n// //           value={producer}\n// //           label=\"producer\"\n// //           onChange={handleProducerChange}\n// //         >\n// //           {producerArr.map((prodName) => (\n// //             <MenuItem key={prodName._id} value={prodName._id}>\n// //               {prodName.name}\n// //             </MenuItem>\n// //           ))}\n// //         </Select>\n// //       </FormControl>\n// //       <FormControl fullWidth>\n// //         <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n// //         <Select\n// //           labelId=\"actor\"\n// //           id=\"actor\"\n// //           multiple\n// //           value={actors}\n// //           onChange={handleChange}\n// //         >\n// //           {actorNames.map((actor) => (\n// //             <MenuItem key={actor._id} value={actor._id}>\n// //               {actor.name}\n// //             </MenuItem>\n// //           ))}\n// //         </Select>\n// //       </FormControl>\n// //       <Button variant=\"contained\" type=\"submit\">\n// //         Update Movie\n// //       </Button>\n// //     </form>\n// //   );\n// // };\n\n// // export default EditMovies;\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Button } from \"@/components/ui/button\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"@/components/ui/select\";\n// import {\n//   Form,\n//   FormControl,\n//   FormField,\n//   FormItem,\n//   FormLabel,\n//   FormMessage,\n// } from \"@/components/ui/form\";\n// import { Loader2 } from \"lucide-react\";\n// import { zodResolver } from \"@hookform/resolve\";\n// import { useForm } from \"react-hook-form\";\n// import * as z from \"zod\";\n// import apiService from \"./services/api.service\";\n// // import apiService from \"./services/api.service\"; // Import apiService\n// // import { API_CONFIG } from \"./config/api.config\"; // Import API_CONFIG\n// const movieSchema = z.object({\n//   name: z.string().min(3, { message: \"Name must be at least 3 characters\" }),\n//   desc: z.string().min(1, { message: \"Description is required\" }),\n//   director: z.string().min(5, { message: \"Director name must be at least 5 characters\" }),\n//   poster: z.string().min(5, { message: \"Poster URL must be at least 5 characters\" }),\n//   yearOfRelease: z.number().min(1900, { message: \"Invalid year\" }),\n//   producer: z.string().min(1, { message: \"Producer is required\" }),\n//   actors: z.array(z.string()).min(1, { message: \"At least one actor must be selected\" })\n// });\n\n// function EditMovies() {\n//   const { id } = useParams();\n//   const [loading, setLoading] = useState(true);\n//   const [movie, setMovie] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetchMovie();\n//   }, [id]);\n\n//   const fetchMovie = async () => {\n//     try {\n//       const response = await apiService.get(`/movies/${id}`);\n//       setMovie(response);\n//       setLoading(false);\n//     } catch (err) {\n//       setError(\"Failed to fetch movie details\");\n//       setLoading(false);\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"flex justify-center items-center h-64\">\n//         <Loader2 className=\"h-8 w-8 animate-spin\" />\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return <div className=\"text-red-500 text-center\">{error}</div>;\n//   }\n\n//   return movie ? <EditMovieForm movie={movie} /> : null;\n// }\n\n// function EditMovieForm({ movie }) {\n//   const navigate = useNavigate();\n//   const [producers, setProducers] = useState([]);\n//   const [actors, setActors] = useState([]);\n//   const [submitting, setSubmitting] = useState(false);\n\n//   const form = useForm({\n//     resolver: zodResolver(movieSchema),\n//     defaultValues: {\n//       name: movie.name,\n//       desc: movie.desc,\n//       director: movie.director,\n//       poster: movie.poster,\n//       yearOfRelease: movie.yearOfRelease,\n//       producer: movie.producer,\n//       actors: movie.actors\n//     }\n//   });\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const [producersData, actorsData] = await Promise.all([\n//         apiService.get('/producers'),\n//         apiService.get('/actors')\n//       ]);\n//       setProducers(producersData);\n//       setActors(actorsData);\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//     }\n//   };\n\n//   const onSubmit = async (data) => {\n//     try {\n//       setSubmitting(true);\n//       await apiService.post(`/movies/${movie._id}`, data);\n//       navigate('/');\n//     } catch (error) {\n//       console.error('Failed to update movie:', error);\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <Card className=\"w-full max-w-2xl mx-auto mt-6\">\n//       <CardHeader>\n//         <CardTitle>Edit Movie</CardTitle>\n//       </CardHeader>\n//       <CardContent>\n//         <Form {...form}>\n//           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n//             <FormField\n//               control={form.control}\n//               name=\"name\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Movie Name</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"desc\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Description</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"director\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Director</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"poster\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Poster URL</FormLabel>\n//                   <FormControl>\n//                     <Input {...field} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"yearOfRelease\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Year of Release</FormLabel>\n//                   <FormControl>\n//                     <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} />\n//                   </FormControl>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"producer\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Producer</FormLabel>\n//                   <Select onValueChange={field.onChange} defaultValue={field.value}>\n//                     <FormControl>\n//                       <SelectTrigger>\n//                         <SelectValue placeholder=\"Select a producer\" />\n//                       </SelectTrigger>\n//                     </FormControl>\n//                     <SelectContent>\n//                       {producers.map((producer) => (\n//                         <SelectItem key={producer._id} value={producer._id}>\n//                           {producer.name}\n//                         </SelectItem>\n//                       ))}\n//                     </SelectContent>\n//                   </Select>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <FormField\n//               control={form.control}\n//               name=\"actors\"\n//               render={({ field }) => (\n//                 <FormItem>\n//                   <FormLabel>Actors</FormLabel>\n//                   <Select\n//                     onValueChange={(value) => field.onChange([...field.value, value])}\n//                     value={field.value}\n//                     multiple\n//                   >\n//                     <FormControl>\n//                       <SelectTrigger>\n//                         <SelectValue placeholder=\"Select actors\" />\n//                       </SelectTrigger>\n//                     </FormControl>\n//                     <SelectContent>\n//                       {actors.map((actor) => (\n//                         <SelectItem key={actor._id} value={actor._id}>\n//                           {actor.name}\n//                         </SelectItem>\n//                       ))}\n//                     </SelectContent>\n//                   </Select>\n//                   <FormMessage />\n//                 </FormItem>\n//               )}\n//             />\n\n//             <Button type=\"submit\" disabled={submitting}>\n//               {submitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n//               Update Movie\n//             </Button>\n//           </form>\n//         </Form>\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default EditMovies;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport apiService from \"./services/api.service\";\n\nfunction EditMovies() {\n  const { id } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchMovie();\n  }, []);\n\n  const fetchMovie = async () => {\n    try {\n      const response = await apiService.get(`/movies/${id}`);\n      setMovie(response);\n      setLoading(false);\n    } catch (err) {\n      setError(\"Failed to fetch movie details\");\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"64vh\" }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <Box sx={{ color: \"error.main\", textAlign: \"center\" }}>{error}</Box>;\n  }\n\n  return movie ? <EditMovieForm movie={movie} /> : null;\n}\n\nfunction EditMovieForm({ movie }) {\n  const navigate = useNavigate();\n  const [producers, setProducers] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [formData, setFormData] = useState({\n    name: movie.name,\n    desc: movie.desc,\n    director: movie.director,\n    poster: movie.poster,\n    yearOfRelease: movie.yearOfRelease,\n    producer: movie.producer || \"\",\n    actors: movie.actors || []\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const [producersData, actorsData] = await Promise.all([\n        apiService.get('/producers'),\n        apiService.get('/actors')\n      ]);\n      setProducers(producersData);\n      setActors(actorsData);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.name || formData.name.length < 3) {\n      newErrors.name = \"Name must be at least 3 characters\";\n    }\n    if (!formData.desc) {\n      newErrors.desc = \"Description is required\";\n    }\n    if (!formData.director || formData.director.length < 5) {\n      newErrors.director = \"Director name must be at least 5 characters\";\n    }\n    if (!formData.poster || formData.poster.length < 5) {\n      newErrors.poster = \"Poster URL must be at least 5 characters\";\n    }\n    if (!formData.yearOfRelease || formData.yearOfRelease < 1900) {\n      newErrors.yearOfRelease = \"Invalid year\";\n    }\n    if (!formData.producer) {\n      newErrors.producer = \"Producer is required\";\n    }\n    if (!formData.actors || formData.actors.length === 0) {\n      newErrors.actors = \"At least one actor must be selected\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleActorsChange = (event) => {\n    setFormData(prev => ({\n      ...prev,\n      actors: event.target.value\n    }));\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    try {\n      setSubmitting(true);\n      await apiService.post(`/movies/${movie._id}`, formData);\n      navigate('/');\n    } catch (error) {\n      console.error('Failed to update movie:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Card sx={{ maxWidth: 800, margin: \"2rem auto\", padding: \"1rem\" }}>\n      <CardHeader title=\"Edit Movie\" />\n      <CardContent>\n        <form onSubmit={onSubmit} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n          <TextField\n            label=\"Movie Name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            error={!!errors.name}\n            helperText={errors.name}\n            fullWidth\n          />\n\n          <TextField\n            label=\"Description\"\n            name=\"desc\"\n            value={formData.desc}\n            onChange={handleChange}\n            error={!!errors.desc}\n            helperText={errors.desc}\n            fullWidth\n            multiline\n            rows={3}\n          />\n\n          <TextField\n            label=\"Director\"\n            name=\"director\"\n            value={formData.director}\n            onChange={handleChange}\n            error={!!errors.director}\n            helperText={errors.director}\n            fullWidth\n          />\n\n          <TextField\n            label=\"Poster URL\"\n            name=\"poster\"\n            value={formData.poster}\n            onChange={handleChange}\n            error={!!errors.poster}\n            helperText={errors.poster}\n            fullWidth\n          />\n\n          <TextField\n            label=\"Year of Release\"\n            name=\"yearOfRelease\"\n            type=\"number\"\n            value={formData.yearOfRelease}\n            onChange={handleChange}\n            error={!!errors.yearOfRelease}\n            helperText={errors.yearOfRelease}\n            fullWidth\n          />\n\n          <FormControl fullWidth error={!!errors.producer}>\n            <InputLabel>Producer</InputLabel>\n            <Select\n              name=\"producer\"\n              value={formData.producer}\n              onChange={handleChange}\n              label=\"Producer\"\n            >\n              {producers.map((producer) => (\n                <MenuItem key={producer._id} value={producer._id}>\n                  {producer.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <FormControl fullWidth error={!!errors.actors}>\n            <InputLabel>Actors</InputLabel>\n            <Select\n              multiple\n              name=\"actors\"\n              value={formData.actors}\n              onChange={handleActorsChange}\n              label=\"Actors\"\n            >\n              {actors.map((actor) => (\n                <MenuItem key={actor._id} value={actor._id}>\n                  {actor.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={submitting}\n            sx={{ mt: 2 }}\n          >\n            {submitting ? \"Updating...\" : \"Update Movie\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default EditMovies;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}