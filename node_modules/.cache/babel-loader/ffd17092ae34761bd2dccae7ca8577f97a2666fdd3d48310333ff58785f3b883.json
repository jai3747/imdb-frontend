{"ast":null,"code":"// src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from '../config/api.config';\n\n// Create axios instance with proper configuration for CORS\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  withCredentials: false // Keep false to avoid CORS preflight issues\n});\n\n// Add request interceptor for logging and debugging\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  const url = config.baseURL + config.url;\n  console.log(`🚀 API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${url}`);\n\n  // Add timestamp to help with debugging\n  config.metadata = {\n    startTime: new Date()\n  };\n  return config;\n}, error => {\n  console.error('❌ Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for logging and error handling\napiClient.interceptors.response.use(response => {\n  var _response$config$meth;\n  const duration = new Date() - response.config.metadata.startTime;\n  const url = response.config.baseURL + response.config.url;\n  console.log(`✅ API Response: ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${url} - Status: ${response.status} (${duration}ms)`);\n  return response;\n}, error => {\n  var _error$config;\n  const duration = (_error$config = error.config) !== null && _error$config !== void 0 && _error$config.metadata ? new Date() - error.config.metadata.startTime : 0;\n  const url = error.config ? error.config.baseURL + error.config.url : 'unknown';\n\n  // Handle different types of errors\n  if (error.response) {\n    var _error$config2, _error$config2$method;\n    // Server responded with error status\n    console.error(`❌ API Error: ${(_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : (_error$config2$method = _error$config2.method) === null || _error$config2$method === void 0 ? void 0 : _error$config2$method.toUpperCase()} ${url} - Status: ${error.response.status} (${duration}ms)`, error.response.data);\n  } else if (error.request) {\n    var _error$config3, _error$config3$method, _error$config4, _error$config5, _error$config6;\n    // Request was made but no response received (likely CORS)\n    console.error(`🔌 Network/CORS Error: ${(_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : (_error$config3$method = _error$config3.method) === null || _error$config3$method === void 0 ? void 0 : _error$config3$method.toUpperCase()} ${url} - No response received (${duration}ms)`);\n    console.error('This is likely a CORS issue. Request details:', {\n      url: url,\n      method: (_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.method,\n      timeout: (_error$config5 = error.config) === null || _error$config5 === void 0 ? void 0 : _error$config5.timeout,\n      headers: (_error$config6 = error.config) === null || _error$config6 === void 0 ? void 0 : _error$config6.headers\n    });\n  } else {\n    // Something happened in setting up the request\n    console.error(`⚙️ Setup Error: ${error.message}`);\n  }\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Health check methods\n  checkHealth: async () => {\n    try {\n      console.log('🏥 Checking API health...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      console.log('✅ Health check successful:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"❌ Health check failed:\", error);\n\n      // Provide more specific error handling for CORS issues\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        throw new Error('Network error - possibly CORS issue. Check if backend server is running and CORS is configured correctly.');\n      }\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Health check failed');\n    }\n  },\n  checkApiStatus: async endpoint => {\n    console.log(`🔍 Checking API status for endpoint: ${endpoint}`);\n    try {\n      const response = await apiClient.get(endpoint);\n      console.log(`✅ Status check successful for ${endpoint}:`, response.data);\n\n      // Handle various success scenarios\n      if (response.status === 200 || response.status === 304) {\n        return {\n          status: \"success\",\n          data: response.data\n        };\n      }\n      if (response.data && response.data.status) {\n        return {\n          status: response.data.status === \"ok\" ? \"success\" : \"error\",\n          data: response.data\n        };\n      }\n      return {\n        status: \"success\",\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(`❌ API status check failed for ${endpoint}:`, error.message);\n\n      // Handle CORS/Network errors\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        return {\n          status: \"error\",\n          error: 'Network error - possibly CORS issue'\n        };\n      }\n      return {\n        status: \"error\",\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Status check failed'\n      };\n    }\n  },\n  // Movie methods\n  getMovies: async () => {\n    try {\n      var _response$data;\n      console.log('🎬 Fetching movies...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n      console.log('✅ Movies fetched successfully:', ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) || 'unknown count');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(\"❌ Failed to fetch movies:\", error);\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch movies');\n    }\n  },\n  getMovie: async id => {\n    try {\n      console.log(`🎬 Fetching movie with ID: ${id}`);\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      console.log(`✅ Movie ${id} fetched successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error(`❌ Failed to fetch movie ${id}:`, error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || `Failed to fetch movie ${id}`);\n    }\n  },\n  addMovie: async movieData => {\n    try {\n      console.log('🎬 Adding new movie:', (movieData === null || movieData === void 0 ? void 0 : movieData.title) || 'unknown title');\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n      console.log('✅ Movie added successfully');\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error(\"❌ Failed to add movie:\", error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to add movie');\n    }\n  },\n  updateMovie: async (id, movieData) => {\n    try {\n      console.log(`🎬 Updating movie ${id}:`, (movieData === null || movieData === void 0 ? void 0 : movieData.title) || 'unknown title');\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/edit-movie/${id}`, movieData);\n      console.log(`✅ Movie ${id} updated successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error(`❌ Failed to update movie ${id}:`, error);\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || `Failed to update movie ${id}`);\n    }\n  },\n  deleteMovie: async id => {\n    try {\n      console.log(`🎬 Deleting movie ${id}`);\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/delete-movie/${id}`);\n      console.log(`✅ Movie ${id} deleted successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error(`❌ Failed to delete movie ${id}:`, error);\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || `Failed to delete movie ${id}`);\n    }\n  },\n  // Actor methods\n  getActors: async () => {\n    try {\n      var _response$data2;\n      console.log('🎭 Fetching actors...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n      console.log('✅ Actors fetched successfully:', ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.length) || 'unknown count');\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error(\"❌ Failed to fetch actors:\", error);\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch actors');\n    }\n  },\n  getActor: async id => {\n    try {\n      console.log(`🎭 Fetching actor with ID: ${id}`);\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.ACTORS}/${id}`);\n      console.log(`✅ Actor ${id} fetched successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error(`❌ Failed to fetch actor ${id}:`, error);\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || `Failed to fetch actor ${id}`);\n    }\n  },\n  addActor: async actorData => {\n    try {\n      console.log('🎭 Adding new actor:', (actorData === null || actorData === void 0 ? void 0 : actorData.name) || 'unknown name');\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n      console.log('✅ Actor added successfully');\n      return response.data;\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error(\"❌ Failed to add actor:\", error);\n      throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to add actor');\n    }\n  },\n  updateActor: async (id, actorData) => {\n    try {\n      console.log(`🎭 Updating actor ${id}:`, (actorData === null || actorData === void 0 ? void 0 : actorData.name) || 'unknown name');\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.ACTORS}/edit-actor/${id}`, actorData);\n      console.log(`✅ Actor ${id} updated successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      console.error(`❌ Failed to update actor ${id}:`, error);\n      throw new Error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || `Failed to update actor ${id}`);\n    }\n  },\n  deleteActor: async id => {\n    try {\n      console.log(`🎭 Deleting actor ${id}`);\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.ACTORS}/delete-actor/${id}`);\n      console.log(`✅ Actor ${id} deleted successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response12, _error$response12$dat;\n      console.error(`❌ Failed to delete actor ${id}:`, error);\n      throw new Error(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.message) || `Failed to delete actor ${id}`);\n    }\n  },\n  // Producer methods\n  getProducers: async () => {\n    try {\n      var _response$data3;\n      console.log('🎯 Fetching producers...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n      console.log('✅ Producers fetched successfully:', ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.length) || 'unknown count');\n      return response.data;\n    } catch (error) {\n      var _error$response13, _error$response13$dat;\n      console.error(\"❌ Failed to fetch producers:\", error);\n      throw new Error(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.message) || 'Failed to fetch producers');\n    }\n  },\n  getProducer: async id => {\n    try {\n      console.log(`🎯 Fetching producer with ID: ${id}`);\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.PRODUCERS}/${id}`);\n      console.log(`✅ Producer ${id} fetched successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response14, _error$response14$dat;\n      console.error(`❌ Failed to fetch producer ${id}:`, error);\n      throw new Error(((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.message) || `Failed to fetch producer ${id}`);\n    }\n  },\n  addProducer: async producerData => {\n    try {\n      console.log('🎯 Adding new producer:', (producerData === null || producerData === void 0 ? void 0 : producerData.name) || 'unknown name');\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n      console.log('✅ Producer added successfully');\n      return response.data;\n    } catch (error) {\n      var _error$response15, _error$response15$dat;\n      console.error(\"❌ Failed to add producer:\", error);\n      throw new Error(((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : (_error$response15$dat = _error$response15.data) === null || _error$response15$dat === void 0 ? void 0 : _error$response15$dat.message) || 'Failed to add producer');\n    }\n  },\n  updateProducer: async (id, producerData) => {\n    try {\n      console.log(`🎯 Updating producer ${id}:`, (producerData === null || producerData === void 0 ? void 0 : producerData.name) || 'unknown name');\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.PRODUCERS}/edit-producer/${id}`, producerData);\n      console.log(`✅ Producer ${id} updated successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response16, _error$response16$dat;\n      console.error(`❌ Failed to update producer ${id}:`, error);\n      throw new Error(((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.message) || `Failed to update producer ${id}`);\n    }\n  },\n  deleteProducer: async id => {\n    try {\n      console.log(`🎯 Deleting producer ${id}`);\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.PRODUCERS}/delete-producer/${id}`);\n      console.log(`✅ Producer ${id} deleted successfully`);\n      return response.data;\n    } catch (error) {\n      var _error$response17, _error$response17$dat;\n      console.error(`❌ Failed to delete producer ${id}:`, error);\n      throw new Error(((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : (_error$response17$dat = _error$response17.data) === null || _error$response17$dat === void 0 ? void 0 : _error$response17$dat.message) || `Failed to delete producer ${id}`);\n    }\n  },\n  // Generic HTTP methods\n  get: async endpoint => {\n    try {\n      console.log(`📡 GET request to: ${endpoint}`);\n      const response = await apiClient.get(endpoint);\n      console.log(`✅ GET request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      var _error$response18, _error$response18$dat;\n      console.error(`❌ GET request failed for ${endpoint}:`, error);\n      throw new Error(((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : (_error$response18$dat = _error$response18.data) === null || _error$response18$dat === void 0 ? void 0 : _error$response18$dat.message) || 'Failed to fetch data');\n    }\n  },\n  post: async (endpoint, data) => {\n    try {\n      console.log(`📡 POST request to: ${endpoint}`);\n      const response = await apiClient.post(endpoint, data);\n      console.log(`✅ POST request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      var _error$response19, _error$response19$dat;\n      console.error(`❌ POST request failed for ${endpoint}:`, error);\n      throw new Error(((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : (_error$response19$dat = _error$response19.data) === null || _error$response19$dat === void 0 ? void 0 : _error$response19$dat.message) || 'Failed to post data');\n    }\n  },\n  put: async (endpoint, data) => {\n    try {\n      console.log(`📡 PUT request to: ${endpoint}`);\n      const response = await apiClient.put(endpoint, data);\n      console.log(`✅ PUT request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      var _error$response20, _error$response20$dat;\n      console.error(`❌ PUT request failed for ${endpoint}:`, error);\n      throw new Error(((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : (_error$response20$dat = _error$response20.data) === null || _error$response20$dat === void 0 ? void 0 : _error$response20$dat.message) || 'Failed to update data');\n    }\n  },\n  delete: async endpoint => {\n    try {\n      console.log(`📡 DELETE request to: ${endpoint}`);\n      const response = await apiClient.delete(endpoint);\n      console.log(`✅ DELETE request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      var _error$response21, _error$response21$dat;\n      console.error(`❌ DELETE request failed for ${endpoint}:`, error);\n      throw new Error(((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : (_error$response21$dat = _error$response21.data) === null || _error$response21$dat === void 0 ? void 0 : _error$response21$dat.message) || 'Failed to delete data');\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","apiClient","create","baseURL","BASE_URL","timeout","TIMEOUT","headers","withCredentials","interceptors","request","use","config","_config$method","url","console","log","method","toUpperCase","metadata","startTime","Date","error","Promise","reject","response","_response$config$meth","duration","status","_error$config","_error$config2","_error$config2$method","data","_error$config3","_error$config3$method","_error$config4","_error$config5","_error$config6","message","apiService","checkHealth","get","ENDPOINTS","HEALTH","_error$response","_error$response$data","code","Error","checkApiStatus","endpoint","_error$response2","_error$response2$data","getMovies","_response$data","MOVIES","length","_error$response3","_error$response3$data","getMovie","id","_error$response4","_error$response4$data","addMovie","movieData","title","post","_error$response5","_error$response5$data","updateMovie","put","_error$response6","_error$response6$data","deleteMovie","delete","_error$response7","_error$response7$data","getActors","_response$data2","ACTORS","_error$response8","_error$response8$data","getActor","_error$response9","_error$response9$data","addActor","actorData","name","_error$response10","_error$response10$dat","updateActor","_error$response11","_error$response11$dat","deleteActor","_error$response12","_error$response12$dat","getProducers","_response$data3","PRODUCERS","_error$response13","_error$response13$dat","getProducer","_error$response14","_error$response14$dat","addProducer","producerData","_error$response15","_error$response15$dat","updateProducer","_error$response16","_error$response16$dat","deleteProducer","_error$response17","_error$response17$dat","_error$response18","_error$response18$dat","_error$response19","_error$response19$dat","_error$response20","_error$response20$dat","_error$response21","_error$response21$dat"],"sources":["/Users/jayachandran/imdb/imdb-frontend/src/services/api.service.js"],"sourcesContent":["// src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from '../config/api.config';\n\n// Create axios instance with proper configuration for CORS\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  withCredentials: false // Keep false to avoid CORS preflight issues\n});\n\n// Add request interceptor for logging and debugging\napiClient.interceptors.request.use(\n  config => {\n    const url = config.baseURL + config.url;\n    console.log(`🚀 API Request: ${config.method?.toUpperCase()} ${url}`);\n    \n    // Add timestamp to help with debugging\n    config.metadata = { startTime: new Date() };\n    \n    return config;\n  },\n  error => {\n    console.error('❌ Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for logging and error handling\napiClient.interceptors.response.use(\n  response => {\n    const duration = new Date() - response.config.metadata.startTime;\n    const url = response.config.baseURL + response.config.url;\n    \n    console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${url} - Status: ${response.status} (${duration}ms)`);\n    \n    return response;\n  },\n  error => {\n    const duration = error.config?.metadata ? new Date() - error.config.metadata.startTime : 0;\n    const url = error.config ? error.config.baseURL + error.config.url : 'unknown';\n    \n    // Handle different types of errors\n    if (error.response) {\n      // Server responded with error status\n      console.error(`❌ API Error: ${error.config?.method?.toUpperCase()} ${url} - Status: ${error.response.status} (${duration}ms)`, error.response.data);\n    } else if (error.request) {\n      // Request was made but no response received (likely CORS)\n      console.error(`🔌 Network/CORS Error: ${error.config?.method?.toUpperCase()} ${url} - No response received (${duration}ms)`);\n      console.error('This is likely a CORS issue. Request details:', {\n        url: url,\n        method: error.config?.method,\n        timeout: error.config?.timeout,\n        headers: error.config?.headers\n      });\n    } else {\n      // Something happened in setting up the request\n      console.error(`⚙️ Setup Error: ${error.message}`);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nconst apiService = {\n  // Health check methods\n  checkHealth: async () => {\n    try {\n      console.log('🏥 Checking API health...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      console.log('✅ Health check successful:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Health check failed:\", error);\n      \n      // Provide more specific error handling for CORS issues\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        throw new Error('Network error - possibly CORS issue. Check if backend server is running and CORS is configured correctly.');\n      }\n      \n      throw new Error(error.response?.data?.message || 'Health check failed');\n    }\n  },\n\n  checkApiStatus: async (endpoint) => {\n    console.log(`🔍 Checking API status for endpoint: ${endpoint}`);\n    try {\n      const response = await apiClient.get(endpoint);\n      console.log(`✅ Status check successful for ${endpoint}:`, response.data);\n      \n      // Handle various success scenarios\n      if (response.status === 200 || response.status === 304) {\n        return { status: \"success\", data: response.data };\n      }\n      \n      if (response.data && response.data.status) {\n        return { status: response.data.status === \"ok\" ? \"success\" : \"error\", data: response.data };\n      }\n      \n      return { status: \"success\", data: response.data };\n    } catch (error) {\n      console.error(`❌ API status check failed for ${endpoint}:`, error.message);\n      \n      // Handle CORS/Network errors\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        return { \n          status: \"error\", \n          error: 'Network error - possibly CORS issue'\n        };\n      }\n      \n      return { \n        status: \"error\", \n        error: error.response?.data?.message || error.message || 'Status check failed' \n      };\n    }\n  },\n\n  // Movie methods\n  getMovies: async () => {\n    try {\n      console.log('🎬 Fetching movies...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n      console.log('✅ Movies fetched successfully:', response.data?.length || 'unknown count');\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Failed to fetch movies:\", error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch movies');\n    }\n  },\n\n  getMovie: async (id) => {\n    try {\n      console.log(`🎬 Fetching movie with ID: ${id}`);\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.MOVIES}/${id}`);\n      console.log(`✅ Movie ${id} fetched successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to fetch movie ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to fetch movie ${id}`);\n    }\n  },\n\n  addMovie: async (movieData) => {\n    try {\n      console.log('🎬 Adding new movie:', movieData?.title || 'unknown title');\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n      console.log('✅ Movie added successfully');\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Failed to add movie:\", error);\n      throw new Error(error.response?.data?.message || 'Failed to add movie');\n    }\n  },\n\n  updateMovie: async (id, movieData) => {\n    try {\n      console.log(`🎬 Updating movie ${id}:`, movieData?.title || 'unknown title');\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.MOVIES}/edit-movie/${id}`, movieData);\n      console.log(`✅ Movie ${id} updated successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to update movie ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to update movie ${id}`);\n    }\n  },\n\n  deleteMovie: async (id) => {\n    try {\n      console.log(`🎬 Deleting movie ${id}`);\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.MOVIES}/delete-movie/${id}`);\n      console.log(`✅ Movie ${id} deleted successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to delete movie ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to delete movie ${id}`);\n    }\n  },\n\n  // Actor methods\n  getActors: async () => {\n    try {\n      console.log('🎭 Fetching actors...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n      console.log('✅ Actors fetched successfully:', response.data?.length || 'unknown count');\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Failed to fetch actors:\", error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch actors');\n    }\n  },\n\n  getActor: async (id) => {\n    try {\n      console.log(`🎭 Fetching actor with ID: ${id}`);\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.ACTORS}/${id}`);\n      console.log(`✅ Actor ${id} fetched successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to fetch actor ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to fetch actor ${id}`);\n    }\n  },\n\n  addActor: async (actorData) => {\n    try {\n      console.log('🎭 Adding new actor:', actorData?.name || 'unknown name');\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n      console.log('✅ Actor added successfully');\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Failed to add actor:\", error);\n      throw new Error(error.response?.data?.message || 'Failed to add actor');\n    }\n  },\n\n  updateActor: async (id, actorData) => {\n    try {\n      console.log(`🎭 Updating actor ${id}:`, actorData?.name || 'unknown name');\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.ACTORS}/edit-actor/${id}`, actorData);\n      console.log(`✅ Actor ${id} updated successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to update actor ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to update actor ${id}`);\n    }\n  },\n\n  deleteActor: async (id) => {\n    try {\n      console.log(`🎭 Deleting actor ${id}`);\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.ACTORS}/delete-actor/${id}`);\n      console.log(`✅ Actor ${id} deleted successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to delete actor ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to delete actor ${id}`);\n    }\n  },\n\n  // Producer methods\n  getProducers: async () => {\n    try {\n      console.log('🎯 Fetching producers...');\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n      console.log('✅ Producers fetched successfully:', response.data?.length || 'unknown count');\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Failed to fetch producers:\", error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch producers');\n    }\n  },\n\n  getProducer: async (id) => {\n    try {\n      console.log(`🎯 Fetching producer with ID: ${id}`);\n      const response = await apiClient.get(`${API_CONFIG.ENDPOINTS.PRODUCERS}/${id}`);\n      console.log(`✅ Producer ${id} fetched successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to fetch producer ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to fetch producer ${id}`);\n    }\n  },\n\n  addProducer: async (producerData) => {\n    try {\n      console.log('🎯 Adding new producer:', producerData?.name || 'unknown name');\n      const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n      console.log('✅ Producer added successfully');\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ Failed to add producer:\", error);\n      throw new Error(error.response?.data?.message || 'Failed to add producer');\n    }\n  },\n\n  updateProducer: async (id, producerData) => {\n    try {\n      console.log(`🎯 Updating producer ${id}:`, producerData?.name || 'unknown name');\n      const response = await apiClient.put(`${API_CONFIG.ENDPOINTS.PRODUCERS}/edit-producer/${id}`, producerData);\n      console.log(`✅ Producer ${id} updated successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to update producer ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to update producer ${id}`);\n    }\n  },\n\n  deleteProducer: async (id) => {\n    try {\n      console.log(`🎯 Deleting producer ${id}`);\n      const response = await apiClient.delete(`${API_CONFIG.ENDPOINTS.PRODUCERS}/delete-producer/${id}`);\n      console.log(`✅ Producer ${id} deleted successfully`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Failed to delete producer ${id}:`, error);\n      throw new Error(error.response?.data?.message || `Failed to delete producer ${id}`);\n    }\n  },\n\n  // Generic HTTP methods\n  get: async (endpoint) => {\n    try {\n      console.log(`📡 GET request to: ${endpoint}`);\n      const response = await apiClient.get(endpoint);\n      console.log(`✅ GET request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ GET request failed for ${endpoint}:`, error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch data');\n    }\n  },\n\n  post: async (endpoint, data) => {\n    try {\n      console.log(`📡 POST request to: ${endpoint}`);\n      const response = await apiClient.post(endpoint, data);\n      console.log(`✅ POST request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ POST request failed for ${endpoint}:`, error);\n      throw new Error(error.response?.data?.message || 'Failed to post data');\n    }\n  },\n\n  put: async (endpoint, data) => {\n    try {\n      console.log(`📡 PUT request to: ${endpoint}`);\n      const response = await apiClient.put(endpoint, data);\n      console.log(`✅ PUT request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ PUT request failed for ${endpoint}:`, error);\n      throw new Error(error.response?.data?.message || 'Failed to update data');\n    }\n  },\n\n  delete: async (endpoint) => {\n    try {\n      console.log(`📡 DELETE request to: ${endpoint}`);\n      const response = await apiClient.delete(endpoint);\n      console.log(`✅ DELETE request successful for ${endpoint}`);\n      return response.data;\n    } catch (error) {\n      console.error(`❌ DELETE request failed for ${endpoint}:`, error);\n      throw new Error(error.response?.data?.message || 'Failed to delete data');\n    }\n  }\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}