{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/new-imdb/imdb-clone-client/src/AddMovie.js\",\n  _s = $RefreshSig$();\n// //addmvoies.js\n\n// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate } from \"react-router-dom\";\n// import apiService from './services/api.service';  // Add this import\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// function AddMovie() {\n//   const navigate = useNavigate();\n//   const [actors, setactors] = useState([]);\n//   const [producer, setProducer] = useState('');\n//   const [producerArr,setProducerArr] = useState([]);\n//   const [actorNames,setActorNames] = useState([]);\n\n//   useEffect(()=>{\n//     getData();\n//   },[])\n\n//   const getData = async() => {\n//     const res = await axios.get(`${api.service}/producers`);\n//     const actorData = await axios.get(`${api.service}/actors`);\n//     setProducerArr(res.data);\n//     setActorNames(actorData.data);\n//   }\n\n//   const handleAgeChange = (e) => {\n//     const {value} = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setactors(\n//       typeof value === \"string\" ? value.split(\",\") : value\n//     );\n//   };\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: \"\",\n\n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async(newMovie) => {\n//       console.log(\"onSubmit : \", {...newMovie,actors,producer});\n//       await axios.post(`${api.service}/movies/add-movie`,{...newMovie,actors,producer});\n//       navigate(\"/\");\n//     },\n//   });\n\n//   return (\n//     <>\n//       <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//         <TextField\n//           label=\"Enter the name\"\n//           variant=\"outlined\"\n//           id=\"name\"\n//           name=\"name\"\n//           value={formik.values.name}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.name && formik.errors.name}\n//           helperText={\n//             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the movie Description\"\n//           variant=\"outlined\"\n//           id=\"desc\"\n//           name=\"desc\"\n//           value={formik.values.desc}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.desc && formik.errors.desc}\n//           helperText={\n//             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the poster link\"\n//           variant=\"outlined\"\n//           id=\"poster\"\n//           name=\"poster\"\n//           value={formik.values.poster}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.poster && formik.errors.poster}\n//           helperText={\n//             formik.touched.poster && formik.errors.name\n//               ? formik.errors.poster\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the director name\"\n//           variant=\"outlined\"\n//           id=\"director\"\n//           name=\"director\"\n//           value={formik.values.director}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.director && formik.errors.director}\n//           helperText={\n//             formik.touched.director && formik.errors.director\n//               ? formik.errors.director\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the year of release\"\n//           variant=\"outlined\"\n//           id=\"yearOfRelease\"\n//           name=\"yearOfRelease\"\n//           value={formik.values.yearOfRelease}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           helperText={\n//             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//               ? formik.errors.yearOfRelease\n//               : \"\"\n//           }\n//         />\n//         <FormControl fullWidth>\n//           <InputLabel id=\"producer\">Producer Name</InputLabel>\n//           <Select\n//             labelId=\"producer\"\n//             id=\"producer\"\n//             value={producer}\n//             label=\"producer\"\n//             onChange={handleAgeChange}\n//           >\n//             {\n//               producerArr.map((prodName)=>{\n//                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n//               })\n//             }\n\n//           </Select>\n//         </FormControl>\n//         <FormControl fullWidth >\n//           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//           <Select\n//             labelId=\"actor\"\n//             id=\"actor\"\n//             multiple\n//             value={actors}\n//             onChange={handleChange}\n//           >\n//             {actorNames.map((actor) => (\n//               <MenuItem key={actor._id} value={actor._id}>\n//                 {actor.name}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" type=\"submit\">\n//           Add Movie\n//         </Button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default AddMovie;\n//addmovie.js\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport apiService from './services/api.service'; // Make sure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddMovie() {\n  _s();\n  const navigate = useNavigate();\n  const [actors, setActors] = useState([]);\n  const [producer, setProducer] = useState('');\n  const [producerArr, setProducerArr] = useState([]);\n  const [actorNames, setActorNames] = useState([]);\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    try {\n      const producerResponse = await apiService.get('/producers');\n      const actorResponse = await apiService.get('/actors');\n      setProducerArr(producerResponse.data);\n      setActorNames(actorResponse.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleProducerChange = e => {\n    const {\n      value\n    } = e.target;\n    setProducer(value);\n  };\n  const handleActorsChange = e => {\n    const {\n      value\n    } = e.target;\n    setActors(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster is mandatory\").min(5),\n    yearOfRelease: yup.number().required(\"*Year of release field is mandatory\").min(1900).max(new Date().getFullYear())\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: \"\"\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async newMovie => {\n      try {\n        const movieData = {\n          ...newMovie,\n          actors,\n          producer\n        };\n        await apiService.post('/movies/add-movie', movieData);\n        navigate(\"/\");\n      } catch (error) {\n        console.error('Error adding movie:', error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    className: \"formGroup\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the name\",\n      variant: \"outlined\",\n      id: \"name\",\n      name: \"name\",\n      value: formik.values.name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.name && formik.errors.name,\n      helperText: formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the movie Description\",\n      variant: \"outlined\",\n      id: \"desc\",\n      name: \"desc\",\n      value: formik.values.desc,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.desc && formik.errors.desc,\n      helperText: formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the poster link\",\n      variant: \"outlined\",\n      id: \"poster\",\n      name: \"poster\",\n      value: formik.values.poster,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.poster && formik.errors.poster,\n      helperText: formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the director name\",\n      variant: \"outlined\",\n      id: \"director\",\n      name: \"director\",\n      value: formik.values.director,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.director && formik.errors.director,\n      helperText: formik.touched.director && formik.errors.director ? formik.errors.director : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter the year of release\",\n      variant: \"outlined\",\n      id: \"yearOfRelease\",\n      name: \"yearOfRelease\",\n      type: \"number\",\n      value: formik.values.yearOfRelease,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      error: formik.touched.yearOfRelease && formik.errors.yearOfRelease,\n      helperText: formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"producer\",\n        children: \"Producer Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"producer\",\n        id: \"producer\",\n        value: producer,\n        label: \"Producer Name\",\n        onChange: handleProducerChange,\n        children: producerArr.map(prodName => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: prodName._id,\n          children: prodName.name\n        }, prodName._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"actor\",\n        children: \"Select the Actor names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"actor\",\n        id: \"actor\",\n        multiple: true,\n        value: actors,\n        label: \"Select the Actor names\",\n        onChange: handleActorsChange,\n        children: actorNames.map(actor => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: actor._id,\n          children: actor.name\n        }, actor._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      children: \"Add Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n_s(AddMovie, \"bG1HR6BkfQMX8Fz/7Z4rgL5r6as=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = AddMovie;\nexport default AddMovie;\nvar _c;\n$RefreshReg$(_c, \"AddMovie\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","useNavigate","useFormik","yup","FormControl","InputLabel","MenuItem","Select","apiService","jsxDEV","_jsxDEV","AddMovie","_s","navigate","actors","setActors","producer","setProducer","producerArr","setProducerArr","actorNames","setActorNames","getData","producerResponse","get","actorResponse","data","error","console","handleProducerChange","e","value","target","handleActorsChange","split","movieValidationSchema","object","name","string","required","min","desc","director","poster","yearOfRelease","number","max","Date","getFullYear","formik","initialValues","validationSchema","onSubmit","newMovie","movieData","post","handleSubmit","className","children","label","variant","id","values","onChange","handleChange","onBlur","handleBlur","touched","errors","helperText","fileName","_jsxFileName","lineNumber","columnNumber","type","fullWidth","labelId","map","prodName","_id","multiple","actor","_c","$RefreshReg$"],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/AddMovie.js"],"sourcesContent":["// //addmvoies.js\n\n// import React, { useEffect, useState } from \"react\";\n// import Button from \"@mui/material/Button\";\n// import TextField from \"@mui/material/TextField\";\n// import { useNavigate } from \"react-router-dom\";\n// import apiService from './services/api.service';  // Add this import\n// import { useFormik } from \"formik\";\n// import * as yup from \"yup\";\n// import {\n//   FormControl,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n\n// function AddMovie() {\n//   const navigate = useNavigate();\n//   const [actors, setactors] = useState([]);\n//   const [producer, setProducer] = useState('');\n//   const [producerArr,setProducerArr] = useState([]);\n//   const [actorNames,setActorNames] = useState([]);\n\n\n//   useEffect(()=>{\n//     getData();\n//   },[])\n\n//   const getData = async() => {\n//     const res = await axios.get(`${api.service}/producers`);\n//     const actorData = await axios.get(`${api.service}/actors`);\n//     setProducerArr(res.data);\n//     setActorNames(actorData.data);\n//   }\n\n//   const handleAgeChange = (e) => {\n//     const {value} = e.target;\n//     setProducer(value);\n//   };\n\n//   const handleChange = (e) => {\n//     const { value } = e.target;\n//     setactors(\n//       typeof value === \"string\" ? value.split(\",\") : value\n//     );\n//   };\n\n//   const movieValidationSchema = yup.object({\n//     name: yup.string().required(\"*Name field is mandatory\").min(3),\n//     desc: yup.string().required(\"*Description is mandatory\").min(1),\n//     director: yup.string().required(\"*Director field is mandatory\").min(5),\n//     poster: yup.string().required(\"*Poster  is mandatory\").min(5),\n//     yearOfRelease: yup\n//       .number()\n//       .required(\"*Year of release field is mandatory\")\n//       .min(5),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: \"\",\n//       desc: \"\",\n//       director: \"\",\n//       poster: \"\",\n//       yearOfRelease: \"\",\n      \n//     },\n//     validationSchema: movieValidationSchema,\n//     onSubmit: async(newMovie) => {\n//       console.log(\"onSubmit : \", {...newMovie,actors,producer});\n//       await axios.post(`${api.service}/movies/add-movie`,{...newMovie,actors,producer});\n//       navigate(\"/\");\n//     },\n//   });\n\n//   return (\n//     <>\n//       <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n//         <TextField\n//           label=\"Enter the name\"\n//           variant=\"outlined\"\n//           id=\"name\"\n//           name=\"name\"\n//           value={formik.values.name}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.name && formik.errors.name}\n//           helperText={\n//             formik.touched.name && formik.errors.name ? formik.errors.name : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the movie Description\"\n//           variant=\"outlined\"\n//           id=\"desc\"\n//           name=\"desc\"\n//           value={formik.values.desc}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.desc && formik.errors.desc}\n//           helperText={\n//             formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the poster link\"\n//           variant=\"outlined\"\n//           id=\"poster\"\n//           name=\"poster\"\n//           value={formik.values.poster}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.poster && formik.errors.poster}\n//           helperText={\n//             formik.touched.poster && formik.errors.name\n//               ? formik.errors.poster\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the director name\"\n//           variant=\"outlined\"\n//           id=\"director\"\n//           name=\"director\"\n//           value={formik.values.director}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.director && formik.errors.director}\n//           helperText={\n//             formik.touched.director && formik.errors.director\n//               ? formik.errors.director\n//               : \"\"\n//           }\n//         />\n//         <TextField\n//           label=\"Enter the year of release\"\n//           variant=\"outlined\"\n//           id=\"yearOfRelease\"\n//           name=\"yearOfRelease\"\n//           value={formik.values.yearOfRelease}\n//           onChange={formik.handleChange}\n//           onBlur={formik.handleBlur}\n//           error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n//           helperText={\n//             formik.touched.yearOfRelease && formik.errors.yearOfRelease\n//               ? formik.errors.yearOfRelease\n//               : \"\"\n//           }\n//         />\n//         <FormControl fullWidth>\n//           <InputLabel id=\"producer\">Producer Name</InputLabel>\n//           <Select\n//             labelId=\"producer\"\n//             id=\"producer\"\n//             value={producer}\n//             label=\"producer\"\n//             onChange={handleAgeChange}\n//           >\n//             {\n//               producerArr.map((prodName)=>{\n//                 return <MenuItem value={prodName._id}>{prodName.name}</MenuItem>\n//               })\n//             }\n            \n//           </Select>\n//         </FormControl>\n//         <FormControl fullWidth >\n//           <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n//           <Select\n//             labelId=\"actor\"\n//             id=\"actor\"\n//             multiple\n//             value={actors}\n//             onChange={handleChange}\n//           >\n//             {actorNames.map((actor) => (\n//               <MenuItem key={actor._id} value={actor._id}>\n//                 {actor.name}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" type=\"submit\">\n//           Add Movie\n//         </Button>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default AddMovie;\n//addmovie.js\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@mui/material\";\nimport apiService from './services/api.service';  // Make sure this path is correct\n\nfunction AddMovie() {\n  const navigate = useNavigate();\n  const [actors, setActors] = useState([]);\n  const [producer, setProducer] = useState('');\n  const [producerArr, setProducerArr] = useState([]);\n  const [actorNames, setActorNames] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    try {\n      const producerResponse = await apiService.get('/producers');\n      const actorResponse = await apiService.get('/actors');\n      setProducerArr(producerResponse.data);\n      setActorNames(actorResponse.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const handleProducerChange = (e) => {\n    const { value } = e.target;\n    setProducer(value);\n  };\n\n  const handleActorsChange = (e) => {\n    const { value } = e.target;\n    setActors(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const movieValidationSchema = yup.object({\n    name: yup.string().required(\"*Name field is mandatory\").min(3),\n    desc: yup.string().required(\"*Description is mandatory\").min(1),\n    director: yup.string().required(\"*Director field is mandatory\").min(5),\n    poster: yup.string().required(\"*Poster is mandatory\").min(5),\n    yearOfRelease: yup\n      .number()\n      .required(\"*Year of release field is mandatory\")\n      .min(1900)\n      .max(new Date().getFullYear()),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      desc: \"\",\n      director: \"\",\n      poster: \"\",\n      yearOfRelease: \"\",\n    },\n    validationSchema: movieValidationSchema,\n    onSubmit: async (newMovie) => {\n      try {\n        const movieData = { ...newMovie, actors, producer };\n        await apiService.post('/movies/add-movie', movieData);\n        navigate(\"/\");\n      } catch (error) {\n        console.error('Error adding movie:', error);\n      }\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"formGroup\">\n      <TextField\n        label=\"Enter the name\"\n        variant=\"outlined\"\n        id=\"name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && formik.errors.name}\n        helperText={formik.touched.name && formik.errors.name ? formik.errors.name : \"\"}\n      />\n      <TextField\n        label=\"Enter the movie Description\"\n        variant=\"outlined\"\n        id=\"desc\"\n        name=\"desc\"\n        value={formik.values.desc}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.desc && formik.errors.desc}\n        helperText={formik.touched.desc && formik.errors.desc ? formik.errors.desc : \"\"}\n      />\n      <TextField\n        label=\"Enter the poster link\"\n        variant=\"outlined\"\n        id=\"poster\"\n        name=\"poster\"\n        value={formik.values.poster}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.poster && formik.errors.poster}\n        helperText={formik.touched.poster && formik.errors.poster ? formik.errors.poster : \"\"}\n      />\n      <TextField\n        label=\"Enter the director name\"\n        variant=\"outlined\"\n        id=\"director\"\n        name=\"director\"\n        value={formik.values.director}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.director && formik.errors.director}\n        helperText={formik.touched.director && formik.errors.director ? formik.errors.director : \"\"}\n      />\n      <TextField\n        label=\"Enter the year of release\"\n        variant=\"outlined\"\n        id=\"yearOfRelease\"\n        name=\"yearOfRelease\"\n        type=\"number\"\n        value={formik.values.yearOfRelease}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.yearOfRelease && formik.errors.yearOfRelease}\n        helperText={formik.touched.yearOfRelease && formik.errors.yearOfRelease ? formik.errors.yearOfRelease : \"\"}\n      />\n      <FormControl fullWidth>\n        <InputLabel id=\"producer\">Producer Name</InputLabel>\n        <Select\n          labelId=\"producer\"\n          id=\"producer\"\n          value={producer}\n          label=\"Producer Name\"\n          onChange={handleProducerChange}\n        >\n          {producerArr.map((prodName) => (\n            <MenuItem key={prodName._id} value={prodName._id}>\n              {prodName.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl fullWidth>\n        <InputLabel id=\"actor\">Select the Actor names</InputLabel>\n        <Select\n          labelId=\"actor\"\n          id=\"actor\"\n          multiple\n          value={actors}\n          label=\"Select the Actor names\"\n          onChange={handleActorsChange}\n        >\n          {actorNames.map((actor) => (\n            <MenuItem key={actor._id} value={actor._id}>\n              {actor.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Button variant=\"contained\" type=\"submit\">\n        Add Movie\n      </Button>\n    </form>\n  );\n}\n\nexport default AddMovie;"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SACEC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,MAAM,QACD,eAAe;AACtB,OAAOC,UAAU,MAAM,wBAAwB,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}