{"ast":null,"code":"// src/config/api.config.js\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Base URL configuration\nconst getBaseURL = () => {\n  // Check for environment variable first\n  if (process.env.REACT_APP_API_BASE_URL) {\n    return process.env.REACT_APP_API_BASE_URL;\n  }\n\n  // Default based on environment\n  if (isProduction) {\n    return 'https://your-production-api.com/api';\n  }\n\n  // Development default\n  return 'http://localhost:5000/api';\n};\nexport const API_CONFIG = {\n  // Base configuration\n  BASE_URL: getBaseURL(),\n  TIMEOUT: 10000,\n  // 10 seconds\n\n  // API endpoints - Fixed to match server endpoints\n  ENDPOINTS: {\n    // Health and status\n    HEALTH: '/health',\n    // Movies\n    MOVIES: '/movies',\n    MOVIES_STATUS: '/movies/status',\n    // Actors  \n    ACTORS: '/actors',\n    ACTORS_STATUS: '/actors/status',\n    // Producers\n    PRODUCERS: '/producers',\n    PRODUCERS_STATUS: '/producers/status',\n    // Metrics\n    METRICS: '/metrics-report'\n  },\n  // HTTP methods\n  METHODS: {\n    GET: 'GET',\n    POST: 'POST',\n    PUT: 'PUT',\n    DELETE: 'DELETE',\n    PATCH: 'PATCH'\n  },\n  // Status codes\n  STATUS_CODES: {\n    OK: 200,\n    CREATED: 201,\n    NO_CONTENT: 204,\n    NOT_MODIFIED: 304,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    INTERNAL_SERVER_ERROR: 500\n  },\n  // Headers\n  HEADERS: {\n    CONTENT_TYPE: 'Content-Type',\n    AUTHORIZATION: 'Authorization',\n    ACCEPT: 'Accept'\n  },\n  // Content types\n  CONTENT_TYPES: {\n    JSON: 'application/json',\n    FORM_DATA: 'multipart/form-data',\n    URL_ENCODED: 'application/x-www-form-urlencoded',\n    TEXT: 'text/plain'\n  },\n  // Fixed: Add the missing constants that were causing TypeError\n  SERVICE_TYPES: {\n    ACTOR: 'ACTOR',\n    MOVIE: 'MOVIE',\n    PRODUCER: 'PRODUCER'\n  }\n};\n\n// Helper function to build full endpoint URLs\nexport const buildEndpointURL = endpoint => {\n  return `${API_CONFIG.BASE_URL}${endpoint}`;\n};\n\n// Helper function to check if we're in development\nexport const isDev = () => isDevelopment;\n\n// Helper function to get API base URL without /api suffix for direct calls\nexport const getDirectBaseURL = () => {\n  if (process.env.REACT_APP_API_BASE_URL) {\n    return process.env.REACT_APP_API_BASE_URL.replace('/api', '');\n  }\n  if (isProduction) {\n    return 'https://your-production-api.com';\n  }\n  return 'http://localhost:5000';\n};\nexport default API_CONFIG;","map":{"version":3,"names":["isDevelopment","process","env","NODE_ENV","isProduction","getBaseURL","REACT_APP_API_BASE_URL","API_CONFIG","BASE_URL","TIMEOUT","ENDPOINTS","HEALTH","MOVIES","MOVIES_STATUS","ACTORS","ACTORS_STATUS","PRODUCERS","PRODUCERS_STATUS","METRICS","METHODS","GET","POST","PUT","DELETE","PATCH","STATUS_CODES","OK","CREATED","NO_CONTENT","NOT_MODIFIED","BAD_REQUEST","UNAUTHORIZED","FORBIDDEN","NOT_FOUND","INTERNAL_SERVER_ERROR","HEADERS","CONTENT_TYPE","AUTHORIZATION","ACCEPT","CONTENT_TYPES","JSON","FORM_DATA","URL_ENCODED","TEXT","SERVICE_TYPES","ACTOR","MOVIE","PRODUCER","buildEndpointURL","endpoint","isDev","getDirectBaseURL","replace"],"sources":["/Users/jayachandran/imdb/imdb-frontend/src/config/api.config.js"],"sourcesContent":["// src/config/api.config.js\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Base URL configuration\nconst getBaseURL = () => {\n  // Check for environment variable first\n  if (process.env.REACT_APP_API_BASE_URL) {\n    return process.env.REACT_APP_API_BASE_URL;\n  }\n  \n  // Default based on environment\n  if (isProduction) {\n    return 'https://your-production-api.com/api';\n  }\n  \n  // Development default\n  return 'http://localhost:5000/api';\n};\n\nexport const API_CONFIG = {\n  // Base configuration\n  BASE_URL: getBaseURL(),\n  TIMEOUT: 10000, // 10 seconds\n  \n  // API endpoints - Fixed to match server endpoints\n  ENDPOINTS: {\n    // Health and status\n    HEALTH: '/health',\n    \n    // Movies\n    MOVIES: '/movies',\n    MOVIES_STATUS: '/movies/status',\n    \n    // Actors  \n    ACTORS: '/actors',\n    ACTORS_STATUS: '/actors/status',\n    \n    // Producers\n    PRODUCERS: '/producers',  \n    PRODUCERS_STATUS: '/producers/status',\n    \n    // Metrics\n    METRICS: '/metrics-report'\n  },\n  \n  // HTTP methods\n  METHODS: {\n    GET: 'GET',\n    POST: 'POST', \n    PUT: 'PUT',\n    DELETE: 'DELETE',\n    PATCH: 'PATCH'\n  },\n  \n  // Status codes\n  STATUS_CODES: {\n    OK: 200,\n    CREATED: 201,\n    NO_CONTENT: 204,\n    NOT_MODIFIED: 304,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    INTERNAL_SERVER_ERROR: 500\n  },\n  \n  // Headers\n  HEADERS: {\n    CONTENT_TYPE: 'Content-Type',\n    AUTHORIZATION: 'Authorization',\n    ACCEPT: 'Accept'\n  },\n  \n  // Content types\n  CONTENT_TYPES: {\n    JSON: 'application/json',\n    FORM_DATA: 'multipart/form-data',\n    URL_ENCODED: 'application/x-www-form-urlencoded',\n    TEXT: 'text/plain'\n  },\n\n  // Fixed: Add the missing constants that were causing TypeError\n  SERVICE_TYPES: {\n    ACTOR: 'ACTOR',\n    MOVIE: 'MOVIE', \n    PRODUCER: 'PRODUCER'\n  }\n};\n\n// Helper function to build full endpoint URLs\nexport const buildEndpointURL = (endpoint) => {\n  return `${API_CONFIG.BASE_URL}${endpoint}`;\n};\n\n// Helper function to check if we're in development\nexport const isDev = () => isDevelopment;\n\n// Helper function to get API base URL without /api suffix for direct calls\nexport const getDirectBaseURL = () => {\n  if (process.env.REACT_APP_API_BASE_URL) {\n    return process.env.REACT_APP_API_BASE_URL.replace('/api', '');\n  }\n  \n  if (isProduction) {\n    return 'https://your-production-api.com';\n  }\n  \n  return 'http://localhost:5000';\n};\n\nexport default API_CONFIG;"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;AAC5D,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;;AAE1D;AACA,MAAME,UAAU,GAAGA,CAAA,KAAM;EACvB;EACA,IAAIJ,OAAO,CAACC,GAAG,CAACI,sBAAsB,EAAE;IACtC,OAAOL,OAAO,CAACC,GAAG,CAACI,sBAAsB;EAC3C;;EAEA;EACA,IAAIF,YAAY,EAAE;IAChB,OAAO,qCAAqC;EAC9C;;EAEA;EACA,OAAO,2BAA2B;AACpC,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG;EACxB;EACAC,QAAQ,EAAEH,UAAU,CAAC,CAAC;EACtBI,OAAO,EAAE,KAAK;EAAE;;EAEhB;EACAC,SAAS,EAAE;IACT;IACAC,MAAM,EAAE,SAAS;IAEjB;IACAC,MAAM,EAAE,SAAS;IACjBC,aAAa,EAAE,gBAAgB;IAE/B;IACAC,MAAM,EAAE,SAAS;IACjBC,aAAa,EAAE,gBAAgB;IAE/B;IACAC,SAAS,EAAE,YAAY;IACvBC,gBAAgB,EAAE,mBAAmB;IAErC;IACAC,OAAO,EAAE;EACX,CAAC;EAED;EACAC,OAAO,EAAE;IACPC,GAAG,EAAE,KAAK;IACVC,IAAI,EAAE,MAAM;IACZC,GAAG,EAAE,KAAK;IACVC,MAAM,EAAE,QAAQ;IAChBC,KAAK,EAAE;EACT,CAAC;EAED;EACAC,YAAY,EAAE;IACZC,EAAE,EAAE,GAAG;IACPC,OAAO,EAAE,GAAG;IACZC,UAAU,EAAE,GAAG;IACfC,YAAY,EAAE,GAAG;IACjBC,WAAW,EAAE,GAAG;IAChBC,YAAY,EAAE,GAAG;IACjBC,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE,GAAG;IACdC,qBAAqB,EAAE;EACzB,CAAC;EAED;EACAC,OAAO,EAAE;IACPC,YAAY,EAAE,cAAc;IAC5BC,aAAa,EAAE,eAAe;IAC9BC,MAAM,EAAE;EACV,CAAC;EAED;EACAC,aAAa,EAAE;IACbC,IAAI,EAAE,kBAAkB;IACxBC,SAAS,EAAE,qBAAqB;IAChCC,WAAW,EAAE,mCAAmC;IAChDC,IAAI,EAAE;EACR,CAAC;EAED;EACAC,aAAa,EAAE;IACbC,KAAK,EAAE,OAAO;IACdC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,OAAQ,GAAE1C,UAAU,CAACC,QAAS,GAAEyC,QAAS,EAAC;AAC5C,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAMlD,aAAa;;AAExC;AACA,OAAO,MAAMmD,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIlD,OAAO,CAACC,GAAG,CAACI,sBAAsB,EAAE;IACtC,OAAOL,OAAO,CAACC,GAAG,CAACI,sBAAsB,CAAC8C,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAC/D;EAEA,IAAIhD,YAAY,EAAE;IAChB,OAAO,iCAAiC;EAC1C;EAEA,OAAO,uBAAuB;AAChC,CAAC;AAED,eAAeG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}