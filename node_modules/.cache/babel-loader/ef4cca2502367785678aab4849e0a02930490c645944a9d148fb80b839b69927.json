{"ast":null,"code":"// src/services/api.service.js\nimport axios from 'axios';\nimport { API_CONFIG } from './config/api.config';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Response interceptor for handling errors\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Don't retry if we've already retried or if it's not an error we want to retry\n  if (originalRequest._retry || !shouldRetryError(error)) {\n    throw handleApiError(error);\n  }\n  originalRequest._retry = true;\n\n  // Implement exponential backoff\n  await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n  return apiClient(originalRequest);\n});\n\n// Error handler utility\nexport const handleApiError = error => {\n  if (error.response) {\n    var _error$response$data;\n    // Server responded with error status\n    const errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred with the server';\n    return new Error(errorMessage);\n  } else if (error.request) {\n    // Request made but no response\n    return new Error('Unable to connect to the server');\n  } else {\n    // Error in request setup\n    return new Error('Error setting up the request');\n  }\n};\n\n// Utility to determine if we should retry the request\nconst shouldRetryError = error => {\n  // Retry on network errors or 5xx server errors\n  return !error.response || error.response.status >= 500 && error.response.status <= 599;\n};\n\n// Delay utility for retries\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// API service methods\nexport const apiService = {\n  // Health check\n  checkHealth: async () => {\n    try {\n      const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n  // Check specific API status\n  checkApiStatus: async endpoint => {\n    try {\n      const response = await apiClient.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n  // Movies\n  movies: {\n    getAll: async () => {\n      try {\n        const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    },\n    add: async movieData => {\n      try {\n        const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    }\n  },\n  // Actors\n  actors: {\n    getAll: async () => {\n      try {\n        const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    },\n    add: async actorData => {\n      try {\n        const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    }\n  },\n  // Producers\n  producers: {\n    getAll: async () => {\n      try {\n        const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    },\n    add: async producerData => {\n      try {\n        const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_CONFIG","apiClient","create","baseURL","BASE_URL","timeout","TIMEOUT","headers","interceptors","response","use","error","originalRequest","config","_retry","shouldRetryError","handleApiError","delay","RETRY_DELAY","_retryCount","_error$response$data","errorMessage","data","message","Error","request","status","ms","Promise","resolve","setTimeout","apiService","checkHealth","get","ENDPOINTS","HEALTH","checkApiStatus","endpoint","movies","getAll","MOVIES","add","movieData","post","actors","ACTORS","actorData","producers","PRODUCERS","producerData"],"sources":["/Users/jayachandran/new-imdb/imdb-clone-client/src/services/api.service.js"],"sourcesContent":["\n  // src/services/api.service.js\n  import axios from 'axios';\n  import { API_CONFIG } from './config/api.config';\n  \n  // Create axios instance with default config\n  const apiClient = axios.create({\n    baseURL: API_CONFIG.BASE_URL,\n    timeout: API_CONFIG.TIMEOUT,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  // Response interceptor for handling errors\n  apiClient.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n      \n      // Don't retry if we've already retried or if it's not an error we want to retry\n      if (originalRequest._retry || !shouldRetryError(error)) {\n        throw handleApiError(error);\n      }\n  \n      originalRequest._retry = true;\n      \n      // Implement exponential backoff\n      await delay(API_CONFIG.RETRY_DELAY * (originalRequest._retryCount || 1));\n      \n      return apiClient(originalRequest);\n    }\n  );\n  \n  // Error handler utility\n  export const handleApiError = (error) => {\n    if (error.response) {\n      // Server responded with error status\n      const errorMessage = error.response.data?.message || 'An error occurred with the server';\n      return new Error(errorMessage);\n    } else if (error.request) {\n      // Request made but no response\n      return new Error('Unable to connect to the server');\n    } else {\n      // Error in request setup\n      return new Error('Error setting up the request');\n    }\n  };\n  \n  // Utility to determine if we should retry the request\n  const shouldRetryError = (error) => {\n    // Retry on network errors or 5xx server errors\n    return !error.response || (error.response.status >= 500 && error.response.status <= 599);\n  };\n  \n  // Delay utility for retries\n  const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n  \n  // API service methods\n  export const apiService = {\n    // Health check\n    checkHealth: async () => {\n      try {\n        const response = await apiClient.get(API_CONFIG.ENDPOINTS.HEALTH);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    },\n  \n    // Check specific API status\n    checkApiStatus: async (endpoint) => {\n      try {\n        const response = await apiClient.get(endpoint);\n        return response.data;\n      } catch (error) {\n        throw handleApiError(error);\n      }\n    },\n  \n    // Movies\n    movies: {\n      getAll: async () => {\n        try {\n          const response = await apiClient.get(API_CONFIG.ENDPOINTS.MOVIES);\n          return response.data;\n        } catch (error) {\n          throw handleApiError(error);\n        }\n      },\n      add: async (movieData) => {\n        try {\n          const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.MOVIES}/add-movie`, movieData);\n          return response.data;\n        } catch (error) {\n          throw handleApiError(error);\n        }\n      }\n    },\n  \n    // Actors\n    actors: {\n      getAll: async () => {\n        try {\n          const response = await apiClient.get(API_CONFIG.ENDPOINTS.ACTORS);\n          return response.data;\n        } catch (error) {\n          throw handleApiError(error);\n        }\n      },\n      add: async (actorData) => {\n        try {\n          const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.ACTORS}/add-actor`, actorData);\n          return response.data;\n        } catch (error) {\n          throw handleApiError(error);\n        }\n      }\n    },\n  \n    // Producers\n    producers: {\n      getAll: async () => {\n        try {\n          const response = await apiClient.get(API_CONFIG.ENDPOINTS.PRODUCERS);\n          return response.data;\n        } catch (error) {\n          throw handleApiError(error);\n        }\n      },\n      add: async (producerData) => {\n        try {\n          const response = await apiClient.post(`${API_CONFIG.ENDPOINTS.PRODUCERS}/add-producer`, producerData);\n          return response.data;\n        } catch (error) {\n          throw handleApiError(error);\n        }\n      }\n    }\n  };\n  \n  export default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}